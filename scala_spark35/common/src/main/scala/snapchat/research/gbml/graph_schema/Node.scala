// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package snapchat.research.gbml.graph_schema

/** @param nodeId
  *   should be unique for nodes per node_type
  * @param condensedNodeType
  *   condensed_node_type are integer values that correspond 1:1 to a node_type: string
  *   See GraphMetadata for mapping. If not provided, assumed homogeneous.
  * @param featureValues
  *   feature_values for a node
  */
@SerialVersionUID(0L)
final case class Node(
    nodeId: _root_.scala.Int = 0,
    condensedNodeType: _root_.scala.Option[_root_.scala.Int] = _root_.scala.None,
    featureValues: _root_.scala.Seq[_root_.scala.Float] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Node] {
    private[this] def featureValuesSerializedSize = {
      4 * featureValues.size
    }
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = nodeId
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, __value)
        }
      };
      if (condensedNodeType.isDefined) {
        val __value = condensedNodeType.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(2, __value)
      };
      if (featureValues.nonEmpty) {
        val __localsize = featureValuesSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = nodeId
        if (__v != 0) {
          _output__.writeUInt32(1, __v)
        }
      };
      condensedNodeType.foreach { __v =>
        val __m = __v
        _output__.writeUInt32(2, __m)
      };
      if (featureValues.nonEmpty) {
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(featureValuesSerializedSize)
        featureValues.foreach(_output__.writeFloatNoTag)
      };
      unknownFields.writeTo(_output__)
    }
    def withNodeId(__v: _root_.scala.Int): Node = copy(nodeId = __v)
    def getCondensedNodeType: _root_.scala.Int = condensedNodeType.getOrElse(0)
    def clearCondensedNodeType: Node = copy(condensedNodeType = _root_.scala.None)
    def withCondensedNodeType(__v: _root_.scala.Int): Node = copy(condensedNodeType = Option(__v))
    def clearFeatureValues = copy(featureValues = _root_.scala.Seq.empty)
    def addFeatureValues(__vs: _root_.scala.Float *): Node = addAllFeatureValues(__vs)
    def addAllFeatureValues(__vs: Iterable[_root_.scala.Float]): Node = copy(featureValues = featureValues ++ __vs)
    def withFeatureValues(__v: _root_.scala.Seq[_root_.scala.Float]): Node = copy(featureValues = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = nodeId
          if (__t != 0) __t else null
        }
        case 2 => condensedNodeType.orNull
        case 3 => featureValues
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(nodeId)
        case 2 => condensedNodeType.map(_root_.scalapb.descriptors.PInt(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PRepeated(featureValues.iterator.map(_root_.scalapb.descriptors.PFloat(_)).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: snapchat.research.gbml.graph_schema.Node.type = snapchat.research.gbml.graph_schema.Node
    // @@protoc_insertion_point(GeneratedMessage[snapchat.research.gbml.Node])
}

object Node extends scalapb.GeneratedMessageCompanion[snapchat.research.gbml.graph_schema.Node] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[snapchat.research.gbml.graph_schema.Node] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): snapchat.research.gbml.graph_schema.Node = {
    var __nodeId: _root_.scala.Int = 0
    var __condensedNodeType: _root_.scala.Option[_root_.scala.Int] = _root_.scala.None
    val __featureValues: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Float] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Float]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __nodeId = _input__.readUInt32()
        case 16 =>
          __condensedNodeType = Option(_input__.readUInt32())
        case 29 =>
          __featureValues += _input__.readFloat()
        case 26 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __featureValues += _input__.readFloat()
          }
          _input__.popLimit(oldLimit)
        }
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    snapchat.research.gbml.graph_schema.Node(
        nodeId = __nodeId,
        condensedNodeType = __condensedNodeType,
        featureValues = __featureValues.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[snapchat.research.gbml.graph_schema.Node] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      snapchat.research.gbml.graph_schema.Node(
        nodeId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        condensedNodeType = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Int]]),
        featureValues = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[_root_.scala.Float]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = GraphSchemaProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = GraphSchemaProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = snapchat.research.gbml.graph_schema.Node(
    nodeId = 0,
    condensedNodeType = _root_.scala.None,
    featureValues = _root_.scala.Seq.empty
  )
  implicit class NodeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.graph_schema.Node]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, snapchat.research.gbml.graph_schema.Node](_l) {
    def nodeId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.nodeId)((c_, f_) => c_.copy(nodeId = f_))
    def condensedNodeType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getCondensedNodeType)((c_, f_) => c_.copy(condensedNodeType = Option(f_)))
    def optionalCondensedNodeType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Int]] = field(_.condensedNodeType)((c_, f_) => c_.copy(condensedNodeType = f_))
    def featureValues: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Float]] = field(_.featureValues)((c_, f_) => c_.copy(featureValues = f_))
  }
  final val NODE_ID_FIELD_NUMBER = 1
  final val CONDENSED_NODE_TYPE_FIELD_NUMBER = 2
  final val FEATURE_VALUES_FIELD_NUMBER = 3
  def of(
    nodeId: _root_.scala.Int,
    condensedNodeType: _root_.scala.Option[_root_.scala.Int],
    featureValues: _root_.scala.Seq[_root_.scala.Float]
  ): _root_.snapchat.research.gbml.graph_schema.Node = _root_.snapchat.research.gbml.graph_schema.Node(
    nodeId,
    condensedNodeType,
    featureValues
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[snapchat.research.gbml.Node])
}
