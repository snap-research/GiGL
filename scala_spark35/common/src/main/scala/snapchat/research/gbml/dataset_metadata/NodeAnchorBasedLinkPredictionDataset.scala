// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package snapchat.research.gbml.dataset_metadata

/** Stores NodeAnchorBasedLinkPredictionSample-relevant output
  */
@SerialVersionUID(0L)
final case class NodeAnchorBasedLinkPredictionDataset(
    trainMainDataUri: _root_.scala.Predef.String = "",
    testMainDataUri: _root_.scala.Predef.String = "",
    valMainDataUri: _root_.scala.Predef.String = "",
    trainNodeTypeToRandomNegativeDataUri: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String] = _root_.scala.collection.immutable.Map.empty,
    valNodeTypeToRandomNegativeDataUri: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String] = _root_.scala.collection.immutable.Map.empty,
    testNodeTypeToRandomNegativeDataUri: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String] = _root_.scala.collection.immutable.Map.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[NodeAnchorBasedLinkPredictionDataset] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = trainMainDataUri
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = testMainDataUri
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = valMainDataUri
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      trainNodeTypeToRandomNegativeDataUri.foreach { __item =>
        val __value = snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset._typemapper_trainNodeTypeToRandomNegativeDataUri.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      valNodeTypeToRandomNegativeDataUri.foreach { __item =>
        val __value = snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset._typemapper_valNodeTypeToRandomNegativeDataUri.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      testNodeTypeToRandomNegativeDataUri.foreach { __item =>
        val __value = snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset._typemapper_testNodeTypeToRandomNegativeDataUri.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = trainMainDataUri
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = testMainDataUri
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = valMainDataUri
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      trainNodeTypeToRandomNegativeDataUri.foreach { __v =>
        val __m = snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset._typemapper_trainNodeTypeToRandomNegativeDataUri.toBase(__v)
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      valNodeTypeToRandomNegativeDataUri.foreach { __v =>
        val __m = snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset._typemapper_valNodeTypeToRandomNegativeDataUri.toBase(__v)
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      testNodeTypeToRandomNegativeDataUri.foreach { __v =>
        val __m = snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset._typemapper_testNodeTypeToRandomNegativeDataUri.toBase(__v)
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withTrainMainDataUri(__v: _root_.scala.Predef.String): NodeAnchorBasedLinkPredictionDataset = copy(trainMainDataUri = __v)
    def withTestMainDataUri(__v: _root_.scala.Predef.String): NodeAnchorBasedLinkPredictionDataset = copy(testMainDataUri = __v)
    def withValMainDataUri(__v: _root_.scala.Predef.String): NodeAnchorBasedLinkPredictionDataset = copy(valMainDataUri = __v)
    def clearTrainNodeTypeToRandomNegativeDataUri = copy(trainNodeTypeToRandomNegativeDataUri = _root_.scala.collection.immutable.Map.empty)
    def addTrainNodeTypeToRandomNegativeDataUri(__vs: (_root_.scala.Predef.String, _root_.scala.Predef.String) *): NodeAnchorBasedLinkPredictionDataset = addAllTrainNodeTypeToRandomNegativeDataUri(__vs)
    def addAllTrainNodeTypeToRandomNegativeDataUri(__vs: Iterable[(_root_.scala.Predef.String, _root_.scala.Predef.String)]): NodeAnchorBasedLinkPredictionDataset = copy(trainNodeTypeToRandomNegativeDataUri = trainNodeTypeToRandomNegativeDataUri ++ __vs)
    def withTrainNodeTypeToRandomNegativeDataUri(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]): NodeAnchorBasedLinkPredictionDataset = copy(trainNodeTypeToRandomNegativeDataUri = __v)
    def clearValNodeTypeToRandomNegativeDataUri = copy(valNodeTypeToRandomNegativeDataUri = _root_.scala.collection.immutable.Map.empty)
    def addValNodeTypeToRandomNegativeDataUri(__vs: (_root_.scala.Predef.String, _root_.scala.Predef.String) *): NodeAnchorBasedLinkPredictionDataset = addAllValNodeTypeToRandomNegativeDataUri(__vs)
    def addAllValNodeTypeToRandomNegativeDataUri(__vs: Iterable[(_root_.scala.Predef.String, _root_.scala.Predef.String)]): NodeAnchorBasedLinkPredictionDataset = copy(valNodeTypeToRandomNegativeDataUri = valNodeTypeToRandomNegativeDataUri ++ __vs)
    def withValNodeTypeToRandomNegativeDataUri(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]): NodeAnchorBasedLinkPredictionDataset = copy(valNodeTypeToRandomNegativeDataUri = __v)
    def clearTestNodeTypeToRandomNegativeDataUri = copy(testNodeTypeToRandomNegativeDataUri = _root_.scala.collection.immutable.Map.empty)
    def addTestNodeTypeToRandomNegativeDataUri(__vs: (_root_.scala.Predef.String, _root_.scala.Predef.String) *): NodeAnchorBasedLinkPredictionDataset = addAllTestNodeTypeToRandomNegativeDataUri(__vs)
    def addAllTestNodeTypeToRandomNegativeDataUri(__vs: Iterable[(_root_.scala.Predef.String, _root_.scala.Predef.String)]): NodeAnchorBasedLinkPredictionDataset = copy(testNodeTypeToRandomNegativeDataUri = testNodeTypeToRandomNegativeDataUri ++ __vs)
    def withTestNodeTypeToRandomNegativeDataUri(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]): NodeAnchorBasedLinkPredictionDataset = copy(testNodeTypeToRandomNegativeDataUri = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = trainMainDataUri
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = testMainDataUri
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = valMainDataUri
          if (__t != "") __t else null
        }
        case 4 => trainNodeTypeToRandomNegativeDataUri.iterator.map(snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset._typemapper_trainNodeTypeToRandomNegativeDataUri.toBase(_)).toSeq
        case 5 => valNodeTypeToRandomNegativeDataUri.iterator.map(snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset._typemapper_valNodeTypeToRandomNegativeDataUri.toBase(_)).toSeq
        case 6 => testNodeTypeToRandomNegativeDataUri.iterator.map(snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset._typemapper_testNodeTypeToRandomNegativeDataUri.toBase(_)).toSeq
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(trainMainDataUri)
        case 2 => _root_.scalapb.descriptors.PString(testMainDataUri)
        case 3 => _root_.scalapb.descriptors.PString(valMainDataUri)
        case 4 => _root_.scalapb.descriptors.PRepeated(trainNodeTypeToRandomNegativeDataUri.iterator.map(snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset._typemapper_trainNodeTypeToRandomNegativeDataUri.toBase(_).toPMessage).toVector)
        case 5 => _root_.scalapb.descriptors.PRepeated(valNodeTypeToRandomNegativeDataUri.iterator.map(snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset._typemapper_valNodeTypeToRandomNegativeDataUri.toBase(_).toPMessage).toVector)
        case 6 => _root_.scalapb.descriptors.PRepeated(testNodeTypeToRandomNegativeDataUri.iterator.map(snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset._typemapper_testNodeTypeToRandomNegativeDataUri.toBase(_).toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.type = snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset
    // @@protoc_insertion_point(GeneratedMessage[snapchat.research.gbml.NodeAnchorBasedLinkPredictionDataset])
}

object NodeAnchorBasedLinkPredictionDataset extends scalapb.GeneratedMessageCompanion[snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset = {
    var __trainMainDataUri: _root_.scala.Predef.String = ""
    var __testMainDataUri: _root_.scala.Predef.String = ""
    var __valMainDataUri: _root_.scala.Predef.String = ""
    val __trainNodeTypeToRandomNegativeDataUri: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, _root_.scala.Predef.String), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, _root_.scala.Predef.String]
    val __valNodeTypeToRandomNegativeDataUri: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, _root_.scala.Predef.String), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, _root_.scala.Predef.String]
    val __testNodeTypeToRandomNegativeDataUri: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, _root_.scala.Predef.String), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, _root_.scala.Predef.String]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __trainMainDataUri = _input__.readStringRequireUtf8()
        case 18 =>
          __testMainDataUri = _input__.readStringRequireUtf8()
        case 26 =>
          __valMainDataUri = _input__.readStringRequireUtf8()
        case 34 =>
          __trainNodeTypeToRandomNegativeDataUri += snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset._typemapper_trainNodeTypeToRandomNegativeDataUri.toCustom(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.TrainNodeTypeToRandomNegativeDataUriEntry](_input__))
        case 42 =>
          __valNodeTypeToRandomNegativeDataUri += snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset._typemapper_valNodeTypeToRandomNegativeDataUri.toCustom(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.ValNodeTypeToRandomNegativeDataUriEntry](_input__))
        case 50 =>
          __testNodeTypeToRandomNegativeDataUri += snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset._typemapper_testNodeTypeToRandomNegativeDataUri.toCustom(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.TestNodeTypeToRandomNegativeDataUriEntry](_input__))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset(
        trainMainDataUri = __trainMainDataUri,
        testMainDataUri = __testMainDataUri,
        valMainDataUri = __valMainDataUri,
        trainNodeTypeToRandomNegativeDataUri = __trainNodeTypeToRandomNegativeDataUri.result(),
        valNodeTypeToRandomNegativeDataUri = __valNodeTypeToRandomNegativeDataUri.result(),
        testNodeTypeToRandomNegativeDataUri = __testNodeTypeToRandomNegativeDataUri.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset(
        trainMainDataUri = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        testMainDataUri = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        valMainDataUri = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        trainNodeTypeToRandomNegativeDataUri = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.TrainNodeTypeToRandomNegativeDataUriEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset._typemapper_trainNodeTypeToRandomNegativeDataUri.toCustom(_)).toMap,
        valNodeTypeToRandomNegativeDataUri = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Seq[snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.ValNodeTypeToRandomNegativeDataUriEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset._typemapper_valNodeTypeToRandomNegativeDataUri.toCustom(_)).toMap,
        testNodeTypeToRandomNegativeDataUri = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Seq[snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.TestNodeTypeToRandomNegativeDataUriEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset._typemapper_testNodeTypeToRandomNegativeDataUri.toCustom(_)).toMap
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = DatasetMetadataProto.javaDescriptor.getMessageTypes().get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = DatasetMetadataProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 4 => __out = snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.TrainNodeTypeToRandomNegativeDataUriEntry
      case 5 => __out = snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.ValNodeTypeToRandomNegativeDataUriEntry
      case 6 => __out = snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.TestNodeTypeToRandomNegativeDataUriEntry
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.TrainNodeTypeToRandomNegativeDataUriEntry,
      _root_.snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.ValNodeTypeToRandomNegativeDataUriEntry,
      _root_.snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.TestNodeTypeToRandomNegativeDataUriEntry
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset(
    trainMainDataUri = "",
    testMainDataUri = "",
    valMainDataUri = "",
    trainNodeTypeToRandomNegativeDataUri = _root_.scala.collection.immutable.Map.empty,
    valNodeTypeToRandomNegativeDataUri = _root_.scala.collection.immutable.Map.empty,
    testNodeTypeToRandomNegativeDataUri = _root_.scala.collection.immutable.Map.empty
  )
  @SerialVersionUID(0L)
  final case class TrainNodeTypeToRandomNegativeDataUriEntry(
      key: _root_.scala.Predef.String = "",
      value: _root_.scala.Predef.String = "",
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[TrainNodeTypeToRandomNegativeDataUriEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        
        {
          val __value = value
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        {
          val __v = value
          if (!__v.isEmpty) {
            _output__.writeString(2, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Predef.String): TrainNodeTypeToRandomNegativeDataUriEntry = copy(key = __v)
      def withValue(__v: _root_.scala.Predef.String): TrainNodeTypeToRandomNegativeDataUriEntry = copy(value = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => {
            val __t = value
            if (__t != "") __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => _root_.scalapb.descriptors.PString(value)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.TrainNodeTypeToRandomNegativeDataUriEntry.type = snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.TrainNodeTypeToRandomNegativeDataUriEntry
      // @@protoc_insertion_point(GeneratedMessage[snapchat.research.gbml.NodeAnchorBasedLinkPredictionDataset.TrainNodeTypeToRandomNegativeDataUriEntry])
  }
  
  object TrainNodeTypeToRandomNegativeDataUriEntry extends scalapb.GeneratedMessageCompanion[snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.TrainNodeTypeToRandomNegativeDataUriEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.TrainNodeTypeToRandomNegativeDataUriEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.TrainNodeTypeToRandomNegativeDataUriEntry = {
      var __key: _root_.scala.Predef.String = ""
      var __value: _root_.scala.Predef.String = ""
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = _input__.readStringRequireUtf8()
          case 18 =>
            __value = _input__.readStringRequireUtf8()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.TrainNodeTypeToRandomNegativeDataUriEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.TrainNodeTypeToRandomNegativeDataUriEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.TrainNodeTypeToRandomNegativeDataUriEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.TrainNodeTypeToRandomNegativeDataUriEntry(
      key = "",
      value = ""
    )
    implicit class TrainNodeTypeToRandomNegativeDataUriEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.TrainNodeTypeToRandomNegativeDataUriEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.TrainNodeTypeToRandomNegativeDataUriEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.TrainNodeTypeToRandomNegativeDataUriEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)] =
      _root_.scalapb.TypeMapper[snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.TrainNodeTypeToRandomNegativeDataUriEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)](__m => (__m.key, __m.value))(__p => snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.TrainNodeTypeToRandomNegativeDataUriEntry(__p._1, __p._2))
    def of(
      key: _root_.scala.Predef.String,
      value: _root_.scala.Predef.String
    ): _root_.snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.TrainNodeTypeToRandomNegativeDataUriEntry = _root_.snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.TrainNodeTypeToRandomNegativeDataUriEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[snapchat.research.gbml.NodeAnchorBasedLinkPredictionDataset.TrainNodeTypeToRandomNegativeDataUriEntry])
  }
  
  @SerialVersionUID(0L)
  final case class ValNodeTypeToRandomNegativeDataUriEntry(
      key: _root_.scala.Predef.String = "",
      value: _root_.scala.Predef.String = "",
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ValNodeTypeToRandomNegativeDataUriEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        
        {
          val __value = value
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        {
          val __v = value
          if (!__v.isEmpty) {
            _output__.writeString(2, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Predef.String): ValNodeTypeToRandomNegativeDataUriEntry = copy(key = __v)
      def withValue(__v: _root_.scala.Predef.String): ValNodeTypeToRandomNegativeDataUriEntry = copy(value = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => {
            val __t = value
            if (__t != "") __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => _root_.scalapb.descriptors.PString(value)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.ValNodeTypeToRandomNegativeDataUriEntry.type = snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.ValNodeTypeToRandomNegativeDataUriEntry
      // @@protoc_insertion_point(GeneratedMessage[snapchat.research.gbml.NodeAnchorBasedLinkPredictionDataset.ValNodeTypeToRandomNegativeDataUriEntry])
  }
  
  object ValNodeTypeToRandomNegativeDataUriEntry extends scalapb.GeneratedMessageCompanion[snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.ValNodeTypeToRandomNegativeDataUriEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.ValNodeTypeToRandomNegativeDataUriEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.ValNodeTypeToRandomNegativeDataUriEntry = {
      var __key: _root_.scala.Predef.String = ""
      var __value: _root_.scala.Predef.String = ""
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = _input__.readStringRequireUtf8()
          case 18 =>
            __value = _input__.readStringRequireUtf8()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.ValNodeTypeToRandomNegativeDataUriEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.ValNodeTypeToRandomNegativeDataUriEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.ValNodeTypeToRandomNegativeDataUriEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.javaDescriptor.getNestedTypes().get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.ValNodeTypeToRandomNegativeDataUriEntry(
      key = "",
      value = ""
    )
    implicit class ValNodeTypeToRandomNegativeDataUriEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.ValNodeTypeToRandomNegativeDataUriEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.ValNodeTypeToRandomNegativeDataUriEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.ValNodeTypeToRandomNegativeDataUriEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)] =
      _root_.scalapb.TypeMapper[snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.ValNodeTypeToRandomNegativeDataUriEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)](__m => (__m.key, __m.value))(__p => snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.ValNodeTypeToRandomNegativeDataUriEntry(__p._1, __p._2))
    def of(
      key: _root_.scala.Predef.String,
      value: _root_.scala.Predef.String
    ): _root_.snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.ValNodeTypeToRandomNegativeDataUriEntry = _root_.snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.ValNodeTypeToRandomNegativeDataUriEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[snapchat.research.gbml.NodeAnchorBasedLinkPredictionDataset.ValNodeTypeToRandomNegativeDataUriEntry])
  }
  
  @SerialVersionUID(0L)
  final case class TestNodeTypeToRandomNegativeDataUriEntry(
      key: _root_.scala.Predef.String = "",
      value: _root_.scala.Predef.String = "",
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[TestNodeTypeToRandomNegativeDataUriEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        
        {
          val __value = value
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        {
          val __v = value
          if (!__v.isEmpty) {
            _output__.writeString(2, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Predef.String): TestNodeTypeToRandomNegativeDataUriEntry = copy(key = __v)
      def withValue(__v: _root_.scala.Predef.String): TestNodeTypeToRandomNegativeDataUriEntry = copy(value = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => {
            val __t = value
            if (__t != "") __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => _root_.scalapb.descriptors.PString(value)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.TestNodeTypeToRandomNegativeDataUriEntry.type = snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.TestNodeTypeToRandomNegativeDataUriEntry
      // @@protoc_insertion_point(GeneratedMessage[snapchat.research.gbml.NodeAnchorBasedLinkPredictionDataset.TestNodeTypeToRandomNegativeDataUriEntry])
  }
  
  object TestNodeTypeToRandomNegativeDataUriEntry extends scalapb.GeneratedMessageCompanion[snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.TestNodeTypeToRandomNegativeDataUriEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.TestNodeTypeToRandomNegativeDataUriEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.TestNodeTypeToRandomNegativeDataUriEntry = {
      var __key: _root_.scala.Predef.String = ""
      var __value: _root_.scala.Predef.String = ""
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = _input__.readStringRequireUtf8()
          case 18 =>
            __value = _input__.readStringRequireUtf8()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.TestNodeTypeToRandomNegativeDataUriEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.TestNodeTypeToRandomNegativeDataUriEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.TestNodeTypeToRandomNegativeDataUriEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.javaDescriptor.getNestedTypes().get(2)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.scalaDescriptor.nestedMessages(2)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.TestNodeTypeToRandomNegativeDataUriEntry(
      key = "",
      value = ""
    )
    implicit class TestNodeTypeToRandomNegativeDataUriEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.TestNodeTypeToRandomNegativeDataUriEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.TestNodeTypeToRandomNegativeDataUriEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.TestNodeTypeToRandomNegativeDataUriEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)] =
      _root_.scalapb.TypeMapper[snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.TestNodeTypeToRandomNegativeDataUriEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)](__m => (__m.key, __m.value))(__p => snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.TestNodeTypeToRandomNegativeDataUriEntry(__p._1, __p._2))
    def of(
      key: _root_.scala.Predef.String,
      value: _root_.scala.Predef.String
    ): _root_.snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.TestNodeTypeToRandomNegativeDataUriEntry = _root_.snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.TestNodeTypeToRandomNegativeDataUriEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[snapchat.research.gbml.NodeAnchorBasedLinkPredictionDataset.TestNodeTypeToRandomNegativeDataUriEntry])
  }
  
  implicit class NodeAnchorBasedLinkPredictionDatasetLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset](_l) {
    def trainMainDataUri: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.trainMainDataUri)((c_, f_) => c_.copy(trainMainDataUri = f_))
    def testMainDataUri: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.testMainDataUri)((c_, f_) => c_.copy(testMainDataUri = f_))
    def valMainDataUri: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.valMainDataUri)((c_, f_) => c_.copy(valMainDataUri = f_))
    def trainNodeTypeToRandomNegativeDataUri: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]] = field(_.trainNodeTypeToRandomNegativeDataUri)((c_, f_) => c_.copy(trainNodeTypeToRandomNegativeDataUri = f_))
    def valNodeTypeToRandomNegativeDataUri: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]] = field(_.valNodeTypeToRandomNegativeDataUri)((c_, f_) => c_.copy(valNodeTypeToRandomNegativeDataUri = f_))
    def testNodeTypeToRandomNegativeDataUri: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]] = field(_.testNodeTypeToRandomNegativeDataUri)((c_, f_) => c_.copy(testNodeTypeToRandomNegativeDataUri = f_))
  }
  final val TRAIN_MAIN_DATA_URI_FIELD_NUMBER = 1
  final val TEST_MAIN_DATA_URI_FIELD_NUMBER = 2
  final val VAL_MAIN_DATA_URI_FIELD_NUMBER = 3
  final val TRAIN_NODE_TYPE_TO_RANDOM_NEGATIVE_DATA_URI_FIELD_NUMBER = 4
  final val VAL_NODE_TYPE_TO_RANDOM_NEGATIVE_DATA_URI_FIELD_NUMBER = 5
  final val TEST_NODE_TYPE_TO_RANDOM_NEGATIVE_DATA_URI_FIELD_NUMBER = 6
  @transient
  private[dataset_metadata] val _typemapper_trainNodeTypeToRandomNegativeDataUri: _root_.scalapb.TypeMapper[snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.TrainNodeTypeToRandomNegativeDataUriEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)] = implicitly[_root_.scalapb.TypeMapper[snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.TrainNodeTypeToRandomNegativeDataUriEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)]]
  @transient
  private[dataset_metadata] val _typemapper_valNodeTypeToRandomNegativeDataUri: _root_.scalapb.TypeMapper[snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.ValNodeTypeToRandomNegativeDataUriEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)] = implicitly[_root_.scalapb.TypeMapper[snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.ValNodeTypeToRandomNegativeDataUriEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)]]
  @transient
  private[dataset_metadata] val _typemapper_testNodeTypeToRandomNegativeDataUri: _root_.scalapb.TypeMapper[snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.TestNodeTypeToRandomNegativeDataUriEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)] = implicitly[_root_.scalapb.TypeMapper[snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset.TestNodeTypeToRandomNegativeDataUriEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)]]
  def of(
    trainMainDataUri: _root_.scala.Predef.String,
    testMainDataUri: _root_.scala.Predef.String,
    valMainDataUri: _root_.scala.Predef.String,
    trainNodeTypeToRandomNegativeDataUri: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String],
    valNodeTypeToRandomNegativeDataUri: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String],
    testNodeTypeToRandomNegativeDataUri: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]
  ): _root_.snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset = _root_.snapchat.research.gbml.dataset_metadata.NodeAnchorBasedLinkPredictionDataset(
    trainMainDataUri,
    testMainDataUri,
    valMainDataUri,
    trainNodeTypeToRandomNegativeDataUri,
    valNodeTypeToRandomNegativeDataUri,
    testNodeTypeToRandomNegativeDataUri
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[snapchat.research.gbml.NodeAnchorBasedLinkPredictionDataset])
}
