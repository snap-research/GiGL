// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package snapchat.research.gbml.subgraph_sampling_strategy

sealed abstract class SamplingDirection(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
  type EnumType = snapchat.research.gbml.subgraph_sampling_strategy.SamplingDirection
  type RecognizedType = snapchat.research.gbml.subgraph_sampling_strategy.SamplingDirection.Recognized
  def isIncoming: _root_.scala.Boolean = false
  def isOutgoing: _root_.scala.Boolean = false
  def companion: _root_.scalapb.GeneratedEnumCompanion[SamplingDirection] = snapchat.research.gbml.subgraph_sampling_strategy.SamplingDirection
  final def asRecognized: _root_.scala.Option[snapchat.research.gbml.subgraph_sampling_strategy.SamplingDirection.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[snapchat.research.gbml.subgraph_sampling_strategy.SamplingDirection.Recognized])
}

object SamplingDirection extends _root_.scalapb.GeneratedEnumCompanion[SamplingDirection] {
  sealed trait Recognized extends SamplingDirection
  implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[SamplingDirection] = this
  
  /** Sample incoming edges to the dst nodes (default)
    */
  @SerialVersionUID(0L)
  case object INCOMING extends SamplingDirection(0) with SamplingDirection.Recognized {
    val index = 0
    val name = "INCOMING"
    override def isIncoming: _root_.scala.Boolean = true
  }
  
  /** Sample outgoing edges from the src nodes
    */
  @SerialVersionUID(0L)
  case object OUTGOING extends SamplingDirection(1) with SamplingDirection.Recognized {
    val index = 1
    val name = "OUTGOING"
    override def isOutgoing: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends SamplingDirection(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
  lazy val values: scala.collection.immutable.Seq[ValueType] = scala.collection.immutable.Seq(INCOMING, OUTGOING)
  def fromValue(__value: _root_.scala.Int): SamplingDirection = __value match {
    case 0 => INCOMING
    case 1 => OUTGOING
    case __other => Unrecognized(__other)
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = SubgraphSamplingStrategyProto.javaDescriptor.getEnumTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = SubgraphSamplingStrategyProto.scalaDescriptor.enums(0)
}