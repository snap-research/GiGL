// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package snapchat.research.gbml.flattened_graph_metadata

/** Stores flattened graph metadata output by SubgraphSampler
  */
@SerialVersionUID(0L)
final case class FlattenedGraphMetadata(
    outputMetadata: snapchat.research.gbml.flattened_graph_metadata.FlattenedGraphMetadata.OutputMetadata = snapchat.research.gbml.flattened_graph_metadata.FlattenedGraphMetadata.OutputMetadata.Empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[FlattenedGraphMetadata] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (outputMetadata.supervisedNodeClassificationOutput.isDefined) {
        val __value = outputMetadata.supervisedNodeClassificationOutput.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (outputMetadata.nodeAnchorBasedLinkPredictionOutput.isDefined) {
        val __value = outputMetadata.nodeAnchorBasedLinkPredictionOutput.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (outputMetadata.supervisedLinkBasedTaskOutput.isDefined) {
        val __value = outputMetadata.supervisedLinkBasedTaskOutput.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      outputMetadata.supervisedNodeClassificationOutput.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      outputMetadata.nodeAnchorBasedLinkPredictionOutput.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      outputMetadata.supervisedLinkBasedTaskOutput.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getSupervisedNodeClassificationOutput: snapchat.research.gbml.flattened_graph_metadata.SupervisedNodeClassificationOutput = outputMetadata.supervisedNodeClassificationOutput.getOrElse(snapchat.research.gbml.flattened_graph_metadata.SupervisedNodeClassificationOutput.defaultInstance)
    def withSupervisedNodeClassificationOutput(__v: snapchat.research.gbml.flattened_graph_metadata.SupervisedNodeClassificationOutput): FlattenedGraphMetadata = copy(outputMetadata = snapchat.research.gbml.flattened_graph_metadata.FlattenedGraphMetadata.OutputMetadata.SupervisedNodeClassificationOutput(__v))
    def getNodeAnchorBasedLinkPredictionOutput: snapchat.research.gbml.flattened_graph_metadata.NodeAnchorBasedLinkPredictionOutput = outputMetadata.nodeAnchorBasedLinkPredictionOutput.getOrElse(snapchat.research.gbml.flattened_graph_metadata.NodeAnchorBasedLinkPredictionOutput.defaultInstance)
    def withNodeAnchorBasedLinkPredictionOutput(__v: snapchat.research.gbml.flattened_graph_metadata.NodeAnchorBasedLinkPredictionOutput): FlattenedGraphMetadata = copy(outputMetadata = snapchat.research.gbml.flattened_graph_metadata.FlattenedGraphMetadata.OutputMetadata.NodeAnchorBasedLinkPredictionOutput(__v))
    def getSupervisedLinkBasedTaskOutput: snapchat.research.gbml.flattened_graph_metadata.SupervisedLinkBasedTaskOutput = outputMetadata.supervisedLinkBasedTaskOutput.getOrElse(snapchat.research.gbml.flattened_graph_metadata.SupervisedLinkBasedTaskOutput.defaultInstance)
    def withSupervisedLinkBasedTaskOutput(__v: snapchat.research.gbml.flattened_graph_metadata.SupervisedLinkBasedTaskOutput): FlattenedGraphMetadata = copy(outputMetadata = snapchat.research.gbml.flattened_graph_metadata.FlattenedGraphMetadata.OutputMetadata.SupervisedLinkBasedTaskOutput(__v))
    def clearOutputMetadata: FlattenedGraphMetadata = copy(outputMetadata = snapchat.research.gbml.flattened_graph_metadata.FlattenedGraphMetadata.OutputMetadata.Empty)
    def withOutputMetadata(__v: snapchat.research.gbml.flattened_graph_metadata.FlattenedGraphMetadata.OutputMetadata): FlattenedGraphMetadata = copy(outputMetadata = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => outputMetadata.supervisedNodeClassificationOutput.orNull
        case 2 => outputMetadata.nodeAnchorBasedLinkPredictionOutput.orNull
        case 3 => outputMetadata.supervisedLinkBasedTaskOutput.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => outputMetadata.supervisedNodeClassificationOutput.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => outputMetadata.nodeAnchorBasedLinkPredictionOutput.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => outputMetadata.supervisedLinkBasedTaskOutput.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: snapchat.research.gbml.flattened_graph_metadata.FlattenedGraphMetadata.type = snapchat.research.gbml.flattened_graph_metadata.FlattenedGraphMetadata
    // @@protoc_insertion_point(GeneratedMessage[snapchat.research.gbml.FlattenedGraphMetadata])
}

object FlattenedGraphMetadata extends scalapb.GeneratedMessageCompanion[snapchat.research.gbml.flattened_graph_metadata.FlattenedGraphMetadata] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[snapchat.research.gbml.flattened_graph_metadata.FlattenedGraphMetadata] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): snapchat.research.gbml.flattened_graph_metadata.FlattenedGraphMetadata = {
    var __outputMetadata: snapchat.research.gbml.flattened_graph_metadata.FlattenedGraphMetadata.OutputMetadata = snapchat.research.gbml.flattened_graph_metadata.FlattenedGraphMetadata.OutputMetadata.Empty
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __outputMetadata = snapchat.research.gbml.flattened_graph_metadata.FlattenedGraphMetadata.OutputMetadata.SupervisedNodeClassificationOutput(__outputMetadata.supervisedNodeClassificationOutput.fold(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.flattened_graph_metadata.SupervisedNodeClassificationOutput](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __outputMetadata = snapchat.research.gbml.flattened_graph_metadata.FlattenedGraphMetadata.OutputMetadata.NodeAnchorBasedLinkPredictionOutput(__outputMetadata.nodeAnchorBasedLinkPredictionOutput.fold(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.flattened_graph_metadata.NodeAnchorBasedLinkPredictionOutput](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __outputMetadata = snapchat.research.gbml.flattened_graph_metadata.FlattenedGraphMetadata.OutputMetadata.SupervisedLinkBasedTaskOutput(__outputMetadata.supervisedLinkBasedTaskOutput.fold(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.flattened_graph_metadata.SupervisedLinkBasedTaskOutput](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    snapchat.research.gbml.flattened_graph_metadata.FlattenedGraphMetadata(
        outputMetadata = __outputMetadata,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[snapchat.research.gbml.flattened_graph_metadata.FlattenedGraphMetadata] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      snapchat.research.gbml.flattened_graph_metadata.FlattenedGraphMetadata(
        outputMetadata = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[snapchat.research.gbml.flattened_graph_metadata.SupervisedNodeClassificationOutput]]).map(snapchat.research.gbml.flattened_graph_metadata.FlattenedGraphMetadata.OutputMetadata.SupervisedNodeClassificationOutput(_))
            .orElse[snapchat.research.gbml.flattened_graph_metadata.FlattenedGraphMetadata.OutputMetadata](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[snapchat.research.gbml.flattened_graph_metadata.NodeAnchorBasedLinkPredictionOutput]]).map(snapchat.research.gbml.flattened_graph_metadata.FlattenedGraphMetadata.OutputMetadata.NodeAnchorBasedLinkPredictionOutput(_)))
            .orElse[snapchat.research.gbml.flattened_graph_metadata.FlattenedGraphMetadata.OutputMetadata](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[snapchat.research.gbml.flattened_graph_metadata.SupervisedLinkBasedTaskOutput]]).map(snapchat.research.gbml.flattened_graph_metadata.FlattenedGraphMetadata.OutputMetadata.SupervisedLinkBasedTaskOutput(_)))
            .getOrElse(snapchat.research.gbml.flattened_graph_metadata.FlattenedGraphMetadata.OutputMetadata.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = FlattenedGraphMetadataProto.javaDescriptor.getMessageTypes().get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = FlattenedGraphMetadataProto.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = snapchat.research.gbml.flattened_graph_metadata.SupervisedNodeClassificationOutput
      case 2 => __out = snapchat.research.gbml.flattened_graph_metadata.NodeAnchorBasedLinkPredictionOutput
      case 3 => __out = snapchat.research.gbml.flattened_graph_metadata.SupervisedLinkBasedTaskOutput
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = snapchat.research.gbml.flattened_graph_metadata.FlattenedGraphMetadata(
    outputMetadata = snapchat.research.gbml.flattened_graph_metadata.FlattenedGraphMetadata.OutputMetadata.Empty
  )
  sealed trait OutputMetadata extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isSupervisedNodeClassificationOutput: _root_.scala.Boolean = false
    def isNodeAnchorBasedLinkPredictionOutput: _root_.scala.Boolean = false
    def isSupervisedLinkBasedTaskOutput: _root_.scala.Boolean = false
    def supervisedNodeClassificationOutput: _root_.scala.Option[snapchat.research.gbml.flattened_graph_metadata.SupervisedNodeClassificationOutput] = _root_.scala.None
    def nodeAnchorBasedLinkPredictionOutput: _root_.scala.Option[snapchat.research.gbml.flattened_graph_metadata.NodeAnchorBasedLinkPredictionOutput] = _root_.scala.None
    def supervisedLinkBasedTaskOutput: _root_.scala.Option[snapchat.research.gbml.flattened_graph_metadata.SupervisedLinkBasedTaskOutput] = _root_.scala.None
  }
  object OutputMetadata {
    @SerialVersionUID(0L)
    case object Empty extends snapchat.research.gbml.flattened_graph_metadata.FlattenedGraphMetadata.OutputMetadata {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class SupervisedNodeClassificationOutput(value: snapchat.research.gbml.flattened_graph_metadata.SupervisedNodeClassificationOutput) extends snapchat.research.gbml.flattened_graph_metadata.FlattenedGraphMetadata.OutputMetadata {
      type ValueType = snapchat.research.gbml.flattened_graph_metadata.SupervisedNodeClassificationOutput
      override def isSupervisedNodeClassificationOutput: _root_.scala.Boolean = true
      override def supervisedNodeClassificationOutput: _root_.scala.Option[snapchat.research.gbml.flattened_graph_metadata.SupervisedNodeClassificationOutput] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class NodeAnchorBasedLinkPredictionOutput(value: snapchat.research.gbml.flattened_graph_metadata.NodeAnchorBasedLinkPredictionOutput) extends snapchat.research.gbml.flattened_graph_metadata.FlattenedGraphMetadata.OutputMetadata {
      type ValueType = snapchat.research.gbml.flattened_graph_metadata.NodeAnchorBasedLinkPredictionOutput
      override def isNodeAnchorBasedLinkPredictionOutput: _root_.scala.Boolean = true
      override def nodeAnchorBasedLinkPredictionOutput: _root_.scala.Option[snapchat.research.gbml.flattened_graph_metadata.NodeAnchorBasedLinkPredictionOutput] = Some(value)
      override def number: _root_.scala.Int = 2
    }
    @SerialVersionUID(0L)
    final case class SupervisedLinkBasedTaskOutput(value: snapchat.research.gbml.flattened_graph_metadata.SupervisedLinkBasedTaskOutput) extends snapchat.research.gbml.flattened_graph_metadata.FlattenedGraphMetadata.OutputMetadata {
      type ValueType = snapchat.research.gbml.flattened_graph_metadata.SupervisedLinkBasedTaskOutput
      override def isSupervisedLinkBasedTaskOutput: _root_.scala.Boolean = true
      override def supervisedLinkBasedTaskOutput: _root_.scala.Option[snapchat.research.gbml.flattened_graph_metadata.SupervisedLinkBasedTaskOutput] = Some(value)
      override def number: _root_.scala.Int = 3
    }
  }
  implicit class FlattenedGraphMetadataLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.flattened_graph_metadata.FlattenedGraphMetadata]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, snapchat.research.gbml.flattened_graph_metadata.FlattenedGraphMetadata](_l) {
    def supervisedNodeClassificationOutput: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.flattened_graph_metadata.SupervisedNodeClassificationOutput] = field(_.getSupervisedNodeClassificationOutput)((c_, f_) => c_.copy(outputMetadata = snapchat.research.gbml.flattened_graph_metadata.FlattenedGraphMetadata.OutputMetadata.SupervisedNodeClassificationOutput(f_)))
    def nodeAnchorBasedLinkPredictionOutput: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.flattened_graph_metadata.NodeAnchorBasedLinkPredictionOutput] = field(_.getNodeAnchorBasedLinkPredictionOutput)((c_, f_) => c_.copy(outputMetadata = snapchat.research.gbml.flattened_graph_metadata.FlattenedGraphMetadata.OutputMetadata.NodeAnchorBasedLinkPredictionOutput(f_)))
    def supervisedLinkBasedTaskOutput: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.flattened_graph_metadata.SupervisedLinkBasedTaskOutput] = field(_.getSupervisedLinkBasedTaskOutput)((c_, f_) => c_.copy(outputMetadata = snapchat.research.gbml.flattened_graph_metadata.FlattenedGraphMetadata.OutputMetadata.SupervisedLinkBasedTaskOutput(f_)))
    def outputMetadata: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.flattened_graph_metadata.FlattenedGraphMetadata.OutputMetadata] = field(_.outputMetadata)((c_, f_) => c_.copy(outputMetadata = f_))
  }
  final val SUPERVISED_NODE_CLASSIFICATION_OUTPUT_FIELD_NUMBER = 1
  final val NODE_ANCHOR_BASED_LINK_PREDICTION_OUTPUT_FIELD_NUMBER = 2
  final val SUPERVISED_LINK_BASED_TASK_OUTPUT_FIELD_NUMBER = 3
  def of(
    outputMetadata: snapchat.research.gbml.flattened_graph_metadata.FlattenedGraphMetadata.OutputMetadata
  ): _root_.snapchat.research.gbml.flattened_graph_metadata.FlattenedGraphMetadata = _root_.snapchat.research.gbml.flattened_graph_metadata.FlattenedGraphMetadata(
    outputMetadata
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[snapchat.research.gbml.FlattenedGraphMetadata])
}
