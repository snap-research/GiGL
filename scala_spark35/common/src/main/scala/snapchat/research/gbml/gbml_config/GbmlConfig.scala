// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package snapchat.research.gbml.gbml_config

@SerialVersionUID(0L)
final case class GbmlConfig(
    taskMetadata: _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata] = _root_.scala.None,
    graphMetadata: _root_.scala.Option[snapchat.research.gbml.graph_schema.GraphMetadata] = _root_.scala.None,
    sharedConfig: _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig] = _root_.scala.None,
    datasetConfig: _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig] = _root_.scala.None,
    trainerConfig: _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig] = _root_.scala.None,
    inferencerConfig: _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig] = _root_.scala.None,
    postProcessorConfig: _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig] = _root_.scala.None,
    metricsConfig: _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig] = _root_.scala.None,
    profilerConfig: _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig] = _root_.scala.None,
    featureFlags: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String] = _root_.scala.collection.immutable.Map.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[GbmlConfig] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (taskMetadata.isDefined) {
        val __value = taskMetadata.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (graphMetadata.isDefined) {
        val __value = graphMetadata.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (sharedConfig.isDefined) {
        val __value = sharedConfig.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (datasetConfig.isDefined) {
        val __value = datasetConfig.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (trainerConfig.isDefined) {
        val __value = trainerConfig.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (inferencerConfig.isDefined) {
        val __value = inferencerConfig.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (postProcessorConfig.isDefined) {
        val __value = postProcessorConfig.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (metricsConfig.isDefined) {
        val __value = metricsConfig.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (profilerConfig.isDefined) {
        val __value = profilerConfig.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      featureFlags.foreach { __item =>
        val __value = snapchat.research.gbml.gbml_config.GbmlConfig._typemapper_featureFlags.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      taskMetadata.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      graphMetadata.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      sharedConfig.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      datasetConfig.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      trainerConfig.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      inferencerConfig.foreach { __v =>
        val __m = __v
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      metricsConfig.foreach { __v =>
        val __m = __v
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      profilerConfig.foreach { __v =>
        val __m = __v
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      postProcessorConfig.foreach { __v =>
        val __m = __v
        _output__.writeTag(9, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      featureFlags.foreach { __v =>
        val __m = snapchat.research.gbml.gbml_config.GbmlConfig._typemapper_featureFlags.toBase(__v)
        _output__.writeTag(10, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getTaskMetadata: snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata = taskMetadata.getOrElse(snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.defaultInstance)
    def clearTaskMetadata: GbmlConfig = copy(taskMetadata = _root_.scala.None)
    def withTaskMetadata(__v: snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata): GbmlConfig = copy(taskMetadata = Option(__v))
    def getGraphMetadata: snapchat.research.gbml.graph_schema.GraphMetadata = graphMetadata.getOrElse(snapchat.research.gbml.graph_schema.GraphMetadata.defaultInstance)
    def clearGraphMetadata: GbmlConfig = copy(graphMetadata = _root_.scala.None)
    def withGraphMetadata(__v: snapchat.research.gbml.graph_schema.GraphMetadata): GbmlConfig = copy(graphMetadata = Option(__v))
    def getSharedConfig: snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig = sharedConfig.getOrElse(snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig.defaultInstance)
    def clearSharedConfig: GbmlConfig = copy(sharedConfig = _root_.scala.None)
    def withSharedConfig(__v: snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig): GbmlConfig = copy(sharedConfig = Option(__v))
    def getDatasetConfig: snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig = datasetConfig.getOrElse(snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.defaultInstance)
    def clearDatasetConfig: GbmlConfig = copy(datasetConfig = _root_.scala.None)
    def withDatasetConfig(__v: snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig): GbmlConfig = copy(datasetConfig = Option(__v))
    def getTrainerConfig: snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig = trainerConfig.getOrElse(snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig.defaultInstance)
    def clearTrainerConfig: GbmlConfig = copy(trainerConfig = _root_.scala.None)
    def withTrainerConfig(__v: snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig): GbmlConfig = copy(trainerConfig = Option(__v))
    def getInferencerConfig: snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig = inferencerConfig.getOrElse(snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig.defaultInstance)
    def clearInferencerConfig: GbmlConfig = copy(inferencerConfig = _root_.scala.None)
    def withInferencerConfig(__v: snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig): GbmlConfig = copy(inferencerConfig = Option(__v))
    def getPostProcessorConfig: snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig = postProcessorConfig.getOrElse(snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig.defaultInstance)
    def clearPostProcessorConfig: GbmlConfig = copy(postProcessorConfig = _root_.scala.None)
    def withPostProcessorConfig(__v: snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig): GbmlConfig = copy(postProcessorConfig = Option(__v))
    def getMetricsConfig: snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig = metricsConfig.getOrElse(snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig.defaultInstance)
    def clearMetricsConfig: GbmlConfig = copy(metricsConfig = _root_.scala.None)
    def withMetricsConfig(__v: snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig): GbmlConfig = copy(metricsConfig = Option(__v))
    def getProfilerConfig: snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig = profilerConfig.getOrElse(snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig.defaultInstance)
    def clearProfilerConfig: GbmlConfig = copy(profilerConfig = _root_.scala.None)
    def withProfilerConfig(__v: snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig): GbmlConfig = copy(profilerConfig = Option(__v))
    def clearFeatureFlags = copy(featureFlags = _root_.scala.collection.immutable.Map.empty)
    def addFeatureFlags(__vs: (_root_.scala.Predef.String, _root_.scala.Predef.String) *): GbmlConfig = addAllFeatureFlags(__vs)
    def addAllFeatureFlags(__vs: Iterable[(_root_.scala.Predef.String, _root_.scala.Predef.String)]): GbmlConfig = copy(featureFlags = featureFlags ++ __vs)
    def withFeatureFlags(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]): GbmlConfig = copy(featureFlags = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => taskMetadata.orNull
        case 2 => graphMetadata.orNull
        case 3 => sharedConfig.orNull
        case 4 => datasetConfig.orNull
        case 5 => trainerConfig.orNull
        case 6 => inferencerConfig.orNull
        case 9 => postProcessorConfig.orNull
        case 7 => metricsConfig.orNull
        case 8 => profilerConfig.orNull
        case 10 => featureFlags.iterator.map(snapchat.research.gbml.gbml_config.GbmlConfig._typemapper_featureFlags.toBase(_)).toSeq
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => taskMetadata.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => graphMetadata.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => sharedConfig.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => datasetConfig.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => trainerConfig.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => inferencerConfig.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => postProcessorConfig.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => metricsConfig.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => profilerConfig.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => _root_.scalapb.descriptors.PRepeated(featureFlags.iterator.map(snapchat.research.gbml.gbml_config.GbmlConfig._typemapper_featureFlags.toBase(_).toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: snapchat.research.gbml.gbml_config.GbmlConfig.type = snapchat.research.gbml.gbml_config.GbmlConfig
    // @@protoc_insertion_point(GeneratedMessage[snapchat.research.gbml.GbmlConfig])
}

object GbmlConfig extends scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): snapchat.research.gbml.gbml_config.GbmlConfig = {
    var __taskMetadata: _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata] = _root_.scala.None
    var __graphMetadata: _root_.scala.Option[snapchat.research.gbml.graph_schema.GraphMetadata] = _root_.scala.None
    var __sharedConfig: _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig] = _root_.scala.None
    var __datasetConfig: _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig] = _root_.scala.None
    var __trainerConfig: _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig] = _root_.scala.None
    var __inferencerConfig: _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig] = _root_.scala.None
    var __postProcessorConfig: _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig] = _root_.scala.None
    var __metricsConfig: _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig] = _root_.scala.None
    var __profilerConfig: _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig] = _root_.scala.None
    val __featureFlags: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, _root_.scala.Predef.String), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, _root_.scala.Predef.String]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __taskMetadata = Option(__taskMetadata.fold(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __graphMetadata = Option(__graphMetadata.fold(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.graph_schema.GraphMetadata](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __sharedConfig = Option(__sharedConfig.fold(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 34 =>
          __datasetConfig = Option(__datasetConfig.fold(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 42 =>
          __trainerConfig = Option(__trainerConfig.fold(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 50 =>
          __inferencerConfig = Option(__inferencerConfig.fold(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 74 =>
          __postProcessorConfig = Option(__postProcessorConfig.fold(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 58 =>
          __metricsConfig = Option(__metricsConfig.fold(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 66 =>
          __profilerConfig = Option(__profilerConfig.fold(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 82 =>
          __featureFlags += snapchat.research.gbml.gbml_config.GbmlConfig._typemapper_featureFlags.toCustom(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.gbml_config.GbmlConfig.FeatureFlagsEntry](_input__))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    snapchat.research.gbml.gbml_config.GbmlConfig(
        taskMetadata = __taskMetadata,
        graphMetadata = __graphMetadata,
        sharedConfig = __sharedConfig,
        datasetConfig = __datasetConfig,
        trainerConfig = __trainerConfig,
        inferencerConfig = __inferencerConfig,
        postProcessorConfig = __postProcessorConfig,
        metricsConfig = __metricsConfig,
        profilerConfig = __profilerConfig,
        featureFlags = __featureFlags.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[snapchat.research.gbml.gbml_config.GbmlConfig] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      snapchat.research.gbml.gbml_config.GbmlConfig(
        taskMetadata = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata]]),
        graphMetadata = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[snapchat.research.gbml.graph_schema.GraphMetadata]]),
        sharedConfig = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig]]),
        datasetConfig = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig]]),
        trainerConfig = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig]]),
        inferencerConfig = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig]]),
        postProcessorConfig = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[_root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig]]),
        metricsConfig = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig]]),
        profilerConfig = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[_root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig]]),
        featureFlags = __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).map(_.as[_root_.scala.Seq[snapchat.research.gbml.gbml_config.GbmlConfig.FeatureFlagsEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(snapchat.research.gbml.gbml_config.GbmlConfig._typemapper_featureFlags.toCustom(_)).toMap
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = GbmlConfigProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = GbmlConfigProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata
      case 2 => __out = snapchat.research.gbml.graph_schema.GraphMetadata
      case 3 => __out = snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig
      case 4 => __out = snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig
      case 5 => __out = snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig
      case 6 => __out = snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig
      case 9 => __out = snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig
      case 7 => __out = snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig
      case 8 => __out = snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig
      case 10 => __out = snapchat.research.gbml.gbml_config.GbmlConfig.FeatureFlagsEntry
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata,
      _root_.snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig,
      _root_.snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig,
      _root_.snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig,
      _root_.snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig,
      _root_.snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig,
      _root_.snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig,
      _root_.snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig,
      _root_.snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig,
      _root_.snapchat.research.gbml.gbml_config.GbmlConfig.FeatureFlagsEntry
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = snapchat.research.gbml.gbml_config.GbmlConfig(
    taskMetadata = _root_.scala.None,
    graphMetadata = _root_.scala.None,
    sharedConfig = _root_.scala.None,
    datasetConfig = _root_.scala.None,
    trainerConfig = _root_.scala.None,
    inferencerConfig = _root_.scala.None,
    postProcessorConfig = _root_.scala.None,
    metricsConfig = _root_.scala.None,
    profilerConfig = _root_.scala.None,
    featureFlags = _root_.scala.collection.immutable.Map.empty
  )
  /** Indicates the training task specification and metadata for the config.
    */
  @SerialVersionUID(0L)
  final case class TaskMetadata(
      taskMetadata: snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.TaskMetadata = snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.TaskMetadata.Empty,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[TaskMetadata] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        if (taskMetadata.nodeBasedTaskMetadata.isDefined) {
          val __value = taskMetadata.nodeBasedTaskMetadata.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (taskMetadata.nodeAnchorBasedLinkPredictionTaskMetadata.isDefined) {
          val __value = taskMetadata.nodeAnchorBasedLinkPredictionTaskMetadata.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (taskMetadata.linkBasedTaskMetadata.isDefined) {
          val __value = taskMetadata.linkBasedTaskMetadata.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        taskMetadata.nodeBasedTaskMetadata.foreach { __v =>
          val __m = __v
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        taskMetadata.nodeAnchorBasedLinkPredictionTaskMetadata.foreach { __v =>
          val __m = __v
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        taskMetadata.linkBasedTaskMetadata.foreach { __v =>
          val __m = __v
          _output__.writeTag(3, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def getNodeBasedTaskMetadata: snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.NodeBasedTaskMetadata = taskMetadata.nodeBasedTaskMetadata.getOrElse(snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.NodeBasedTaskMetadata.defaultInstance)
      def withNodeBasedTaskMetadata(__v: snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.NodeBasedTaskMetadata): TaskMetadata = copy(taskMetadata = snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.TaskMetadata.NodeBasedTaskMetadata(__v))
      def getNodeAnchorBasedLinkPredictionTaskMetadata: snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.NodeAnchorBasedLinkPredictionTaskMetadata = taskMetadata.nodeAnchorBasedLinkPredictionTaskMetadata.getOrElse(snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.NodeAnchorBasedLinkPredictionTaskMetadata.defaultInstance)
      def withNodeAnchorBasedLinkPredictionTaskMetadata(__v: snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.NodeAnchorBasedLinkPredictionTaskMetadata): TaskMetadata = copy(taskMetadata = snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.TaskMetadata.NodeAnchorBasedLinkPredictionTaskMetadata(__v))
      def getLinkBasedTaskMetadata: snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.LinkBasedTaskMetadata = taskMetadata.linkBasedTaskMetadata.getOrElse(snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.LinkBasedTaskMetadata.defaultInstance)
      def withLinkBasedTaskMetadata(__v: snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.LinkBasedTaskMetadata): TaskMetadata = copy(taskMetadata = snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.TaskMetadata.LinkBasedTaskMetadata(__v))
      def clearTaskMetadata: TaskMetadata = copy(taskMetadata = snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.TaskMetadata.Empty)
      def withTaskMetadata(__v: snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.TaskMetadata): TaskMetadata = copy(taskMetadata = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => taskMetadata.nodeBasedTaskMetadata.orNull
          case 2 => taskMetadata.nodeAnchorBasedLinkPredictionTaskMetadata.orNull
          case 3 => taskMetadata.linkBasedTaskMetadata.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => taskMetadata.nodeBasedTaskMetadata.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 2 => taskMetadata.nodeAnchorBasedLinkPredictionTaskMetadata.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 3 => taskMetadata.linkBasedTaskMetadata.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.type = snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata
      // @@protoc_insertion_point(GeneratedMessage[snapchat.research.gbml.GbmlConfig.TaskMetadata])
  }
  
  object TaskMetadata extends scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata = {
      var __taskMetadata: snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.TaskMetadata = snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.TaskMetadata.Empty
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __taskMetadata = snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.TaskMetadata.NodeBasedTaskMetadata(__taskMetadata.nodeBasedTaskMetadata.fold(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.NodeBasedTaskMetadata](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 18 =>
            __taskMetadata = snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.TaskMetadata.NodeAnchorBasedLinkPredictionTaskMetadata(__taskMetadata.nodeAnchorBasedLinkPredictionTaskMetadata.fold(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.NodeAnchorBasedLinkPredictionTaskMetadata](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 26 =>
            __taskMetadata = snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.TaskMetadata.LinkBasedTaskMetadata(__taskMetadata.linkBasedTaskMetadata.fold(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.LinkBasedTaskMetadata](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata(
          taskMetadata = __taskMetadata,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata(
          taskMetadata = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.NodeBasedTaskMetadata]]).map(snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.TaskMetadata.NodeBasedTaskMetadata(_))
              .orElse[snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.TaskMetadata](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.NodeAnchorBasedLinkPredictionTaskMetadata]]).map(snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.TaskMetadata.NodeAnchorBasedLinkPredictionTaskMetadata(_)))
              .orElse[snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.TaskMetadata](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.LinkBasedTaskMetadata]]).map(snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.TaskMetadata.LinkBasedTaskMetadata(_)))
              .getOrElse(snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.TaskMetadata.Empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 1 => __out = snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.NodeBasedTaskMetadata
        case 2 => __out = snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.NodeAnchorBasedLinkPredictionTaskMetadata
        case 3 => __out = snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.LinkBasedTaskMetadata
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
      Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
        _root_.snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.NodeBasedTaskMetadata,
        _root_.snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.NodeAnchorBasedLinkPredictionTaskMetadata,
        _root_.snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.LinkBasedTaskMetadata
      )
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata(
      taskMetadata = snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.TaskMetadata.Empty
    )
    sealed trait TaskMetadata extends _root_.scalapb.GeneratedOneof {
      def isEmpty: _root_.scala.Boolean = false
      def isDefined: _root_.scala.Boolean = true
      def isNodeBasedTaskMetadata: _root_.scala.Boolean = false
      def isNodeAnchorBasedLinkPredictionTaskMetadata: _root_.scala.Boolean = false
      def isLinkBasedTaskMetadata: _root_.scala.Boolean = false
      def nodeBasedTaskMetadata: _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.NodeBasedTaskMetadata] = _root_.scala.None
      def nodeAnchorBasedLinkPredictionTaskMetadata: _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.NodeAnchorBasedLinkPredictionTaskMetadata] = _root_.scala.None
      def linkBasedTaskMetadata: _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.LinkBasedTaskMetadata] = _root_.scala.None
    }
    object TaskMetadata {
      @SerialVersionUID(0L)
      case object Empty extends snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.TaskMetadata {
        type ValueType = _root_.scala.Nothing
        override def isEmpty: _root_.scala.Boolean = true
        override def isDefined: _root_.scala.Boolean = false
        override def number: _root_.scala.Int = 0
        override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
      }
    
      @SerialVersionUID(0L)
      final case class NodeBasedTaskMetadata(value: snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.NodeBasedTaskMetadata) extends snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.TaskMetadata {
        type ValueType = snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.NodeBasedTaskMetadata
        override def isNodeBasedTaskMetadata: _root_.scala.Boolean = true
        override def nodeBasedTaskMetadata: _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.NodeBasedTaskMetadata] = Some(value)
        override def number: _root_.scala.Int = 1
      }
      @SerialVersionUID(0L)
      final case class NodeAnchorBasedLinkPredictionTaskMetadata(value: snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.NodeAnchorBasedLinkPredictionTaskMetadata) extends snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.TaskMetadata {
        type ValueType = snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.NodeAnchorBasedLinkPredictionTaskMetadata
        override def isNodeAnchorBasedLinkPredictionTaskMetadata: _root_.scala.Boolean = true
        override def nodeAnchorBasedLinkPredictionTaskMetadata: _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.NodeAnchorBasedLinkPredictionTaskMetadata] = Some(value)
        override def number: _root_.scala.Int = 2
      }
      @SerialVersionUID(0L)
      final case class LinkBasedTaskMetadata(value: snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.LinkBasedTaskMetadata) extends snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.TaskMetadata {
        type ValueType = snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.LinkBasedTaskMetadata
        override def isLinkBasedTaskMetadata: _root_.scala.Boolean = true
        override def linkBasedTaskMetadata: _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.LinkBasedTaskMetadata] = Some(value)
        override def number: _root_.scala.Int = 3
      }
    }
    @SerialVersionUID(0L)
    final case class NodeBasedTaskMetadata(
        supervisionNodeTypes: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
        unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
        ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[NodeBasedTaskMetadata] {
        @transient
        private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
        private[this] def __computeSerializedSize(): _root_.scala.Int = {
          var __size = 0
          supervisionNodeTypes.foreach { __item =>
            val __value = __item
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
          __size += unknownFields.serializedSize
          __size
        }
        override def serializedSize: _root_.scala.Int = {
          var __size = __serializedSizeMemoized
          if (__size == 0) {
            __size = __computeSerializedSize() + 1
            __serializedSizeMemoized = __size
          }
          __size - 1
          
        }
        def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
          supervisionNodeTypes.foreach { __v =>
            val __m = __v
            _output__.writeString(1, __m)
          };
          unknownFields.writeTo(_output__)
        }
        def clearSupervisionNodeTypes = copy(supervisionNodeTypes = _root_.scala.Seq.empty)
        def addSupervisionNodeTypes(__vs: _root_.scala.Predef.String *): NodeBasedTaskMetadata = addAllSupervisionNodeTypes(__vs)
        def addAllSupervisionNodeTypes(__vs: Iterable[_root_.scala.Predef.String]): NodeBasedTaskMetadata = copy(supervisionNodeTypes = supervisionNodeTypes ++ __vs)
        def withSupervisionNodeTypes(__v: _root_.scala.Seq[_root_.scala.Predef.String]): NodeBasedTaskMetadata = copy(supervisionNodeTypes = __v)
        def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
        def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
        def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
          (__fieldNumber: @_root_.scala.unchecked) match {
            case 1 => supervisionNodeTypes
          }
        }
        def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
          _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
          (__field.number: @_root_.scala.unchecked) match {
            case 1 => _root_.scalapb.descriptors.PRepeated(supervisionNodeTypes.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
          }
        }
        def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
        def companion: snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.NodeBasedTaskMetadata.type = snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.NodeBasedTaskMetadata
        // @@protoc_insertion_point(GeneratedMessage[snapchat.research.gbml.GbmlConfig.TaskMetadata.NodeBasedTaskMetadata])
    }
    
    object NodeBasedTaskMetadata extends scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.NodeBasedTaskMetadata] {
      implicit def messageCompanion: scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.NodeBasedTaskMetadata] = this
      def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.NodeBasedTaskMetadata = {
        val __supervisionNodeTypes: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
        var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __supervisionNodeTypes += _input__.readStringRequireUtf8()
            case tag =>
              if (_unknownFields__ == null) {
                _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
              }
              _unknownFields__.parseField(tag, _input__)
          }
        }
        snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.NodeBasedTaskMetadata(
            supervisionNodeTypes = __supervisionNodeTypes.result(),
            unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
        )
      }
      implicit def messageReads: _root_.scalapb.descriptors.Reads[snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.NodeBasedTaskMetadata] = _root_.scalapb.descriptors.Reads{
        case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
          _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
          snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.NodeBasedTaskMetadata(
            supervisionNodeTypes = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty)
          )
        case _ => throw new RuntimeException("Expected PMessage")
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.javaDescriptor.getNestedTypes().get(0)
      def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.scalaDescriptor.nestedMessages(0)
      def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      lazy val defaultInstance = snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.NodeBasedTaskMetadata(
        supervisionNodeTypes = _root_.scala.Seq.empty
      )
      implicit class NodeBasedTaskMetadataLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.NodeBasedTaskMetadata]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.NodeBasedTaskMetadata](_l) {
        def supervisionNodeTypes: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.supervisionNodeTypes)((c_, f_) => c_.copy(supervisionNodeTypes = f_))
      }
      final val SUPERVISION_NODE_TYPES_FIELD_NUMBER = 1
      def of(
        supervisionNodeTypes: _root_.scala.Seq[_root_.scala.Predef.String]
      ): _root_.snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.NodeBasedTaskMetadata = _root_.snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.NodeBasedTaskMetadata(
        supervisionNodeTypes
      )
      // @@protoc_insertion_point(GeneratedMessageCompanion[snapchat.research.gbml.GbmlConfig.TaskMetadata.NodeBasedTaskMetadata])
    }
    
    @SerialVersionUID(0L)
    final case class NodeAnchorBasedLinkPredictionTaskMetadata(
        supervisionEdgeTypes: _root_.scala.Seq[snapchat.research.gbml.graph_schema.EdgeType] = _root_.scala.Seq.empty,
        unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
        ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[NodeAnchorBasedLinkPredictionTaskMetadata] {
        @transient
        private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
        private[this] def __computeSerializedSize(): _root_.scala.Int = {
          var __size = 0
          supervisionEdgeTypes.foreach { __item =>
            val __value = __item
            __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
          }
          __size += unknownFields.serializedSize
          __size
        }
        override def serializedSize: _root_.scala.Int = {
          var __size = __serializedSizeMemoized
          if (__size == 0) {
            __size = __computeSerializedSize() + 1
            __serializedSizeMemoized = __size
          }
          __size - 1
          
        }
        def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
          supervisionEdgeTypes.foreach { __v =>
            val __m = __v
            _output__.writeTag(1, 2)
            _output__.writeUInt32NoTag(__m.serializedSize)
            __m.writeTo(_output__)
          };
          unknownFields.writeTo(_output__)
        }
        def clearSupervisionEdgeTypes = copy(supervisionEdgeTypes = _root_.scala.Seq.empty)
        def addSupervisionEdgeTypes(__vs: snapchat.research.gbml.graph_schema.EdgeType *): NodeAnchorBasedLinkPredictionTaskMetadata = addAllSupervisionEdgeTypes(__vs)
        def addAllSupervisionEdgeTypes(__vs: Iterable[snapchat.research.gbml.graph_schema.EdgeType]): NodeAnchorBasedLinkPredictionTaskMetadata = copy(supervisionEdgeTypes = supervisionEdgeTypes ++ __vs)
        def withSupervisionEdgeTypes(__v: _root_.scala.Seq[snapchat.research.gbml.graph_schema.EdgeType]): NodeAnchorBasedLinkPredictionTaskMetadata = copy(supervisionEdgeTypes = __v)
        def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
        def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
        def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
          (__fieldNumber: @_root_.scala.unchecked) match {
            case 1 => supervisionEdgeTypes
          }
        }
        def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
          _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
          (__field.number: @_root_.scala.unchecked) match {
            case 1 => _root_.scalapb.descriptors.PRepeated(supervisionEdgeTypes.iterator.map(_.toPMessage).toVector)
          }
        }
        def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
        def companion: snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.NodeAnchorBasedLinkPredictionTaskMetadata.type = snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.NodeAnchorBasedLinkPredictionTaskMetadata
        // @@protoc_insertion_point(GeneratedMessage[snapchat.research.gbml.GbmlConfig.TaskMetadata.NodeAnchorBasedLinkPredictionTaskMetadata])
    }
    
    object NodeAnchorBasedLinkPredictionTaskMetadata extends scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.NodeAnchorBasedLinkPredictionTaskMetadata] {
      implicit def messageCompanion: scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.NodeAnchorBasedLinkPredictionTaskMetadata] = this
      def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.NodeAnchorBasedLinkPredictionTaskMetadata = {
        val __supervisionEdgeTypes: _root_.scala.collection.immutable.VectorBuilder[snapchat.research.gbml.graph_schema.EdgeType] = new _root_.scala.collection.immutable.VectorBuilder[snapchat.research.gbml.graph_schema.EdgeType]
        var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __supervisionEdgeTypes += _root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.graph_schema.EdgeType](_input__)
            case tag =>
              if (_unknownFields__ == null) {
                _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
              }
              _unknownFields__.parseField(tag, _input__)
          }
        }
        snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.NodeAnchorBasedLinkPredictionTaskMetadata(
            supervisionEdgeTypes = __supervisionEdgeTypes.result(),
            unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
        )
      }
      implicit def messageReads: _root_.scalapb.descriptors.Reads[snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.NodeAnchorBasedLinkPredictionTaskMetadata] = _root_.scalapb.descriptors.Reads{
        case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
          _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
          snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.NodeAnchorBasedLinkPredictionTaskMetadata(
            supervisionEdgeTypes = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[snapchat.research.gbml.graph_schema.EdgeType]]).getOrElse(_root_.scala.Seq.empty)
          )
        case _ => throw new RuntimeException("Expected PMessage")
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.javaDescriptor.getNestedTypes().get(1)
      def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.scalaDescriptor.nestedMessages(1)
      def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
        var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
        (__number: @_root_.scala.unchecked) match {
          case 1 => __out = snapchat.research.gbml.graph_schema.EdgeType
        }
        __out
      }
      lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      lazy val defaultInstance = snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.NodeAnchorBasedLinkPredictionTaskMetadata(
        supervisionEdgeTypes = _root_.scala.Seq.empty
      )
      implicit class NodeAnchorBasedLinkPredictionTaskMetadataLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.NodeAnchorBasedLinkPredictionTaskMetadata]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.NodeAnchorBasedLinkPredictionTaskMetadata](_l) {
        def supervisionEdgeTypes: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[snapchat.research.gbml.graph_schema.EdgeType]] = field(_.supervisionEdgeTypes)((c_, f_) => c_.copy(supervisionEdgeTypes = f_))
      }
      final val SUPERVISION_EDGE_TYPES_FIELD_NUMBER = 1
      def of(
        supervisionEdgeTypes: _root_.scala.Seq[snapchat.research.gbml.graph_schema.EdgeType]
      ): _root_.snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.NodeAnchorBasedLinkPredictionTaskMetadata = _root_.snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.NodeAnchorBasedLinkPredictionTaskMetadata(
        supervisionEdgeTypes
      )
      // @@protoc_insertion_point(GeneratedMessageCompanion[snapchat.research.gbml.GbmlConfig.TaskMetadata.NodeAnchorBasedLinkPredictionTaskMetadata])
    }
    
    @SerialVersionUID(0L)
    final case class LinkBasedTaskMetadata(
        supervisionEdgeTypes: _root_.scala.Seq[snapchat.research.gbml.graph_schema.EdgeType] = _root_.scala.Seq.empty,
        unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
        ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[LinkBasedTaskMetadata] {
        @transient
        private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
        private[this] def __computeSerializedSize(): _root_.scala.Int = {
          var __size = 0
          supervisionEdgeTypes.foreach { __item =>
            val __value = __item
            __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
          }
          __size += unknownFields.serializedSize
          __size
        }
        override def serializedSize: _root_.scala.Int = {
          var __size = __serializedSizeMemoized
          if (__size == 0) {
            __size = __computeSerializedSize() + 1
            __serializedSizeMemoized = __size
          }
          __size - 1
          
        }
        def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
          supervisionEdgeTypes.foreach { __v =>
            val __m = __v
            _output__.writeTag(1, 2)
            _output__.writeUInt32NoTag(__m.serializedSize)
            __m.writeTo(_output__)
          };
          unknownFields.writeTo(_output__)
        }
        def clearSupervisionEdgeTypes = copy(supervisionEdgeTypes = _root_.scala.Seq.empty)
        def addSupervisionEdgeTypes(__vs: snapchat.research.gbml.graph_schema.EdgeType *): LinkBasedTaskMetadata = addAllSupervisionEdgeTypes(__vs)
        def addAllSupervisionEdgeTypes(__vs: Iterable[snapchat.research.gbml.graph_schema.EdgeType]): LinkBasedTaskMetadata = copy(supervisionEdgeTypes = supervisionEdgeTypes ++ __vs)
        def withSupervisionEdgeTypes(__v: _root_.scala.Seq[snapchat.research.gbml.graph_schema.EdgeType]): LinkBasedTaskMetadata = copy(supervisionEdgeTypes = __v)
        def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
        def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
        def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
          (__fieldNumber: @_root_.scala.unchecked) match {
            case 1 => supervisionEdgeTypes
          }
        }
        def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
          _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
          (__field.number: @_root_.scala.unchecked) match {
            case 1 => _root_.scalapb.descriptors.PRepeated(supervisionEdgeTypes.iterator.map(_.toPMessage).toVector)
          }
        }
        def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
        def companion: snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.LinkBasedTaskMetadata.type = snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.LinkBasedTaskMetadata
        // @@protoc_insertion_point(GeneratedMessage[snapchat.research.gbml.GbmlConfig.TaskMetadata.LinkBasedTaskMetadata])
    }
    
    object LinkBasedTaskMetadata extends scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.LinkBasedTaskMetadata] {
      implicit def messageCompanion: scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.LinkBasedTaskMetadata] = this
      def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.LinkBasedTaskMetadata = {
        val __supervisionEdgeTypes: _root_.scala.collection.immutable.VectorBuilder[snapchat.research.gbml.graph_schema.EdgeType] = new _root_.scala.collection.immutable.VectorBuilder[snapchat.research.gbml.graph_schema.EdgeType]
        var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __supervisionEdgeTypes += _root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.graph_schema.EdgeType](_input__)
            case tag =>
              if (_unknownFields__ == null) {
                _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
              }
              _unknownFields__.parseField(tag, _input__)
          }
        }
        snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.LinkBasedTaskMetadata(
            supervisionEdgeTypes = __supervisionEdgeTypes.result(),
            unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
        )
      }
      implicit def messageReads: _root_.scalapb.descriptors.Reads[snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.LinkBasedTaskMetadata] = _root_.scalapb.descriptors.Reads{
        case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
          _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
          snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.LinkBasedTaskMetadata(
            supervisionEdgeTypes = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[snapchat.research.gbml.graph_schema.EdgeType]]).getOrElse(_root_.scala.Seq.empty)
          )
        case _ => throw new RuntimeException("Expected PMessage")
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.javaDescriptor.getNestedTypes().get(2)
      def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.scalaDescriptor.nestedMessages(2)
      def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
        var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
        (__number: @_root_.scala.unchecked) match {
          case 1 => __out = snapchat.research.gbml.graph_schema.EdgeType
        }
        __out
      }
      lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      lazy val defaultInstance = snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.LinkBasedTaskMetadata(
        supervisionEdgeTypes = _root_.scala.Seq.empty
      )
      implicit class LinkBasedTaskMetadataLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.LinkBasedTaskMetadata]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.LinkBasedTaskMetadata](_l) {
        def supervisionEdgeTypes: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[snapchat.research.gbml.graph_schema.EdgeType]] = field(_.supervisionEdgeTypes)((c_, f_) => c_.copy(supervisionEdgeTypes = f_))
      }
      final val SUPERVISION_EDGE_TYPES_FIELD_NUMBER = 1
      def of(
        supervisionEdgeTypes: _root_.scala.Seq[snapchat.research.gbml.graph_schema.EdgeType]
      ): _root_.snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.LinkBasedTaskMetadata = _root_.snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.LinkBasedTaskMetadata(
        supervisionEdgeTypes
      )
      // @@protoc_insertion_point(GeneratedMessageCompanion[snapchat.research.gbml.GbmlConfig.TaskMetadata.LinkBasedTaskMetadata])
    }
    
    implicit class TaskMetadataLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata](_l) {
      def nodeBasedTaskMetadata: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.NodeBasedTaskMetadata] = field(_.getNodeBasedTaskMetadata)((c_, f_) => c_.copy(taskMetadata = snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.TaskMetadata.NodeBasedTaskMetadata(f_)))
      def nodeAnchorBasedLinkPredictionTaskMetadata: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.NodeAnchorBasedLinkPredictionTaskMetadata] = field(_.getNodeAnchorBasedLinkPredictionTaskMetadata)((c_, f_) => c_.copy(taskMetadata = snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.TaskMetadata.NodeAnchorBasedLinkPredictionTaskMetadata(f_)))
      def linkBasedTaskMetadata: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.LinkBasedTaskMetadata] = field(_.getLinkBasedTaskMetadata)((c_, f_) => c_.copy(taskMetadata = snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.TaskMetadata.LinkBasedTaskMetadata(f_)))
      def taskMetadata: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.TaskMetadata] = field(_.taskMetadata)((c_, f_) => c_.copy(taskMetadata = f_))
    }
    final val NODE_BASED_TASK_METADATA_FIELD_NUMBER = 1
    final val NODE_ANCHOR_BASED_LINK_PREDICTION_TASK_METADATA_FIELD_NUMBER = 2
    final val LINK_BASED_TASK_METADATA_FIELD_NUMBER = 3
    def of(
      taskMetadata: snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata.TaskMetadata
    ): _root_.snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata = _root_.snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata(
      taskMetadata
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[snapchat.research.gbml.GbmlConfig.TaskMetadata])
  }
  
  /** @param preprocessedMetadataUri
    *   Uri where DataPreprocessor generates the PreprocessedMetadata proto.
    * @param flattenedGraphMetadata
    *   FlattenedGraphMetadata message, which designates locations of GraphFlat outputs.
    * @param datasetMetadata
    *   DatasetMetadata message, which designates location of SplitGenerator outputs.
    * @param trainedModelMetadata
    *   TrainedModelMetadata message, which designates location of Trainer outputs.
    * @param inferenceMetadata
    *   InferenceMetadata message, which designates location of Inferencer outputs.
    * @param postprocessedMetadata
    *   PostProcessedMetadata message, which designates location of PostProcessor outputs.
    * @param isGraphDirected
    *   is the graph directed or undirected (bidirectional)
    * @param shouldSkipTraining
    *   to skip training or not (inference only)
    * @param shouldSkipAutomaticTempAssetCleanup
    *   If set to true, will skip automatic clean up of temp assets
    *   Useful if you are running hyper param tuning jobs and dont want to continuously
    *   run the whole pipeline
    * @param shouldSkipInference
    *   to skip inference or not (for training only jobs)
    * @param shouldSkipModelEvaluation
    *   If set, we will not compute or export model metrics like MRR, etc
    *   Has a side effect if should_skip_training is set as well to result in
    *   not generating training samples and only RNNs needed for inference.
    * @param shouldIncludeIsolatedNodesInTraining
    *   If set to true, will include isolated nodes in training data
    *   As isolated nodes do not have positive neighbors, self loop will be added
    *   SGS outputs training samples including isolated nodes, trainer adds self loops in training subgraphs
    */
  @SerialVersionUID(0L)
  final case class SharedConfig(
      preprocessedMetadataUri: _root_.scala.Predef.String = "",
      flattenedGraphMetadata: _root_.scala.Option[snapchat.research.gbml.flattened_graph_metadata.FlattenedGraphMetadata] = _root_.scala.None,
      datasetMetadata: _root_.scala.Option[snapchat.research.gbml.dataset_metadata.DatasetMetadata] = _root_.scala.None,
      trainedModelMetadata: _root_.scala.Option[snapchat.research.gbml.trained_model_metadata.TrainedModelMetadata] = _root_.scala.None,
      inferenceMetadata: _root_.scala.Option[snapchat.research.gbml.inference_metadata.InferenceMetadata] = _root_.scala.None,
      postprocessedMetadata: _root_.scala.Option[snapchat.research.gbml.postprocessed_metadata.PostProcessedMetadata] = _root_.scala.None,
      sharedArgs: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String] = _root_.scala.collection.immutable.Map.empty,
      isGraphDirected: _root_.scala.Boolean = false,
      shouldSkipTraining: _root_.scala.Boolean = false,
      shouldSkipAutomaticTempAssetCleanup: _root_.scala.Boolean = false,
      shouldSkipInference: _root_.scala.Boolean = false,
      shouldSkipModelEvaluation: _root_.scala.Boolean = false,
      shouldIncludeIsolatedNodesInTraining: _root_.scala.Boolean = false,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[SharedConfig] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = preprocessedMetadataUri
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        if (flattenedGraphMetadata.isDefined) {
          val __value = flattenedGraphMetadata.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (datasetMetadata.isDefined) {
          val __value = datasetMetadata.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (trainedModelMetadata.isDefined) {
          val __value = trainedModelMetadata.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (inferenceMetadata.isDefined) {
          val __value = inferenceMetadata.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (postprocessedMetadata.isDefined) {
          val __value = postprocessedMetadata.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        sharedArgs.foreach { __item =>
          val __value = snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig._typemapper_sharedArgs.toBase(__item)
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
        
        {
          val __value = isGraphDirected
          if (__value != false) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(7, __value)
          }
        };
        
        {
          val __value = shouldSkipTraining
          if (__value != false) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(8, __value)
          }
        };
        
        {
          val __value = shouldSkipAutomaticTempAssetCleanup
          if (__value != false) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(9, __value)
          }
        };
        
        {
          val __value = shouldSkipInference
          if (__value != false) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(10, __value)
          }
        };
        
        {
          val __value = shouldSkipModelEvaluation
          if (__value != false) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(11, __value)
          }
        };
        
        {
          val __value = shouldIncludeIsolatedNodesInTraining
          if (__value != false) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(13, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = preprocessedMetadataUri
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        flattenedGraphMetadata.foreach { __v =>
          val __m = __v
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        datasetMetadata.foreach { __v =>
          val __m = __v
          _output__.writeTag(3, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        trainedModelMetadata.foreach { __v =>
          val __m = __v
          _output__.writeTag(4, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        inferenceMetadata.foreach { __v =>
          val __m = __v
          _output__.writeTag(5, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        sharedArgs.foreach { __v =>
          val __m = snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig._typemapper_sharedArgs.toBase(__v)
          _output__.writeTag(6, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        {
          val __v = isGraphDirected
          if (__v != false) {
            _output__.writeBool(7, __v)
          }
        };
        {
          val __v = shouldSkipTraining
          if (__v != false) {
            _output__.writeBool(8, __v)
          }
        };
        {
          val __v = shouldSkipAutomaticTempAssetCleanup
          if (__v != false) {
            _output__.writeBool(9, __v)
          }
        };
        {
          val __v = shouldSkipInference
          if (__v != false) {
            _output__.writeBool(10, __v)
          }
        };
        {
          val __v = shouldSkipModelEvaluation
          if (__v != false) {
            _output__.writeBool(11, __v)
          }
        };
        postprocessedMetadata.foreach { __v =>
          val __m = __v
          _output__.writeTag(12, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        {
          val __v = shouldIncludeIsolatedNodesInTraining
          if (__v != false) {
            _output__.writeBool(13, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withPreprocessedMetadataUri(__v: _root_.scala.Predef.String): SharedConfig = copy(preprocessedMetadataUri = __v)
      def getFlattenedGraphMetadata: snapchat.research.gbml.flattened_graph_metadata.FlattenedGraphMetadata = flattenedGraphMetadata.getOrElse(snapchat.research.gbml.flattened_graph_metadata.FlattenedGraphMetadata.defaultInstance)
      def clearFlattenedGraphMetadata: SharedConfig = copy(flattenedGraphMetadata = _root_.scala.None)
      def withFlattenedGraphMetadata(__v: snapchat.research.gbml.flattened_graph_metadata.FlattenedGraphMetadata): SharedConfig = copy(flattenedGraphMetadata = Option(__v))
      def getDatasetMetadata: snapchat.research.gbml.dataset_metadata.DatasetMetadata = datasetMetadata.getOrElse(snapchat.research.gbml.dataset_metadata.DatasetMetadata.defaultInstance)
      def clearDatasetMetadata: SharedConfig = copy(datasetMetadata = _root_.scala.None)
      def withDatasetMetadata(__v: snapchat.research.gbml.dataset_metadata.DatasetMetadata): SharedConfig = copy(datasetMetadata = Option(__v))
      def getTrainedModelMetadata: snapchat.research.gbml.trained_model_metadata.TrainedModelMetadata = trainedModelMetadata.getOrElse(snapchat.research.gbml.trained_model_metadata.TrainedModelMetadata.defaultInstance)
      def clearTrainedModelMetadata: SharedConfig = copy(trainedModelMetadata = _root_.scala.None)
      def withTrainedModelMetadata(__v: snapchat.research.gbml.trained_model_metadata.TrainedModelMetadata): SharedConfig = copy(trainedModelMetadata = Option(__v))
      def getInferenceMetadata: snapchat.research.gbml.inference_metadata.InferenceMetadata = inferenceMetadata.getOrElse(snapchat.research.gbml.inference_metadata.InferenceMetadata.defaultInstance)
      def clearInferenceMetadata: SharedConfig = copy(inferenceMetadata = _root_.scala.None)
      def withInferenceMetadata(__v: snapchat.research.gbml.inference_metadata.InferenceMetadata): SharedConfig = copy(inferenceMetadata = Option(__v))
      def getPostprocessedMetadata: snapchat.research.gbml.postprocessed_metadata.PostProcessedMetadata = postprocessedMetadata.getOrElse(snapchat.research.gbml.postprocessed_metadata.PostProcessedMetadata.defaultInstance)
      def clearPostprocessedMetadata: SharedConfig = copy(postprocessedMetadata = _root_.scala.None)
      def withPostprocessedMetadata(__v: snapchat.research.gbml.postprocessed_metadata.PostProcessedMetadata): SharedConfig = copy(postprocessedMetadata = Option(__v))
      def clearSharedArgs = copy(sharedArgs = _root_.scala.collection.immutable.Map.empty)
      def addSharedArgs(__vs: (_root_.scala.Predef.String, _root_.scala.Predef.String) *): SharedConfig = addAllSharedArgs(__vs)
      def addAllSharedArgs(__vs: Iterable[(_root_.scala.Predef.String, _root_.scala.Predef.String)]): SharedConfig = copy(sharedArgs = sharedArgs ++ __vs)
      def withSharedArgs(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]): SharedConfig = copy(sharedArgs = __v)
      def withIsGraphDirected(__v: _root_.scala.Boolean): SharedConfig = copy(isGraphDirected = __v)
      def withShouldSkipTraining(__v: _root_.scala.Boolean): SharedConfig = copy(shouldSkipTraining = __v)
      def withShouldSkipAutomaticTempAssetCleanup(__v: _root_.scala.Boolean): SharedConfig = copy(shouldSkipAutomaticTempAssetCleanup = __v)
      def withShouldSkipInference(__v: _root_.scala.Boolean): SharedConfig = copy(shouldSkipInference = __v)
      def withShouldSkipModelEvaluation(__v: _root_.scala.Boolean): SharedConfig = copy(shouldSkipModelEvaluation = __v)
      def withShouldIncludeIsolatedNodesInTraining(__v: _root_.scala.Boolean): SharedConfig = copy(shouldIncludeIsolatedNodesInTraining = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = preprocessedMetadataUri
            if (__t != "") __t else null
          }
          case 2 => flattenedGraphMetadata.orNull
          case 3 => datasetMetadata.orNull
          case 4 => trainedModelMetadata.orNull
          case 5 => inferenceMetadata.orNull
          case 12 => postprocessedMetadata.orNull
          case 6 => sharedArgs.iterator.map(snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig._typemapper_sharedArgs.toBase(_)).toSeq
          case 7 => {
            val __t = isGraphDirected
            if (__t != false) __t else null
          }
          case 8 => {
            val __t = shouldSkipTraining
            if (__t != false) __t else null
          }
          case 9 => {
            val __t = shouldSkipAutomaticTempAssetCleanup
            if (__t != false) __t else null
          }
          case 10 => {
            val __t = shouldSkipInference
            if (__t != false) __t else null
          }
          case 11 => {
            val __t = shouldSkipModelEvaluation
            if (__t != false) __t else null
          }
          case 13 => {
            val __t = shouldIncludeIsolatedNodesInTraining
            if (__t != false) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(preprocessedMetadataUri)
          case 2 => flattenedGraphMetadata.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 3 => datasetMetadata.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 4 => trainedModelMetadata.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 5 => inferenceMetadata.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 12 => postprocessedMetadata.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 6 => _root_.scalapb.descriptors.PRepeated(sharedArgs.iterator.map(snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig._typemapper_sharedArgs.toBase(_).toPMessage).toVector)
          case 7 => _root_.scalapb.descriptors.PBoolean(isGraphDirected)
          case 8 => _root_.scalapb.descriptors.PBoolean(shouldSkipTraining)
          case 9 => _root_.scalapb.descriptors.PBoolean(shouldSkipAutomaticTempAssetCleanup)
          case 10 => _root_.scalapb.descriptors.PBoolean(shouldSkipInference)
          case 11 => _root_.scalapb.descriptors.PBoolean(shouldSkipModelEvaluation)
          case 13 => _root_.scalapb.descriptors.PBoolean(shouldIncludeIsolatedNodesInTraining)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig.type = snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig
      // @@protoc_insertion_point(GeneratedMessage[snapchat.research.gbml.GbmlConfig.SharedConfig])
  }
  
  object SharedConfig extends scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig = {
      var __preprocessedMetadataUri: _root_.scala.Predef.String = ""
      var __flattenedGraphMetadata: _root_.scala.Option[snapchat.research.gbml.flattened_graph_metadata.FlattenedGraphMetadata] = _root_.scala.None
      var __datasetMetadata: _root_.scala.Option[snapchat.research.gbml.dataset_metadata.DatasetMetadata] = _root_.scala.None
      var __trainedModelMetadata: _root_.scala.Option[snapchat.research.gbml.trained_model_metadata.TrainedModelMetadata] = _root_.scala.None
      var __inferenceMetadata: _root_.scala.Option[snapchat.research.gbml.inference_metadata.InferenceMetadata] = _root_.scala.None
      var __postprocessedMetadata: _root_.scala.Option[snapchat.research.gbml.postprocessed_metadata.PostProcessedMetadata] = _root_.scala.None
      val __sharedArgs: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, _root_.scala.Predef.String), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, _root_.scala.Predef.String]
      var __isGraphDirected: _root_.scala.Boolean = false
      var __shouldSkipTraining: _root_.scala.Boolean = false
      var __shouldSkipAutomaticTempAssetCleanup: _root_.scala.Boolean = false
      var __shouldSkipInference: _root_.scala.Boolean = false
      var __shouldSkipModelEvaluation: _root_.scala.Boolean = false
      var __shouldIncludeIsolatedNodesInTraining: _root_.scala.Boolean = false
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __preprocessedMetadataUri = _input__.readStringRequireUtf8()
          case 18 =>
            __flattenedGraphMetadata = Option(__flattenedGraphMetadata.fold(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.flattened_graph_metadata.FlattenedGraphMetadata](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 26 =>
            __datasetMetadata = Option(__datasetMetadata.fold(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.dataset_metadata.DatasetMetadata](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 34 =>
            __trainedModelMetadata = Option(__trainedModelMetadata.fold(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.trained_model_metadata.TrainedModelMetadata](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 42 =>
            __inferenceMetadata = Option(__inferenceMetadata.fold(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.inference_metadata.InferenceMetadata](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 98 =>
            __postprocessedMetadata = Option(__postprocessedMetadata.fold(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.postprocessed_metadata.PostProcessedMetadata](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 50 =>
            __sharedArgs += snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig._typemapper_sharedArgs.toCustom(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig.SharedArgsEntry](_input__))
          case 56 =>
            __isGraphDirected = _input__.readBool()
          case 64 =>
            __shouldSkipTraining = _input__.readBool()
          case 72 =>
            __shouldSkipAutomaticTempAssetCleanup = _input__.readBool()
          case 80 =>
            __shouldSkipInference = _input__.readBool()
          case 88 =>
            __shouldSkipModelEvaluation = _input__.readBool()
          case 104 =>
            __shouldIncludeIsolatedNodesInTraining = _input__.readBool()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig(
          preprocessedMetadataUri = __preprocessedMetadataUri,
          flattenedGraphMetadata = __flattenedGraphMetadata,
          datasetMetadata = __datasetMetadata,
          trainedModelMetadata = __trainedModelMetadata,
          inferenceMetadata = __inferenceMetadata,
          postprocessedMetadata = __postprocessedMetadata,
          sharedArgs = __sharedArgs.result(),
          isGraphDirected = __isGraphDirected,
          shouldSkipTraining = __shouldSkipTraining,
          shouldSkipAutomaticTempAssetCleanup = __shouldSkipAutomaticTempAssetCleanup,
          shouldSkipInference = __shouldSkipInference,
          shouldSkipModelEvaluation = __shouldSkipModelEvaluation,
          shouldIncludeIsolatedNodesInTraining = __shouldIncludeIsolatedNodesInTraining,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig(
          preprocessedMetadataUri = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          flattenedGraphMetadata = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[snapchat.research.gbml.flattened_graph_metadata.FlattenedGraphMetadata]]),
          datasetMetadata = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[snapchat.research.gbml.dataset_metadata.DatasetMetadata]]),
          trainedModelMetadata = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[snapchat.research.gbml.trained_model_metadata.TrainedModelMetadata]]),
          inferenceMetadata = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[snapchat.research.gbml.inference_metadata.InferenceMetadata]]),
          postprocessedMetadata = __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).flatMap(_.as[_root_.scala.Option[snapchat.research.gbml.postprocessed_metadata.PostProcessedMetadata]]),
          sharedArgs = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Seq[snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig.SharedArgsEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig._typemapper_sharedArgs.toCustom(_)).toMap,
          isGraphDirected = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
          shouldSkipTraining = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
          shouldSkipAutomaticTempAssetCleanup = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
          shouldSkipInference = __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
          shouldSkipModelEvaluation = __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
          shouldIncludeIsolatedNodesInTraining = __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).map(_.as[_root_.scala.Boolean]).getOrElse(false)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.javaDescriptor.getNestedTypes().get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = snapchat.research.gbml.flattened_graph_metadata.FlattenedGraphMetadata
        case 3 => __out = snapchat.research.gbml.dataset_metadata.DatasetMetadata
        case 4 => __out = snapchat.research.gbml.trained_model_metadata.TrainedModelMetadata
        case 5 => __out = snapchat.research.gbml.inference_metadata.InferenceMetadata
        case 12 => __out = snapchat.research.gbml.postprocessed_metadata.PostProcessedMetadata
        case 6 => __out = snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig.SharedArgsEntry
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
      Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
        _root_.snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig.SharedArgsEntry
      )
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig(
      preprocessedMetadataUri = "",
      flattenedGraphMetadata = _root_.scala.None,
      datasetMetadata = _root_.scala.None,
      trainedModelMetadata = _root_.scala.None,
      inferenceMetadata = _root_.scala.None,
      postprocessedMetadata = _root_.scala.None,
      sharedArgs = _root_.scala.collection.immutable.Map.empty,
      isGraphDirected = false,
      shouldSkipTraining = false,
      shouldSkipAutomaticTempAssetCleanup = false,
      shouldSkipInference = false,
      shouldSkipModelEvaluation = false,
      shouldIncludeIsolatedNodesInTraining = false
    )
    @SerialVersionUID(0L)
    final case class SharedArgsEntry(
        key: _root_.scala.Predef.String = "",
        value: _root_.scala.Predef.String = "",
        unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
        ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[SharedArgsEntry] {
        @transient
        private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
        private[this] def __computeSerializedSize(): _root_.scala.Int = {
          var __size = 0
          
          {
            val __value = key
            if (!__value.isEmpty) {
              __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
            }
          };
          
          {
            val __value = value
            if (!__value.isEmpty) {
              __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
            }
          };
          __size += unknownFields.serializedSize
          __size
        }
        override def serializedSize: _root_.scala.Int = {
          var __size = __serializedSizeMemoized
          if (__size == 0) {
            __size = __computeSerializedSize() + 1
            __serializedSizeMemoized = __size
          }
          __size - 1
          
        }
        def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
          {
            val __v = key
            if (!__v.isEmpty) {
              _output__.writeString(1, __v)
            }
          };
          {
            val __v = value
            if (!__v.isEmpty) {
              _output__.writeString(2, __v)
            }
          };
          unknownFields.writeTo(_output__)
        }
        def withKey(__v: _root_.scala.Predef.String): SharedArgsEntry = copy(key = __v)
        def withValue(__v: _root_.scala.Predef.String): SharedArgsEntry = copy(value = __v)
        def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
        def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
        def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
          (__fieldNumber: @_root_.scala.unchecked) match {
            case 1 => {
              val __t = key
              if (__t != "") __t else null
            }
            case 2 => {
              val __t = value
              if (__t != "") __t else null
            }
          }
        }
        def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
          _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
          (__field.number: @_root_.scala.unchecked) match {
            case 1 => _root_.scalapb.descriptors.PString(key)
            case 2 => _root_.scalapb.descriptors.PString(value)
          }
        }
        def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
        def companion: snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig.SharedArgsEntry.type = snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig.SharedArgsEntry
        // @@protoc_insertion_point(GeneratedMessage[snapchat.research.gbml.GbmlConfig.SharedConfig.SharedArgsEntry])
    }
    
    object SharedArgsEntry extends scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig.SharedArgsEntry] {
      implicit def messageCompanion: scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig.SharedArgsEntry] = this
      def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig.SharedArgsEntry = {
        var __key: _root_.scala.Predef.String = ""
        var __value: _root_.scala.Predef.String = ""
        var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __key = _input__.readStringRequireUtf8()
            case 18 =>
              __value = _input__.readStringRequireUtf8()
            case tag =>
              if (_unknownFields__ == null) {
                _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
              }
              _unknownFields__.parseField(tag, _input__)
          }
        }
        snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig.SharedArgsEntry(
            key = __key,
            value = __value,
            unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
        )
      }
      implicit def messageReads: _root_.scalapb.descriptors.Reads[snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig.SharedArgsEntry] = _root_.scalapb.descriptors.Reads{
        case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
          _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
          snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig.SharedArgsEntry(
            key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
            value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
          )
        case _ => throw new RuntimeException("Expected PMessage")
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig.javaDescriptor.getNestedTypes().get(0)
      def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig.scalaDescriptor.nestedMessages(0)
      def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      lazy val defaultInstance = snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig.SharedArgsEntry(
        key = "",
        value = ""
      )
      implicit class SharedArgsEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig.SharedArgsEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig.SharedArgsEntry](_l) {
        def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
        def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.value)((c_, f_) => c_.copy(value = f_))
      }
      final val KEY_FIELD_NUMBER = 1
      final val VALUE_FIELD_NUMBER = 2
      @transient
      implicit val keyValueMapper: _root_.scalapb.TypeMapper[snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig.SharedArgsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)] =
        _root_.scalapb.TypeMapper[snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig.SharedArgsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)](__m => (__m.key, __m.value))(__p => snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig.SharedArgsEntry(__p._1, __p._2))
      def of(
        key: _root_.scala.Predef.String,
        value: _root_.scala.Predef.String
      ): _root_.snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig.SharedArgsEntry = _root_.snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig.SharedArgsEntry(
        key,
        value
      )
      // @@protoc_insertion_point(GeneratedMessageCompanion[snapchat.research.gbml.GbmlConfig.SharedConfig.SharedArgsEntry])
    }
    
    implicit class SharedConfigLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig](_l) {
      def preprocessedMetadataUri: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.preprocessedMetadataUri)((c_, f_) => c_.copy(preprocessedMetadataUri = f_))
      def flattenedGraphMetadata: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.flattened_graph_metadata.FlattenedGraphMetadata] = field(_.getFlattenedGraphMetadata)((c_, f_) => c_.copy(flattenedGraphMetadata = Option(f_)))
      def optionalFlattenedGraphMetadata: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[snapchat.research.gbml.flattened_graph_metadata.FlattenedGraphMetadata]] = field(_.flattenedGraphMetadata)((c_, f_) => c_.copy(flattenedGraphMetadata = f_))
      def datasetMetadata: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.dataset_metadata.DatasetMetadata] = field(_.getDatasetMetadata)((c_, f_) => c_.copy(datasetMetadata = Option(f_)))
      def optionalDatasetMetadata: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[snapchat.research.gbml.dataset_metadata.DatasetMetadata]] = field(_.datasetMetadata)((c_, f_) => c_.copy(datasetMetadata = f_))
      def trainedModelMetadata: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.trained_model_metadata.TrainedModelMetadata] = field(_.getTrainedModelMetadata)((c_, f_) => c_.copy(trainedModelMetadata = Option(f_)))
      def optionalTrainedModelMetadata: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[snapchat.research.gbml.trained_model_metadata.TrainedModelMetadata]] = field(_.trainedModelMetadata)((c_, f_) => c_.copy(trainedModelMetadata = f_))
      def inferenceMetadata: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.inference_metadata.InferenceMetadata] = field(_.getInferenceMetadata)((c_, f_) => c_.copy(inferenceMetadata = Option(f_)))
      def optionalInferenceMetadata: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[snapchat.research.gbml.inference_metadata.InferenceMetadata]] = field(_.inferenceMetadata)((c_, f_) => c_.copy(inferenceMetadata = f_))
      def postprocessedMetadata: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.postprocessed_metadata.PostProcessedMetadata] = field(_.getPostprocessedMetadata)((c_, f_) => c_.copy(postprocessedMetadata = Option(f_)))
      def optionalPostprocessedMetadata: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[snapchat.research.gbml.postprocessed_metadata.PostProcessedMetadata]] = field(_.postprocessedMetadata)((c_, f_) => c_.copy(postprocessedMetadata = f_))
      def sharedArgs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]] = field(_.sharedArgs)((c_, f_) => c_.copy(sharedArgs = f_))
      def isGraphDirected: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.isGraphDirected)((c_, f_) => c_.copy(isGraphDirected = f_))
      def shouldSkipTraining: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.shouldSkipTraining)((c_, f_) => c_.copy(shouldSkipTraining = f_))
      def shouldSkipAutomaticTempAssetCleanup: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.shouldSkipAutomaticTempAssetCleanup)((c_, f_) => c_.copy(shouldSkipAutomaticTempAssetCleanup = f_))
      def shouldSkipInference: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.shouldSkipInference)((c_, f_) => c_.copy(shouldSkipInference = f_))
      def shouldSkipModelEvaluation: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.shouldSkipModelEvaluation)((c_, f_) => c_.copy(shouldSkipModelEvaluation = f_))
      def shouldIncludeIsolatedNodesInTraining: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.shouldIncludeIsolatedNodesInTraining)((c_, f_) => c_.copy(shouldIncludeIsolatedNodesInTraining = f_))
    }
    final val PREPROCESSED_METADATA_URI_FIELD_NUMBER = 1
    final val FLATTENED_GRAPH_METADATA_FIELD_NUMBER = 2
    final val DATASET_METADATA_FIELD_NUMBER = 3
    final val TRAINED_MODEL_METADATA_FIELD_NUMBER = 4
    final val INFERENCE_METADATA_FIELD_NUMBER = 5
    final val POSTPROCESSED_METADATA_FIELD_NUMBER = 12
    final val SHARED_ARGS_FIELD_NUMBER = 6
    final val IS_GRAPH_DIRECTED_FIELD_NUMBER = 7
    final val SHOULD_SKIP_TRAINING_FIELD_NUMBER = 8
    final val SHOULD_SKIP_AUTOMATIC_TEMP_ASSET_CLEANUP_FIELD_NUMBER = 9
    final val SHOULD_SKIP_INFERENCE_FIELD_NUMBER = 10
    final val SHOULD_SKIP_MODEL_EVALUATION_FIELD_NUMBER = 11
    final val SHOULD_INCLUDE_ISOLATED_NODES_IN_TRAINING_FIELD_NUMBER = 13
    @transient
    private[gbml_config] val _typemapper_sharedArgs: _root_.scalapb.TypeMapper[snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig.SharedArgsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)] = implicitly[_root_.scalapb.TypeMapper[snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig.SharedArgsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)]]
    def of(
      preprocessedMetadataUri: _root_.scala.Predef.String,
      flattenedGraphMetadata: _root_.scala.Option[snapchat.research.gbml.flattened_graph_metadata.FlattenedGraphMetadata],
      datasetMetadata: _root_.scala.Option[snapchat.research.gbml.dataset_metadata.DatasetMetadata],
      trainedModelMetadata: _root_.scala.Option[snapchat.research.gbml.trained_model_metadata.TrainedModelMetadata],
      inferenceMetadata: _root_.scala.Option[snapchat.research.gbml.inference_metadata.InferenceMetadata],
      postprocessedMetadata: _root_.scala.Option[snapchat.research.gbml.postprocessed_metadata.PostProcessedMetadata],
      sharedArgs: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String],
      isGraphDirected: _root_.scala.Boolean,
      shouldSkipTraining: _root_.scala.Boolean,
      shouldSkipAutomaticTempAssetCleanup: _root_.scala.Boolean,
      shouldSkipInference: _root_.scala.Boolean,
      shouldSkipModelEvaluation: _root_.scala.Boolean,
      shouldIncludeIsolatedNodesInTraining: _root_.scala.Boolean
    ): _root_.snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig = _root_.snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig(
      preprocessedMetadataUri,
      flattenedGraphMetadata,
      datasetMetadata,
      trainedModelMetadata,
      inferenceMetadata,
      postprocessedMetadata,
      sharedArgs,
      isGraphDirected,
      shouldSkipTraining,
      shouldSkipAutomaticTempAssetCleanup,
      shouldSkipInference,
      shouldSkipModelEvaluation,
      shouldIncludeIsolatedNodesInTraining
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[snapchat.research.gbml.GbmlConfig.SharedConfig])
  }
  
  /** Contains config related to generating training data for a GML task.
    */
  @SerialVersionUID(0L)
  final case class DatasetConfig(
      dataPreprocessorConfig: _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig] = _root_.scala.None,
      subgraphSamplerConfig: _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig] = _root_.scala.None,
      splitGeneratorConfig: _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig] = _root_.scala.None,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[DatasetConfig] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        if (dataPreprocessorConfig.isDefined) {
          val __value = dataPreprocessorConfig.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (subgraphSamplerConfig.isDefined) {
          val __value = subgraphSamplerConfig.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (splitGeneratorConfig.isDefined) {
          val __value = splitGeneratorConfig.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        dataPreprocessorConfig.foreach { __v =>
          val __m = __v
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        subgraphSamplerConfig.foreach { __v =>
          val __m = __v
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        splitGeneratorConfig.foreach { __v =>
          val __m = __v
          _output__.writeTag(3, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def getDataPreprocessorConfig: snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig = dataPreprocessorConfig.getOrElse(snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig.defaultInstance)
      def clearDataPreprocessorConfig: DatasetConfig = copy(dataPreprocessorConfig = _root_.scala.None)
      def withDataPreprocessorConfig(__v: snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig): DatasetConfig = copy(dataPreprocessorConfig = Option(__v))
      def getSubgraphSamplerConfig: snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig = subgraphSamplerConfig.getOrElse(snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig.defaultInstance)
      def clearSubgraphSamplerConfig: DatasetConfig = copy(subgraphSamplerConfig = _root_.scala.None)
      def withSubgraphSamplerConfig(__v: snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig): DatasetConfig = copy(subgraphSamplerConfig = Option(__v))
      def getSplitGeneratorConfig: snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig = splitGeneratorConfig.getOrElse(snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig.defaultInstance)
      def clearSplitGeneratorConfig: DatasetConfig = copy(splitGeneratorConfig = _root_.scala.None)
      def withSplitGeneratorConfig(__v: snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig): DatasetConfig = copy(splitGeneratorConfig = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => dataPreprocessorConfig.orNull
          case 2 => subgraphSamplerConfig.orNull
          case 3 => splitGeneratorConfig.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => dataPreprocessorConfig.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 2 => subgraphSamplerConfig.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 3 => splitGeneratorConfig.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.type = snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig
      // @@protoc_insertion_point(GeneratedMessage[snapchat.research.gbml.GbmlConfig.DatasetConfig])
  }
  
  object DatasetConfig extends scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig = {
      var __dataPreprocessorConfig: _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig] = _root_.scala.None
      var __subgraphSamplerConfig: _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig] = _root_.scala.None
      var __splitGeneratorConfig: _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig] = _root_.scala.None
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __dataPreprocessorConfig = Option(__dataPreprocessorConfig.fold(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 18 =>
            __subgraphSamplerConfig = Option(__subgraphSamplerConfig.fold(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 26 =>
            __splitGeneratorConfig = Option(__splitGeneratorConfig.fold(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig(
          dataPreprocessorConfig = __dataPreprocessorConfig,
          subgraphSamplerConfig = __subgraphSamplerConfig,
          splitGeneratorConfig = __splitGeneratorConfig,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig(
          dataPreprocessorConfig = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig]]),
          subgraphSamplerConfig = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig]]),
          splitGeneratorConfig = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.javaDescriptor.getNestedTypes().get(2)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.scalaDescriptor.nestedMessages(2)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 1 => __out = snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig
        case 2 => __out = snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig
        case 3 => __out = snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
      Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
        _root_.snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig,
        _root_.snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig,
        _root_.snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig
      )
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig(
      dataPreprocessorConfig = _root_.scala.None,
      subgraphSamplerConfig = _root_.scala.None,
      splitGeneratorConfig = _root_.scala.None
    )
    /** @param dataPreprocessorConfigClsPath
      *   Uri pointing to user-written DataPreprocessorConfig class definition.
      * @param dataPreprocessorArgs
      *   Arguments to instantiate concrete DataPreprocessorConfig instance with.
      */
    @SerialVersionUID(0L)
    final case class DataPreprocessorConfig(
        dataPreprocessorConfigClsPath: _root_.scala.Predef.String = "",
        dataPreprocessorArgs: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String] = _root_.scala.collection.immutable.Map.empty,
        unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
        ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[DataPreprocessorConfig] {
        @transient
        private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
        private[this] def __computeSerializedSize(): _root_.scala.Int = {
          var __size = 0
          
          {
            val __value = dataPreprocessorConfigClsPath
            if (!__value.isEmpty) {
              __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
            }
          };
          dataPreprocessorArgs.foreach { __item =>
            val __value = snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig._typemapper_dataPreprocessorArgs.toBase(__item)
            __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
          }
          __size += unknownFields.serializedSize
          __size
        }
        override def serializedSize: _root_.scala.Int = {
          var __size = __serializedSizeMemoized
          if (__size == 0) {
            __size = __computeSerializedSize() + 1
            __serializedSizeMemoized = __size
          }
          __size - 1
          
        }
        def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
          {
            val __v = dataPreprocessorConfigClsPath
            if (!__v.isEmpty) {
              _output__.writeString(1, __v)
            }
          };
          dataPreprocessorArgs.foreach { __v =>
            val __m = snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig._typemapper_dataPreprocessorArgs.toBase(__v)
            _output__.writeTag(2, 2)
            _output__.writeUInt32NoTag(__m.serializedSize)
            __m.writeTo(_output__)
          };
          unknownFields.writeTo(_output__)
        }
        def withDataPreprocessorConfigClsPath(__v: _root_.scala.Predef.String): DataPreprocessorConfig = copy(dataPreprocessorConfigClsPath = __v)
        def clearDataPreprocessorArgs = copy(dataPreprocessorArgs = _root_.scala.collection.immutable.Map.empty)
        def addDataPreprocessorArgs(__vs: (_root_.scala.Predef.String, _root_.scala.Predef.String) *): DataPreprocessorConfig = addAllDataPreprocessorArgs(__vs)
        def addAllDataPreprocessorArgs(__vs: Iterable[(_root_.scala.Predef.String, _root_.scala.Predef.String)]): DataPreprocessorConfig = copy(dataPreprocessorArgs = dataPreprocessorArgs ++ __vs)
        def withDataPreprocessorArgs(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]): DataPreprocessorConfig = copy(dataPreprocessorArgs = __v)
        def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
        def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
        def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
          (__fieldNumber: @_root_.scala.unchecked) match {
            case 1 => {
              val __t = dataPreprocessorConfigClsPath
              if (__t != "") __t else null
            }
            case 2 => dataPreprocessorArgs.iterator.map(snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig._typemapper_dataPreprocessorArgs.toBase(_)).toSeq
          }
        }
        def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
          _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
          (__field.number: @_root_.scala.unchecked) match {
            case 1 => _root_.scalapb.descriptors.PString(dataPreprocessorConfigClsPath)
            case 2 => _root_.scalapb.descriptors.PRepeated(dataPreprocessorArgs.iterator.map(snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig._typemapper_dataPreprocessorArgs.toBase(_).toPMessage).toVector)
          }
        }
        def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
        def companion: snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig.type = snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig
        // @@protoc_insertion_point(GeneratedMessage[snapchat.research.gbml.GbmlConfig.DatasetConfig.DataPreprocessorConfig])
    }
    
    object DataPreprocessorConfig extends scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig] {
      implicit def messageCompanion: scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig] = this
      def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig = {
        var __dataPreprocessorConfigClsPath: _root_.scala.Predef.String = ""
        val __dataPreprocessorArgs: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, _root_.scala.Predef.String), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, _root_.scala.Predef.String]
        var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __dataPreprocessorConfigClsPath = _input__.readStringRequireUtf8()
            case 18 =>
              __dataPreprocessorArgs += snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig._typemapper_dataPreprocessorArgs.toCustom(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig.DataPreprocessorArgsEntry](_input__))
            case tag =>
              if (_unknownFields__ == null) {
                _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
              }
              _unknownFields__.parseField(tag, _input__)
          }
        }
        snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig(
            dataPreprocessorConfigClsPath = __dataPreprocessorConfigClsPath,
            dataPreprocessorArgs = __dataPreprocessorArgs.result(),
            unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
        )
      }
      implicit def messageReads: _root_.scalapb.descriptors.Reads[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig] = _root_.scalapb.descriptors.Reads{
        case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
          _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
          snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig(
            dataPreprocessorConfigClsPath = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
            dataPreprocessorArgs = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig.DataPreprocessorArgsEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig._typemapper_dataPreprocessorArgs.toCustom(_)).toMap
          )
        case _ => throw new RuntimeException("Expected PMessage")
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.javaDescriptor.getNestedTypes().get(0)
      def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.scalaDescriptor.nestedMessages(0)
      def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
        var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
        (__number: @_root_.scala.unchecked) match {
          case 2 => __out = snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig.DataPreprocessorArgsEntry
        }
        __out
      }
      lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
        Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
          _root_.snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig.DataPreprocessorArgsEntry
        )
      def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      lazy val defaultInstance = snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig(
        dataPreprocessorConfigClsPath = "",
        dataPreprocessorArgs = _root_.scala.collection.immutable.Map.empty
      )
      @SerialVersionUID(0L)
      final case class DataPreprocessorArgsEntry(
          key: _root_.scala.Predef.String = "",
          value: _root_.scala.Predef.String = "",
          unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
          ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[DataPreprocessorArgsEntry] {
          @transient
          private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
          private[this] def __computeSerializedSize(): _root_.scala.Int = {
            var __size = 0
            
            {
              val __value = key
              if (!__value.isEmpty) {
                __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
              }
            };
            
            {
              val __value = value
              if (!__value.isEmpty) {
                __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
              }
            };
            __size += unknownFields.serializedSize
            __size
          }
          override def serializedSize: _root_.scala.Int = {
            var __size = __serializedSizeMemoized
            if (__size == 0) {
              __size = __computeSerializedSize() + 1
              __serializedSizeMemoized = __size
            }
            __size - 1
            
          }
          def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
            {
              val __v = key
              if (!__v.isEmpty) {
                _output__.writeString(1, __v)
              }
            };
            {
              val __v = value
              if (!__v.isEmpty) {
                _output__.writeString(2, __v)
              }
            };
            unknownFields.writeTo(_output__)
          }
          def withKey(__v: _root_.scala.Predef.String): DataPreprocessorArgsEntry = copy(key = __v)
          def withValue(__v: _root_.scala.Predef.String): DataPreprocessorArgsEntry = copy(value = __v)
          def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
          def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
          def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
            (__fieldNumber: @_root_.scala.unchecked) match {
              case 1 => {
                val __t = key
                if (__t != "") __t else null
              }
              case 2 => {
                val __t = value
                if (__t != "") __t else null
              }
            }
          }
          def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
            _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
            (__field.number: @_root_.scala.unchecked) match {
              case 1 => _root_.scalapb.descriptors.PString(key)
              case 2 => _root_.scalapb.descriptors.PString(value)
            }
          }
          def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
          def companion: snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig.DataPreprocessorArgsEntry.type = snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig.DataPreprocessorArgsEntry
          // @@protoc_insertion_point(GeneratedMessage[snapchat.research.gbml.GbmlConfig.DatasetConfig.DataPreprocessorConfig.DataPreprocessorArgsEntry])
      }
      
      object DataPreprocessorArgsEntry extends scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig.DataPreprocessorArgsEntry] {
        implicit def messageCompanion: scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig.DataPreprocessorArgsEntry] = this
        def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig.DataPreprocessorArgsEntry = {
          var __key: _root_.scala.Predef.String = ""
          var __value: _root_.scala.Predef.String = ""
          var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
          var _done__ = false
          while (!_done__) {
            val _tag__ = _input__.readTag()
            _tag__ match {
              case 0 => _done__ = true
              case 10 =>
                __key = _input__.readStringRequireUtf8()
              case 18 =>
                __value = _input__.readStringRequireUtf8()
              case tag =>
                if (_unknownFields__ == null) {
                  _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
                }
                _unknownFields__.parseField(tag, _input__)
            }
          }
          snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig.DataPreprocessorArgsEntry(
              key = __key,
              value = __value,
              unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
          )
        }
        implicit def messageReads: _root_.scalapb.descriptors.Reads[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig.DataPreprocessorArgsEntry] = _root_.scalapb.descriptors.Reads{
          case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
            _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
            snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig.DataPreprocessorArgsEntry(
              key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
              value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
            )
          case _ => throw new RuntimeException("Expected PMessage")
        }
        def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig.javaDescriptor.getNestedTypes().get(0)
        def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig.scalaDescriptor.nestedMessages(0)
        def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
        lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
        def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
        lazy val defaultInstance = snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig.DataPreprocessorArgsEntry(
          key = "",
          value = ""
        )
        implicit class DataPreprocessorArgsEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig.DataPreprocessorArgsEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig.DataPreprocessorArgsEntry](_l) {
          def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
          def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.value)((c_, f_) => c_.copy(value = f_))
        }
        final val KEY_FIELD_NUMBER = 1
        final val VALUE_FIELD_NUMBER = 2
        @transient
        implicit val keyValueMapper: _root_.scalapb.TypeMapper[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig.DataPreprocessorArgsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)] =
          _root_.scalapb.TypeMapper[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig.DataPreprocessorArgsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)](__m => (__m.key, __m.value))(__p => snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig.DataPreprocessorArgsEntry(__p._1, __p._2))
        def of(
          key: _root_.scala.Predef.String,
          value: _root_.scala.Predef.String
        ): _root_.snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig.DataPreprocessorArgsEntry = _root_.snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig.DataPreprocessorArgsEntry(
          key,
          value
        )
        // @@protoc_insertion_point(GeneratedMessageCompanion[snapchat.research.gbml.GbmlConfig.DatasetConfig.DataPreprocessorConfig.DataPreprocessorArgsEntry])
      }
      
      implicit class DataPreprocessorConfigLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig](_l) {
        def dataPreprocessorConfigClsPath: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.dataPreprocessorConfigClsPath)((c_, f_) => c_.copy(dataPreprocessorConfigClsPath = f_))
        def dataPreprocessorArgs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]] = field(_.dataPreprocessorArgs)((c_, f_) => c_.copy(dataPreprocessorArgs = f_))
      }
      final val DATA_PREPROCESSOR_CONFIG_CLS_PATH_FIELD_NUMBER = 1
      final val DATA_PREPROCESSOR_ARGS_FIELD_NUMBER = 2
      @transient
      private[gbml_config] val _typemapper_dataPreprocessorArgs: _root_.scalapb.TypeMapper[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig.DataPreprocessorArgsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)] = implicitly[_root_.scalapb.TypeMapper[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig.DataPreprocessorArgsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)]]
      def of(
        dataPreprocessorConfigClsPath: _root_.scala.Predef.String,
        dataPreprocessorArgs: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]
      ): _root_.snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig = _root_.snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig(
        dataPreprocessorConfigClsPath,
        dataPreprocessorArgs
      )
      // @@protoc_insertion_point(GeneratedMessageCompanion[snapchat.research.gbml.GbmlConfig.DatasetConfig.DataPreprocessorConfig])
    }
    
    /** @param numHops
      *   number of hops for subgraph sampler to include
      * @param numNeighborsToSample
      *   num_neighbors_to_sample indicates the max number of neighbors to sample for each hop
      *   num_neighbors_to_sample can be set to -1 to indicate no sampling (include all neighbors)
      * @param subgraphSamplingStrategy
      *   num hops and num neighbors to sample is deprecated in favor of neighbor_sampling_strategy.
      *   Used to specify how the graphs which are used for message passing are constructed
      * @param numPositiveSamples
      *   number of positive samples (1hop) used in NodeAnchorBasedLinkPredictionTask
      *   as part of loss computation. It cannot be 0. And it's recommended to be larger
      *   than 1 due to the split filtering logic in split generator, to guarantee most samples to
      *   have at least one positive for it to not be excluded in training.
      * @param experimentalFlags
      *   Arguments for experimental_flags, can be permutation_strategy: 'deterministic' or 'non-deterministic'
      * @param numMaxTrainingSamplesToOutput
      *   max number of training samples (i.e. nodes to store as main samples for training)
      *   If this is not provided or is set to 0, all nodes will be included for training
      * @param numUserDefinedPositiveSamples
      *   number of user defined positive samples. Used in NodeAnchorBasedLinkPredictionTask
      *   as part of loss computation.
      *   If `num_user_defined_positive_samples` is specified `num_positive_samples` will be ignored as
      *   positive samples will only be drawn from user defined positive samples.
      * @param numUserDefinedNegativeSamples
      *   number of user defined negative samples.
      *   Treated as hard negative samples. Used in NodeAnchorBasedLinkPredictionTask
      *   Also used in loss computation. Random negatives will always be used even when there
      *   are no user defined hard negatives
      * @param graphDbConfig
      *   If specified, intention is to run ingestion into graphDB for subgraph sampler 
      */
    @SerialVersionUID(0L)
    final case class SubgraphSamplerConfig(
        @scala.deprecated(message="Marked as deprecated in proto file", "") numHops: _root_.scala.Int = 0,
        @scala.deprecated(message="Marked as deprecated in proto file", "") numNeighborsToSample: _root_.scala.Int = 0,
        subgraphSamplingStrategy: _root_.scala.Option[snapchat.research.gbml.subgraph_sampling_strategy.SubgraphSamplingStrategy] = _root_.scala.None,
        numPositiveSamples: _root_.scala.Int = 0,
        experimentalFlags: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String] = _root_.scala.collection.immutable.Map.empty,
        numMaxTrainingSamplesToOutput: _root_.scala.Int = 0,
        @scala.deprecated(message="Marked as deprecated in proto file", "") numUserDefinedPositiveSamples: _root_.scala.Int = 0,
        @scala.deprecated(message="Marked as deprecated in proto file", "") numUserDefinedNegativeSamples: _root_.scala.Int = 0,
        graphDbConfig: _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig] = _root_.scala.None,
        unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
        ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[SubgraphSamplerConfig] {
        @transient
        private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
        private[this] def __computeSerializedSize(): _root_.scala.Int = {
          var __size = 0
          
          {
            val __value = numHops
            if (__value != 0) {
              __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, __value)
            }
          };
          
          {
            val __value = numNeighborsToSample
            if (__value != 0) {
              __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, __value)
            }
          };
          if (subgraphSamplingStrategy.isDefined) {
            val __value = subgraphSamplingStrategy.get
            __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
          };
          
          {
            val __value = numPositiveSamples
            if (__value != 0) {
              __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(3, __value)
            }
          };
          experimentalFlags.foreach { __item =>
            val __value = snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig._typemapper_experimentalFlags.toBase(__item)
            __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
          }
          
          {
            val __value = numMaxTrainingSamplesToOutput
            if (__value != 0) {
              __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(6, __value)
            }
          };
          
          {
            val __value = numUserDefinedPositiveSamples
            if (__value != 0) {
              __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(7, __value)
            }
          };
          
          {
            val __value = numUserDefinedNegativeSamples
            if (__value != 0) {
              __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(8, __value)
            }
          };
          if (graphDbConfig.isDefined) {
            val __value = graphDbConfig.get
            __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
          };
          __size += unknownFields.serializedSize
          __size
        }
        override def serializedSize: _root_.scala.Int = {
          var __size = __serializedSizeMemoized
          if (__size == 0) {
            __size = __computeSerializedSize() + 1
            __serializedSizeMemoized = __size
          }
          __size - 1
          
        }
        def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
          {
            val __v = numHops
            if (__v != 0) {
              _output__.writeUInt32(1, __v)
            }
          };
          {
            val __v = numNeighborsToSample
            if (__v != 0) {
              _output__.writeInt32(2, __v)
            }
          };
          {
            val __v = numPositiveSamples
            if (__v != 0) {
              _output__.writeUInt32(3, __v)
            }
          };
          experimentalFlags.foreach { __v =>
            val __m = snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig._typemapper_experimentalFlags.toBase(__v)
            _output__.writeTag(5, 2)
            _output__.writeUInt32NoTag(__m.serializedSize)
            __m.writeTo(_output__)
          };
          {
            val __v = numMaxTrainingSamplesToOutput
            if (__v != 0) {
              _output__.writeUInt32(6, __v)
            }
          };
          {
            val __v = numUserDefinedPositiveSamples
            if (__v != 0) {
              _output__.writeUInt32(7, __v)
            }
          };
          {
            val __v = numUserDefinedNegativeSamples
            if (__v != 0) {
              _output__.writeUInt32(8, __v)
            }
          };
          graphDbConfig.foreach { __v =>
            val __m = __v
            _output__.writeTag(9, 2)
            _output__.writeUInt32NoTag(__m.serializedSize)
            __m.writeTo(_output__)
          };
          subgraphSamplingStrategy.foreach { __v =>
            val __m = __v
            _output__.writeTag(10, 2)
            _output__.writeUInt32NoTag(__m.serializedSize)
            __m.writeTo(_output__)
          };
          unknownFields.writeTo(_output__)
        }
        def withNumHops(__v: _root_.scala.Int): SubgraphSamplerConfig = copy(numHops = __v)
        def withNumNeighborsToSample(__v: _root_.scala.Int): SubgraphSamplerConfig = copy(numNeighborsToSample = __v)
        def getSubgraphSamplingStrategy: snapchat.research.gbml.subgraph_sampling_strategy.SubgraphSamplingStrategy = subgraphSamplingStrategy.getOrElse(snapchat.research.gbml.subgraph_sampling_strategy.SubgraphSamplingStrategy.defaultInstance)
        def clearSubgraphSamplingStrategy: SubgraphSamplerConfig = copy(subgraphSamplingStrategy = _root_.scala.None)
        def withSubgraphSamplingStrategy(__v: snapchat.research.gbml.subgraph_sampling_strategy.SubgraphSamplingStrategy): SubgraphSamplerConfig = copy(subgraphSamplingStrategy = Option(__v))
        def withNumPositiveSamples(__v: _root_.scala.Int): SubgraphSamplerConfig = copy(numPositiveSamples = __v)
        def clearExperimentalFlags = copy(experimentalFlags = _root_.scala.collection.immutable.Map.empty)
        def addExperimentalFlags(__vs: (_root_.scala.Predef.String, _root_.scala.Predef.String) *): SubgraphSamplerConfig = addAllExperimentalFlags(__vs)
        def addAllExperimentalFlags(__vs: Iterable[(_root_.scala.Predef.String, _root_.scala.Predef.String)]): SubgraphSamplerConfig = copy(experimentalFlags = experimentalFlags ++ __vs)
        def withExperimentalFlags(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]): SubgraphSamplerConfig = copy(experimentalFlags = __v)
        def withNumMaxTrainingSamplesToOutput(__v: _root_.scala.Int): SubgraphSamplerConfig = copy(numMaxTrainingSamplesToOutput = __v)
        def withNumUserDefinedPositiveSamples(__v: _root_.scala.Int): SubgraphSamplerConfig = copy(numUserDefinedPositiveSamples = __v)
        def withNumUserDefinedNegativeSamples(__v: _root_.scala.Int): SubgraphSamplerConfig = copy(numUserDefinedNegativeSamples = __v)
        def getGraphDbConfig: snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig = graphDbConfig.getOrElse(snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.defaultInstance)
        def clearGraphDbConfig: SubgraphSamplerConfig = copy(graphDbConfig = _root_.scala.None)
        def withGraphDbConfig(__v: snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig): SubgraphSamplerConfig = copy(graphDbConfig = Option(__v))
        def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
        def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
        def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
          (__fieldNumber: @_root_.scala.unchecked) match {
            case 1 => {
              val __t = numHops
              if (__t != 0) __t else null
            }
            case 2 => {
              val __t = numNeighborsToSample
              if (__t != 0) __t else null
            }
            case 10 => subgraphSamplingStrategy.orNull
            case 3 => {
              val __t = numPositiveSamples
              if (__t != 0) __t else null
            }
            case 5 => experimentalFlags.iterator.map(snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig._typemapper_experimentalFlags.toBase(_)).toSeq
            case 6 => {
              val __t = numMaxTrainingSamplesToOutput
              if (__t != 0) __t else null
            }
            case 7 => {
              val __t = numUserDefinedPositiveSamples
              if (__t != 0) __t else null
            }
            case 8 => {
              val __t = numUserDefinedNegativeSamples
              if (__t != 0) __t else null
            }
            case 9 => graphDbConfig.orNull
          }
        }
        def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
          _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
          (__field.number: @_root_.scala.unchecked) match {
            case 1 => _root_.scalapb.descriptors.PInt(numHops)
            case 2 => _root_.scalapb.descriptors.PInt(numNeighborsToSample)
            case 10 => subgraphSamplingStrategy.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
            case 3 => _root_.scalapb.descriptors.PInt(numPositiveSamples)
            case 5 => _root_.scalapb.descriptors.PRepeated(experimentalFlags.iterator.map(snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig._typemapper_experimentalFlags.toBase(_).toPMessage).toVector)
            case 6 => _root_.scalapb.descriptors.PInt(numMaxTrainingSamplesToOutput)
            case 7 => _root_.scalapb.descriptors.PInt(numUserDefinedPositiveSamples)
            case 8 => _root_.scalapb.descriptors.PInt(numUserDefinedNegativeSamples)
            case 9 => graphDbConfig.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          }
        }
        def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
        def companion: snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig.type = snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig
        // @@protoc_insertion_point(GeneratedMessage[snapchat.research.gbml.GbmlConfig.DatasetConfig.SubgraphSamplerConfig])
    }
    
    object SubgraphSamplerConfig extends scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig] {
      implicit def messageCompanion: scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig] = this
      def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig = {
        var __numHops: _root_.scala.Int = 0
        var __numNeighborsToSample: _root_.scala.Int = 0
        var __subgraphSamplingStrategy: _root_.scala.Option[snapchat.research.gbml.subgraph_sampling_strategy.SubgraphSamplingStrategy] = _root_.scala.None
        var __numPositiveSamples: _root_.scala.Int = 0
        val __experimentalFlags: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, _root_.scala.Predef.String), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, _root_.scala.Predef.String]
        var __numMaxTrainingSamplesToOutput: _root_.scala.Int = 0
        var __numUserDefinedPositiveSamples: _root_.scala.Int = 0
        var __numUserDefinedNegativeSamples: _root_.scala.Int = 0
        var __graphDbConfig: _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig] = _root_.scala.None
        var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __numHops = _input__.readUInt32()
            case 16 =>
              __numNeighborsToSample = _input__.readInt32()
            case 82 =>
              __subgraphSamplingStrategy = Option(__subgraphSamplingStrategy.fold(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.subgraph_sampling_strategy.SubgraphSamplingStrategy](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
            case 24 =>
              __numPositiveSamples = _input__.readUInt32()
            case 42 =>
              __experimentalFlags += snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig._typemapper_experimentalFlags.toCustom(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig.ExperimentalFlagsEntry](_input__))
            case 48 =>
              __numMaxTrainingSamplesToOutput = _input__.readUInt32()
            case 56 =>
              __numUserDefinedPositiveSamples = _input__.readUInt32()
            case 64 =>
              __numUserDefinedNegativeSamples = _input__.readUInt32()
            case 74 =>
              __graphDbConfig = Option(__graphDbConfig.fold(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
            case tag =>
              if (_unknownFields__ == null) {
                _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
              }
              _unknownFields__.parseField(tag, _input__)
          }
        }
        snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig(
            numHops = __numHops,
            numNeighborsToSample = __numNeighborsToSample,
            subgraphSamplingStrategy = __subgraphSamplingStrategy,
            numPositiveSamples = __numPositiveSamples,
            experimentalFlags = __experimentalFlags.result(),
            numMaxTrainingSamplesToOutput = __numMaxTrainingSamplesToOutput,
            numUserDefinedPositiveSamples = __numUserDefinedPositiveSamples,
            numUserDefinedNegativeSamples = __numUserDefinedNegativeSamples,
            graphDbConfig = __graphDbConfig,
            unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
        )
      }
      implicit def messageReads: _root_.scalapb.descriptors.Reads[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig] = _root_.scalapb.descriptors.Reads{
        case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
          _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
          snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig(
            numHops = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
            numNeighborsToSample = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Int]).getOrElse(0),
            subgraphSamplingStrategy = __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[_root_.scala.Option[snapchat.research.gbml.subgraph_sampling_strategy.SubgraphSamplingStrategy]]),
            numPositiveSamples = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Int]).getOrElse(0),
            experimentalFlags = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Seq[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig.ExperimentalFlagsEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig._typemapper_experimentalFlags.toCustom(_)).toMap,
            numMaxTrainingSamplesToOutput = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Int]).getOrElse(0),
            numUserDefinedPositiveSamples = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Int]).getOrElse(0),
            numUserDefinedNegativeSamples = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Int]).getOrElse(0),
            graphDbConfig = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[_root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig]])
          )
        case _ => throw new RuntimeException("Expected PMessage")
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.javaDescriptor.getNestedTypes().get(1)
      def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.scalaDescriptor.nestedMessages(1)
      def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
        var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
        (__number: @_root_.scala.unchecked) match {
          case 10 => __out = snapchat.research.gbml.subgraph_sampling_strategy.SubgraphSamplingStrategy
          case 5 => __out = snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig.ExperimentalFlagsEntry
          case 9 => __out = snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig
        }
        __out
      }
      lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
        Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
          _root_.snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig.ExperimentalFlagsEntry
        )
      def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      lazy val defaultInstance = snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig(
        numHops = 0,
        numNeighborsToSample = 0,
        subgraphSamplingStrategy = _root_.scala.None,
        numPositiveSamples = 0,
        experimentalFlags = _root_.scala.collection.immutable.Map.empty,
        numMaxTrainingSamplesToOutput = 0,
        numUserDefinedPositiveSamples = 0,
        numUserDefinedNegativeSamples = 0,
        graphDbConfig = _root_.scala.None
      )
      @SerialVersionUID(0L)
      final case class ExperimentalFlagsEntry(
          key: _root_.scala.Predef.String = "",
          value: _root_.scala.Predef.String = "",
          unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
          ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ExperimentalFlagsEntry] {
          @transient
          private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
          private[this] def __computeSerializedSize(): _root_.scala.Int = {
            var __size = 0
            
            {
              val __value = key
              if (!__value.isEmpty) {
                __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
              }
            };
            
            {
              val __value = value
              if (!__value.isEmpty) {
                __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
              }
            };
            __size += unknownFields.serializedSize
            __size
          }
          override def serializedSize: _root_.scala.Int = {
            var __size = __serializedSizeMemoized
            if (__size == 0) {
              __size = __computeSerializedSize() + 1
              __serializedSizeMemoized = __size
            }
            __size - 1
            
          }
          def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
            {
              val __v = key
              if (!__v.isEmpty) {
                _output__.writeString(1, __v)
              }
            };
            {
              val __v = value
              if (!__v.isEmpty) {
                _output__.writeString(2, __v)
              }
            };
            unknownFields.writeTo(_output__)
          }
          def withKey(__v: _root_.scala.Predef.String): ExperimentalFlagsEntry = copy(key = __v)
          def withValue(__v: _root_.scala.Predef.String): ExperimentalFlagsEntry = copy(value = __v)
          def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
          def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
          def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
            (__fieldNumber: @_root_.scala.unchecked) match {
              case 1 => {
                val __t = key
                if (__t != "") __t else null
              }
              case 2 => {
                val __t = value
                if (__t != "") __t else null
              }
            }
          }
          def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
            _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
            (__field.number: @_root_.scala.unchecked) match {
              case 1 => _root_.scalapb.descriptors.PString(key)
              case 2 => _root_.scalapb.descriptors.PString(value)
            }
          }
          def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
          def companion: snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig.ExperimentalFlagsEntry.type = snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig.ExperimentalFlagsEntry
          // @@protoc_insertion_point(GeneratedMessage[snapchat.research.gbml.GbmlConfig.DatasetConfig.SubgraphSamplerConfig.ExperimentalFlagsEntry])
      }
      
      object ExperimentalFlagsEntry extends scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig.ExperimentalFlagsEntry] {
        implicit def messageCompanion: scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig.ExperimentalFlagsEntry] = this
        def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig.ExperimentalFlagsEntry = {
          var __key: _root_.scala.Predef.String = ""
          var __value: _root_.scala.Predef.String = ""
          var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
          var _done__ = false
          while (!_done__) {
            val _tag__ = _input__.readTag()
            _tag__ match {
              case 0 => _done__ = true
              case 10 =>
                __key = _input__.readStringRequireUtf8()
              case 18 =>
                __value = _input__.readStringRequireUtf8()
              case tag =>
                if (_unknownFields__ == null) {
                  _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
                }
                _unknownFields__.parseField(tag, _input__)
            }
          }
          snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig.ExperimentalFlagsEntry(
              key = __key,
              value = __value,
              unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
          )
        }
        implicit def messageReads: _root_.scalapb.descriptors.Reads[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig.ExperimentalFlagsEntry] = _root_.scalapb.descriptors.Reads{
          case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
            _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
            snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig.ExperimentalFlagsEntry(
              key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
              value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
            )
          case _ => throw new RuntimeException("Expected PMessage")
        }
        def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig.javaDescriptor.getNestedTypes().get(0)
        def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig.scalaDescriptor.nestedMessages(0)
        def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
        lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
        def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
        lazy val defaultInstance = snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig.ExperimentalFlagsEntry(
          key = "",
          value = ""
        )
        implicit class ExperimentalFlagsEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig.ExperimentalFlagsEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig.ExperimentalFlagsEntry](_l) {
          def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
          def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.value)((c_, f_) => c_.copy(value = f_))
        }
        final val KEY_FIELD_NUMBER = 1
        final val VALUE_FIELD_NUMBER = 2
        @transient
        implicit val keyValueMapper: _root_.scalapb.TypeMapper[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig.ExperimentalFlagsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)] =
          _root_.scalapb.TypeMapper[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig.ExperimentalFlagsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)](__m => (__m.key, __m.value))(__p => snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig.ExperimentalFlagsEntry(__p._1, __p._2))
        def of(
          key: _root_.scala.Predef.String,
          value: _root_.scala.Predef.String
        ): _root_.snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig.ExperimentalFlagsEntry = _root_.snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig.ExperimentalFlagsEntry(
          key,
          value
        )
        // @@protoc_insertion_point(GeneratedMessageCompanion[snapchat.research.gbml.GbmlConfig.DatasetConfig.SubgraphSamplerConfig.ExperimentalFlagsEntry])
      }
      
      implicit class SubgraphSamplerConfigLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig](_l) {
        def numHops: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.numHops)((c_, f_) => c_.copy(numHops = f_))
        def numNeighborsToSample: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.numNeighborsToSample)((c_, f_) => c_.copy(numNeighborsToSample = f_))
        def subgraphSamplingStrategy: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.subgraph_sampling_strategy.SubgraphSamplingStrategy] = field(_.getSubgraphSamplingStrategy)((c_, f_) => c_.copy(subgraphSamplingStrategy = Option(f_)))
        def optionalSubgraphSamplingStrategy: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[snapchat.research.gbml.subgraph_sampling_strategy.SubgraphSamplingStrategy]] = field(_.subgraphSamplingStrategy)((c_, f_) => c_.copy(subgraphSamplingStrategy = f_))
        def numPositiveSamples: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.numPositiveSamples)((c_, f_) => c_.copy(numPositiveSamples = f_))
        def experimentalFlags: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]] = field(_.experimentalFlags)((c_, f_) => c_.copy(experimentalFlags = f_))
        def numMaxTrainingSamplesToOutput: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.numMaxTrainingSamplesToOutput)((c_, f_) => c_.copy(numMaxTrainingSamplesToOutput = f_))
        def numUserDefinedPositiveSamples: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.numUserDefinedPositiveSamples)((c_, f_) => c_.copy(numUserDefinedPositiveSamples = f_))
        def numUserDefinedNegativeSamples: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.numUserDefinedNegativeSamples)((c_, f_) => c_.copy(numUserDefinedNegativeSamples = f_))
        def graphDbConfig: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig] = field(_.getGraphDbConfig)((c_, f_) => c_.copy(graphDbConfig = Option(f_)))
        def optionalGraphDbConfig: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig]] = field(_.graphDbConfig)((c_, f_) => c_.copy(graphDbConfig = f_))
      }
      final val NUM_HOPS_FIELD_NUMBER = 1
      final val NUM_NEIGHBORS_TO_SAMPLE_FIELD_NUMBER = 2
      final val SUBGRAPH_SAMPLING_STRATEGY_FIELD_NUMBER = 10
      final val NUM_POSITIVE_SAMPLES_FIELD_NUMBER = 3
      final val EXPERIMENTAL_FLAGS_FIELD_NUMBER = 5
      final val NUM_MAX_TRAINING_SAMPLES_TO_OUTPUT_FIELD_NUMBER = 6
      final val NUM_USER_DEFINED_POSITIVE_SAMPLES_FIELD_NUMBER = 7
      final val NUM_USER_DEFINED_NEGATIVE_SAMPLES_FIELD_NUMBER = 8
      final val GRAPH_DB_CONFIG_FIELD_NUMBER = 9
      @transient
      private[gbml_config] val _typemapper_experimentalFlags: _root_.scalapb.TypeMapper[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig.ExperimentalFlagsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)] = implicitly[_root_.scalapb.TypeMapper[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig.ExperimentalFlagsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)]]
      def of(
        numHops: _root_.scala.Int,
        numNeighborsToSample: _root_.scala.Int,
        subgraphSamplingStrategy: _root_.scala.Option[snapchat.research.gbml.subgraph_sampling_strategy.SubgraphSamplingStrategy],
        numPositiveSamples: _root_.scala.Int,
        experimentalFlags: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String],
        numMaxTrainingSamplesToOutput: _root_.scala.Int,
        numUserDefinedPositiveSamples: _root_.scala.Int,
        numUserDefinedNegativeSamples: _root_.scala.Int,
        graphDbConfig: _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig]
      ): _root_.snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig = _root_.snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig(
        numHops,
        numNeighborsToSample,
        subgraphSamplingStrategy,
        numPositiveSamples,
        experimentalFlags,
        numMaxTrainingSamplesToOutput,
        numUserDefinedPositiveSamples,
        numUserDefinedNegativeSamples,
        graphDbConfig
      )
      // @@protoc_insertion_point(GeneratedMessageCompanion[snapchat.research.gbml.GbmlConfig.DatasetConfig.SubgraphSamplerConfig])
    }
    
    /** @param splitStrategyClsPath
      *   Module path to concrete SplitStrategy instance.
      * @param splitStrategyArgs
      *   Arguments to instantiate concrete SplitStrategy instance with.
      * @param assignerClsPath
      *   Module path to concrete Assigner instance
      * @param assignerArgs
      *   Arguments to instantiate concrete Assigner instance with.
      */
    @SerialVersionUID(0L)
    final case class SplitGeneratorConfig(
        splitStrategyClsPath: _root_.scala.Predef.String = "",
        splitStrategyArgs: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String] = _root_.scala.collection.immutable.Map.empty,
        assignerClsPath: _root_.scala.Predef.String = "",
        assignerArgs: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String] = _root_.scala.collection.immutable.Map.empty,
        unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
        ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[SplitGeneratorConfig] {
        @transient
        private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
        private[this] def __computeSerializedSize(): _root_.scala.Int = {
          var __size = 0
          
          {
            val __value = splitStrategyClsPath
            if (!__value.isEmpty) {
              __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
            }
          };
          splitStrategyArgs.foreach { __item =>
            val __value = snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig._typemapper_splitStrategyArgs.toBase(__item)
            __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
          }
          
          {
            val __value = assignerClsPath
            if (!__value.isEmpty) {
              __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
            }
          };
          assignerArgs.foreach { __item =>
            val __value = snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig._typemapper_assignerArgs.toBase(__item)
            __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
          }
          __size += unknownFields.serializedSize
          __size
        }
        override def serializedSize: _root_.scala.Int = {
          var __size = __serializedSizeMemoized
          if (__size == 0) {
            __size = __computeSerializedSize() + 1
            __serializedSizeMemoized = __size
          }
          __size - 1
          
        }
        def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
          {
            val __v = splitStrategyClsPath
            if (!__v.isEmpty) {
              _output__.writeString(1, __v)
            }
          };
          splitStrategyArgs.foreach { __v =>
            val __m = snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig._typemapper_splitStrategyArgs.toBase(__v)
            _output__.writeTag(2, 2)
            _output__.writeUInt32NoTag(__m.serializedSize)
            __m.writeTo(_output__)
          };
          {
            val __v = assignerClsPath
            if (!__v.isEmpty) {
              _output__.writeString(3, __v)
            }
          };
          assignerArgs.foreach { __v =>
            val __m = snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig._typemapper_assignerArgs.toBase(__v)
            _output__.writeTag(4, 2)
            _output__.writeUInt32NoTag(__m.serializedSize)
            __m.writeTo(_output__)
          };
          unknownFields.writeTo(_output__)
        }
        def withSplitStrategyClsPath(__v: _root_.scala.Predef.String): SplitGeneratorConfig = copy(splitStrategyClsPath = __v)
        def clearSplitStrategyArgs = copy(splitStrategyArgs = _root_.scala.collection.immutable.Map.empty)
        def addSplitStrategyArgs(__vs: (_root_.scala.Predef.String, _root_.scala.Predef.String) *): SplitGeneratorConfig = addAllSplitStrategyArgs(__vs)
        def addAllSplitStrategyArgs(__vs: Iterable[(_root_.scala.Predef.String, _root_.scala.Predef.String)]): SplitGeneratorConfig = copy(splitStrategyArgs = splitStrategyArgs ++ __vs)
        def withSplitStrategyArgs(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]): SplitGeneratorConfig = copy(splitStrategyArgs = __v)
        def withAssignerClsPath(__v: _root_.scala.Predef.String): SplitGeneratorConfig = copy(assignerClsPath = __v)
        def clearAssignerArgs = copy(assignerArgs = _root_.scala.collection.immutable.Map.empty)
        def addAssignerArgs(__vs: (_root_.scala.Predef.String, _root_.scala.Predef.String) *): SplitGeneratorConfig = addAllAssignerArgs(__vs)
        def addAllAssignerArgs(__vs: Iterable[(_root_.scala.Predef.String, _root_.scala.Predef.String)]): SplitGeneratorConfig = copy(assignerArgs = assignerArgs ++ __vs)
        def withAssignerArgs(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]): SplitGeneratorConfig = copy(assignerArgs = __v)
        def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
        def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
        def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
          (__fieldNumber: @_root_.scala.unchecked) match {
            case 1 => {
              val __t = splitStrategyClsPath
              if (__t != "") __t else null
            }
            case 2 => splitStrategyArgs.iterator.map(snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig._typemapper_splitStrategyArgs.toBase(_)).toSeq
            case 3 => {
              val __t = assignerClsPath
              if (__t != "") __t else null
            }
            case 4 => assignerArgs.iterator.map(snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig._typemapper_assignerArgs.toBase(_)).toSeq
          }
        }
        def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
          _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
          (__field.number: @_root_.scala.unchecked) match {
            case 1 => _root_.scalapb.descriptors.PString(splitStrategyClsPath)
            case 2 => _root_.scalapb.descriptors.PRepeated(splitStrategyArgs.iterator.map(snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig._typemapper_splitStrategyArgs.toBase(_).toPMessage).toVector)
            case 3 => _root_.scalapb.descriptors.PString(assignerClsPath)
            case 4 => _root_.scalapb.descriptors.PRepeated(assignerArgs.iterator.map(snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig._typemapper_assignerArgs.toBase(_).toPMessage).toVector)
          }
        }
        def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
        def companion: snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig.type = snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig
        // @@protoc_insertion_point(GeneratedMessage[snapchat.research.gbml.GbmlConfig.DatasetConfig.SplitGeneratorConfig])
    }
    
    object SplitGeneratorConfig extends scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig] {
      implicit def messageCompanion: scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig] = this
      def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig = {
        var __splitStrategyClsPath: _root_.scala.Predef.String = ""
        val __splitStrategyArgs: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, _root_.scala.Predef.String), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, _root_.scala.Predef.String]
        var __assignerClsPath: _root_.scala.Predef.String = ""
        val __assignerArgs: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, _root_.scala.Predef.String), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, _root_.scala.Predef.String]
        var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __splitStrategyClsPath = _input__.readStringRequireUtf8()
            case 18 =>
              __splitStrategyArgs += snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig._typemapper_splitStrategyArgs.toCustom(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig.SplitStrategyArgsEntry](_input__))
            case 26 =>
              __assignerClsPath = _input__.readStringRequireUtf8()
            case 34 =>
              __assignerArgs += snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig._typemapper_assignerArgs.toCustom(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig.AssignerArgsEntry](_input__))
            case tag =>
              if (_unknownFields__ == null) {
                _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
              }
              _unknownFields__.parseField(tag, _input__)
          }
        }
        snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig(
            splitStrategyClsPath = __splitStrategyClsPath,
            splitStrategyArgs = __splitStrategyArgs.result(),
            assignerClsPath = __assignerClsPath,
            assignerArgs = __assignerArgs.result(),
            unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
        )
      }
      implicit def messageReads: _root_.scalapb.descriptors.Reads[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig] = _root_.scalapb.descriptors.Reads{
        case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
          _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
          snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig(
            splitStrategyClsPath = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
            splitStrategyArgs = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig.SplitStrategyArgsEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig._typemapper_splitStrategyArgs.toCustom(_)).toMap,
            assignerClsPath = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
            assignerArgs = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig.AssignerArgsEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig._typemapper_assignerArgs.toCustom(_)).toMap
          )
        case _ => throw new RuntimeException("Expected PMessage")
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.javaDescriptor.getNestedTypes().get(2)
      def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.scalaDescriptor.nestedMessages(2)
      def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
        var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
        (__number: @_root_.scala.unchecked) match {
          case 2 => __out = snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig.SplitStrategyArgsEntry
          case 4 => __out = snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig.AssignerArgsEntry
        }
        __out
      }
      lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
        Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
          _root_.snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig.SplitStrategyArgsEntry,
          _root_.snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig.AssignerArgsEntry
        )
      def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      lazy val defaultInstance = snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig(
        splitStrategyClsPath = "",
        splitStrategyArgs = _root_.scala.collection.immutable.Map.empty,
        assignerClsPath = "",
        assignerArgs = _root_.scala.collection.immutable.Map.empty
      )
      @SerialVersionUID(0L)
      final case class SplitStrategyArgsEntry(
          key: _root_.scala.Predef.String = "",
          value: _root_.scala.Predef.String = "",
          unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
          ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[SplitStrategyArgsEntry] {
          @transient
          private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
          private[this] def __computeSerializedSize(): _root_.scala.Int = {
            var __size = 0
            
            {
              val __value = key
              if (!__value.isEmpty) {
                __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
              }
            };
            
            {
              val __value = value
              if (!__value.isEmpty) {
                __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
              }
            };
            __size += unknownFields.serializedSize
            __size
          }
          override def serializedSize: _root_.scala.Int = {
            var __size = __serializedSizeMemoized
            if (__size == 0) {
              __size = __computeSerializedSize() + 1
              __serializedSizeMemoized = __size
            }
            __size - 1
            
          }
          def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
            {
              val __v = key
              if (!__v.isEmpty) {
                _output__.writeString(1, __v)
              }
            };
            {
              val __v = value
              if (!__v.isEmpty) {
                _output__.writeString(2, __v)
              }
            };
            unknownFields.writeTo(_output__)
          }
          def withKey(__v: _root_.scala.Predef.String): SplitStrategyArgsEntry = copy(key = __v)
          def withValue(__v: _root_.scala.Predef.String): SplitStrategyArgsEntry = copy(value = __v)
          def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
          def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
          def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
            (__fieldNumber: @_root_.scala.unchecked) match {
              case 1 => {
                val __t = key
                if (__t != "") __t else null
              }
              case 2 => {
                val __t = value
                if (__t != "") __t else null
              }
            }
          }
          def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
            _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
            (__field.number: @_root_.scala.unchecked) match {
              case 1 => _root_.scalapb.descriptors.PString(key)
              case 2 => _root_.scalapb.descriptors.PString(value)
            }
          }
          def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
          def companion: snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig.SplitStrategyArgsEntry.type = snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig.SplitStrategyArgsEntry
          // @@protoc_insertion_point(GeneratedMessage[snapchat.research.gbml.GbmlConfig.DatasetConfig.SplitGeneratorConfig.SplitStrategyArgsEntry])
      }
      
      object SplitStrategyArgsEntry extends scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig.SplitStrategyArgsEntry] {
        implicit def messageCompanion: scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig.SplitStrategyArgsEntry] = this
        def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig.SplitStrategyArgsEntry = {
          var __key: _root_.scala.Predef.String = ""
          var __value: _root_.scala.Predef.String = ""
          var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
          var _done__ = false
          while (!_done__) {
            val _tag__ = _input__.readTag()
            _tag__ match {
              case 0 => _done__ = true
              case 10 =>
                __key = _input__.readStringRequireUtf8()
              case 18 =>
                __value = _input__.readStringRequireUtf8()
              case tag =>
                if (_unknownFields__ == null) {
                  _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
                }
                _unknownFields__.parseField(tag, _input__)
            }
          }
          snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig.SplitStrategyArgsEntry(
              key = __key,
              value = __value,
              unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
          )
        }
        implicit def messageReads: _root_.scalapb.descriptors.Reads[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig.SplitStrategyArgsEntry] = _root_.scalapb.descriptors.Reads{
          case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
            _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
            snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig.SplitStrategyArgsEntry(
              key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
              value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
            )
          case _ => throw new RuntimeException("Expected PMessage")
        }
        def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig.javaDescriptor.getNestedTypes().get(0)
        def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig.scalaDescriptor.nestedMessages(0)
        def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
        lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
        def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
        lazy val defaultInstance = snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig.SplitStrategyArgsEntry(
          key = "",
          value = ""
        )
        implicit class SplitStrategyArgsEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig.SplitStrategyArgsEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig.SplitStrategyArgsEntry](_l) {
          def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
          def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.value)((c_, f_) => c_.copy(value = f_))
        }
        final val KEY_FIELD_NUMBER = 1
        final val VALUE_FIELD_NUMBER = 2
        @transient
        implicit val keyValueMapper: _root_.scalapb.TypeMapper[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig.SplitStrategyArgsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)] =
          _root_.scalapb.TypeMapper[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig.SplitStrategyArgsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)](__m => (__m.key, __m.value))(__p => snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig.SplitStrategyArgsEntry(__p._1, __p._2))
        def of(
          key: _root_.scala.Predef.String,
          value: _root_.scala.Predef.String
        ): _root_.snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig.SplitStrategyArgsEntry = _root_.snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig.SplitStrategyArgsEntry(
          key,
          value
        )
        // @@protoc_insertion_point(GeneratedMessageCompanion[snapchat.research.gbml.GbmlConfig.DatasetConfig.SplitGeneratorConfig.SplitStrategyArgsEntry])
      }
      
      @SerialVersionUID(0L)
      final case class AssignerArgsEntry(
          key: _root_.scala.Predef.String = "",
          value: _root_.scala.Predef.String = "",
          unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
          ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[AssignerArgsEntry] {
          @transient
          private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
          private[this] def __computeSerializedSize(): _root_.scala.Int = {
            var __size = 0
            
            {
              val __value = key
              if (!__value.isEmpty) {
                __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
              }
            };
            
            {
              val __value = value
              if (!__value.isEmpty) {
                __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
              }
            };
            __size += unknownFields.serializedSize
            __size
          }
          override def serializedSize: _root_.scala.Int = {
            var __size = __serializedSizeMemoized
            if (__size == 0) {
              __size = __computeSerializedSize() + 1
              __serializedSizeMemoized = __size
            }
            __size - 1
            
          }
          def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
            {
              val __v = key
              if (!__v.isEmpty) {
                _output__.writeString(1, __v)
              }
            };
            {
              val __v = value
              if (!__v.isEmpty) {
                _output__.writeString(2, __v)
              }
            };
            unknownFields.writeTo(_output__)
          }
          def withKey(__v: _root_.scala.Predef.String): AssignerArgsEntry = copy(key = __v)
          def withValue(__v: _root_.scala.Predef.String): AssignerArgsEntry = copy(value = __v)
          def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
          def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
          def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
            (__fieldNumber: @_root_.scala.unchecked) match {
              case 1 => {
                val __t = key
                if (__t != "") __t else null
              }
              case 2 => {
                val __t = value
                if (__t != "") __t else null
              }
            }
          }
          def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
            _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
            (__field.number: @_root_.scala.unchecked) match {
              case 1 => _root_.scalapb.descriptors.PString(key)
              case 2 => _root_.scalapb.descriptors.PString(value)
            }
          }
          def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
          def companion: snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig.AssignerArgsEntry.type = snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig.AssignerArgsEntry
          // @@protoc_insertion_point(GeneratedMessage[snapchat.research.gbml.GbmlConfig.DatasetConfig.SplitGeneratorConfig.AssignerArgsEntry])
      }
      
      object AssignerArgsEntry extends scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig.AssignerArgsEntry] {
        implicit def messageCompanion: scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig.AssignerArgsEntry] = this
        def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig.AssignerArgsEntry = {
          var __key: _root_.scala.Predef.String = ""
          var __value: _root_.scala.Predef.String = ""
          var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
          var _done__ = false
          while (!_done__) {
            val _tag__ = _input__.readTag()
            _tag__ match {
              case 0 => _done__ = true
              case 10 =>
                __key = _input__.readStringRequireUtf8()
              case 18 =>
                __value = _input__.readStringRequireUtf8()
              case tag =>
                if (_unknownFields__ == null) {
                  _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
                }
                _unknownFields__.parseField(tag, _input__)
            }
          }
          snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig.AssignerArgsEntry(
              key = __key,
              value = __value,
              unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
          )
        }
        implicit def messageReads: _root_.scalapb.descriptors.Reads[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig.AssignerArgsEntry] = _root_.scalapb.descriptors.Reads{
          case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
            _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
            snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig.AssignerArgsEntry(
              key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
              value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
            )
          case _ => throw new RuntimeException("Expected PMessage")
        }
        def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig.javaDescriptor.getNestedTypes().get(1)
        def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig.scalaDescriptor.nestedMessages(1)
        def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
        lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
        def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
        lazy val defaultInstance = snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig.AssignerArgsEntry(
          key = "",
          value = ""
        )
        implicit class AssignerArgsEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig.AssignerArgsEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig.AssignerArgsEntry](_l) {
          def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
          def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.value)((c_, f_) => c_.copy(value = f_))
        }
        final val KEY_FIELD_NUMBER = 1
        final val VALUE_FIELD_NUMBER = 2
        @transient
        implicit val keyValueMapper: _root_.scalapb.TypeMapper[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig.AssignerArgsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)] =
          _root_.scalapb.TypeMapper[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig.AssignerArgsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)](__m => (__m.key, __m.value))(__p => snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig.AssignerArgsEntry(__p._1, __p._2))
        def of(
          key: _root_.scala.Predef.String,
          value: _root_.scala.Predef.String
        ): _root_.snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig.AssignerArgsEntry = _root_.snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig.AssignerArgsEntry(
          key,
          value
        )
        // @@protoc_insertion_point(GeneratedMessageCompanion[snapchat.research.gbml.GbmlConfig.DatasetConfig.SplitGeneratorConfig.AssignerArgsEntry])
      }
      
      implicit class SplitGeneratorConfigLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig](_l) {
        def splitStrategyClsPath: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.splitStrategyClsPath)((c_, f_) => c_.copy(splitStrategyClsPath = f_))
        def splitStrategyArgs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]] = field(_.splitStrategyArgs)((c_, f_) => c_.copy(splitStrategyArgs = f_))
        def assignerClsPath: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.assignerClsPath)((c_, f_) => c_.copy(assignerClsPath = f_))
        def assignerArgs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]] = field(_.assignerArgs)((c_, f_) => c_.copy(assignerArgs = f_))
      }
      final val SPLIT_STRATEGY_CLS_PATH_FIELD_NUMBER = 1
      final val SPLIT_STRATEGY_ARGS_FIELD_NUMBER = 2
      final val ASSIGNER_CLS_PATH_FIELD_NUMBER = 3
      final val ASSIGNER_ARGS_FIELD_NUMBER = 4
      @transient
      private[gbml_config] val _typemapper_splitStrategyArgs: _root_.scalapb.TypeMapper[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig.SplitStrategyArgsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)] = implicitly[_root_.scalapb.TypeMapper[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig.SplitStrategyArgsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)]]
      @transient
      private[gbml_config] val _typemapper_assignerArgs: _root_.scalapb.TypeMapper[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig.AssignerArgsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)] = implicitly[_root_.scalapb.TypeMapper[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig.AssignerArgsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)]]
      def of(
        splitStrategyClsPath: _root_.scala.Predef.String,
        splitStrategyArgs: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String],
        assignerClsPath: _root_.scala.Predef.String,
        assignerArgs: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]
      ): _root_.snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig = _root_.snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig(
        splitStrategyClsPath,
        splitStrategyArgs,
        assignerClsPath,
        assignerArgs
      )
      // @@protoc_insertion_point(GeneratedMessageCompanion[snapchat.research.gbml.GbmlConfig.DatasetConfig.SplitGeneratorConfig])
    }
    
    implicit class DatasetConfigLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig](_l) {
      def dataPreprocessorConfig: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig] = field(_.getDataPreprocessorConfig)((c_, f_) => c_.copy(dataPreprocessorConfig = Option(f_)))
      def optionalDataPreprocessorConfig: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig]] = field(_.dataPreprocessorConfig)((c_, f_) => c_.copy(dataPreprocessorConfig = f_))
      def subgraphSamplerConfig: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig] = field(_.getSubgraphSamplerConfig)((c_, f_) => c_.copy(subgraphSamplerConfig = Option(f_)))
      def optionalSubgraphSamplerConfig: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig]] = field(_.subgraphSamplerConfig)((c_, f_) => c_.copy(subgraphSamplerConfig = f_))
      def splitGeneratorConfig: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig] = field(_.getSplitGeneratorConfig)((c_, f_) => c_.copy(splitGeneratorConfig = Option(f_)))
      def optionalSplitGeneratorConfig: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig]] = field(_.splitGeneratorConfig)((c_, f_) => c_.copy(splitGeneratorConfig = f_))
    }
    final val DATA_PREPROCESSOR_CONFIG_FIELD_NUMBER = 1
    final val SUBGRAPH_SAMPLER_CONFIG_FIELD_NUMBER = 2
    final val SPLIT_GENERATOR_CONFIG_FIELD_NUMBER = 3
    def of(
      dataPreprocessorConfig: _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.DataPreprocessorConfig],
      subgraphSamplerConfig: _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SubgraphSamplerConfig],
      splitGeneratorConfig: _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig.SplitGeneratorConfig]
    ): _root_.snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig = _root_.snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig(
      dataPreprocessorConfig,
      subgraphSamplerConfig,
      splitGeneratorConfig
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[snapchat.research.gbml.GbmlConfig.DatasetConfig])
  }
  
  /** Generic Configuration for a GraphDB connection.
    *
    * @param graphDbIngestionClsPath
    *   Python class path pointing to user-written 
    *   `BaseIngestion`` class definition. e.g. `my.team.graph_db.BaseInjectionImpl`.
    *   This class is currently, as an implementation detail, used for injestion only.
    *   We document this *purely* for information purposes and may change the implementation at any time.
    * @param graphDbIngestionArgs
    *   Arguments to instantiate concrete BaseIngestion instance with.
    * @param graphDbArgs
    *   General arguments required for graphDB (graph space, port, etc.)
    *   These are passed to both the Python and Scala implementations.
    * @param graphDbSamplerConfig
    *   If provided, then an implementation of a `DBClient[DBResult]` Scala class
    *   for a GraphDB.
    *   Intended to be used to inject specific implementations at runtime.
    *   The object constructed from this is currently, as an implementation detail, used for sampling only.
    *   We document this *purely* for information purposes and may change the implementation at any time.
    */
  @SerialVersionUID(0L)
  final case class GraphDBConfig(
      graphDbIngestionClsPath: _root_.scala.Predef.String = "",
      graphDbIngestionArgs: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String] = _root_.scala.collection.immutable.Map.empty,
      graphDbArgs: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String] = _root_.scala.collection.immutable.Map.empty,
      graphDbSamplerConfig: _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDBServiceConfig] = _root_.scala.None,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[GraphDBConfig] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = graphDbIngestionClsPath
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        graphDbIngestionArgs.foreach { __item =>
          val __value = snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig._typemapper_graphDbIngestionArgs.toBase(__item)
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
        graphDbArgs.foreach { __item =>
          val __value = snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig._typemapper_graphDbArgs.toBase(__item)
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
        if (graphDbSamplerConfig.isDefined) {
          val __value = graphDbSamplerConfig.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = graphDbIngestionClsPath
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        graphDbIngestionArgs.foreach { __v =>
          val __m = snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig._typemapper_graphDbIngestionArgs.toBase(__v)
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        graphDbArgs.foreach { __v =>
          val __m = snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig._typemapper_graphDbArgs.toBase(__v)
          _output__.writeTag(3, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        graphDbSamplerConfig.foreach { __v =>
          val __m = __v
          _output__.writeTag(4, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def withGraphDbIngestionClsPath(__v: _root_.scala.Predef.String): GraphDBConfig = copy(graphDbIngestionClsPath = __v)
      def clearGraphDbIngestionArgs = copy(graphDbIngestionArgs = _root_.scala.collection.immutable.Map.empty)
      def addGraphDbIngestionArgs(__vs: (_root_.scala.Predef.String, _root_.scala.Predef.String) *): GraphDBConfig = addAllGraphDbIngestionArgs(__vs)
      def addAllGraphDbIngestionArgs(__vs: Iterable[(_root_.scala.Predef.String, _root_.scala.Predef.String)]): GraphDBConfig = copy(graphDbIngestionArgs = graphDbIngestionArgs ++ __vs)
      def withGraphDbIngestionArgs(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]): GraphDBConfig = copy(graphDbIngestionArgs = __v)
      def clearGraphDbArgs = copy(graphDbArgs = _root_.scala.collection.immutable.Map.empty)
      def addGraphDbArgs(__vs: (_root_.scala.Predef.String, _root_.scala.Predef.String) *): GraphDBConfig = addAllGraphDbArgs(__vs)
      def addAllGraphDbArgs(__vs: Iterable[(_root_.scala.Predef.String, _root_.scala.Predef.String)]): GraphDBConfig = copy(graphDbArgs = graphDbArgs ++ __vs)
      def withGraphDbArgs(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]): GraphDBConfig = copy(graphDbArgs = __v)
      def getGraphDbSamplerConfig: snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDBServiceConfig = graphDbSamplerConfig.getOrElse(snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDBServiceConfig.defaultInstance)
      def clearGraphDbSamplerConfig: GraphDBConfig = copy(graphDbSamplerConfig = _root_.scala.None)
      def withGraphDbSamplerConfig(__v: snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDBServiceConfig): GraphDBConfig = copy(graphDbSamplerConfig = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = graphDbIngestionClsPath
            if (__t != "") __t else null
          }
          case 2 => graphDbIngestionArgs.iterator.map(snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig._typemapper_graphDbIngestionArgs.toBase(_)).toSeq
          case 3 => graphDbArgs.iterator.map(snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig._typemapper_graphDbArgs.toBase(_)).toSeq
          case 4 => graphDbSamplerConfig.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(graphDbIngestionClsPath)
          case 2 => _root_.scalapb.descriptors.PRepeated(graphDbIngestionArgs.iterator.map(snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig._typemapper_graphDbIngestionArgs.toBase(_).toPMessage).toVector)
          case 3 => _root_.scalapb.descriptors.PRepeated(graphDbArgs.iterator.map(snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig._typemapper_graphDbArgs.toBase(_).toPMessage).toVector)
          case 4 => graphDbSamplerConfig.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.type = snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig
      // @@protoc_insertion_point(GeneratedMessage[snapchat.research.gbml.GbmlConfig.GraphDBConfig])
  }
  
  object GraphDBConfig extends scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig = {
      var __graphDbIngestionClsPath: _root_.scala.Predef.String = ""
      val __graphDbIngestionArgs: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, _root_.scala.Predef.String), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, _root_.scala.Predef.String]
      val __graphDbArgs: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, _root_.scala.Predef.String), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, _root_.scala.Predef.String]
      var __graphDbSamplerConfig: _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDBServiceConfig] = _root_.scala.None
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __graphDbIngestionClsPath = _input__.readStringRequireUtf8()
          case 18 =>
            __graphDbIngestionArgs += snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig._typemapper_graphDbIngestionArgs.toCustom(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDbIngestionArgsEntry](_input__))
          case 26 =>
            __graphDbArgs += snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig._typemapper_graphDbArgs.toCustom(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDbArgsEntry](_input__))
          case 34 =>
            __graphDbSamplerConfig = Option(__graphDbSamplerConfig.fold(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDBServiceConfig](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig(
          graphDbIngestionClsPath = __graphDbIngestionClsPath,
          graphDbIngestionArgs = __graphDbIngestionArgs.result(),
          graphDbArgs = __graphDbArgs.result(),
          graphDbSamplerConfig = __graphDbSamplerConfig,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig(
          graphDbIngestionClsPath = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          graphDbIngestionArgs = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDbIngestionArgsEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig._typemapper_graphDbIngestionArgs.toCustom(_)).toMap,
          graphDbArgs = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDbArgsEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig._typemapper_graphDbArgs.toCustom(_)).toMap,
          graphDbSamplerConfig = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDBServiceConfig]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.javaDescriptor.getNestedTypes().get(3)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.scalaDescriptor.nestedMessages(3)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDbIngestionArgsEntry
        case 3 => __out = snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDbArgsEntry
        case 4 => __out = snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDBServiceConfig
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
      Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
        _root_.snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDbIngestionArgsEntry,
        _root_.snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDbArgsEntry,
        _root_.snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDBServiceConfig
      )
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig(
      graphDbIngestionClsPath = "",
      graphDbIngestionArgs = _root_.scala.collection.immutable.Map.empty,
      graphDbArgs = _root_.scala.collection.immutable.Map.empty,
      graphDbSamplerConfig = _root_.scala.None
    )
    @SerialVersionUID(0L)
    final case class GraphDbIngestionArgsEntry(
        key: _root_.scala.Predef.String = "",
        value: _root_.scala.Predef.String = "",
        unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
        ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[GraphDbIngestionArgsEntry] {
        @transient
        private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
        private[this] def __computeSerializedSize(): _root_.scala.Int = {
          var __size = 0
          
          {
            val __value = key
            if (!__value.isEmpty) {
              __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
            }
          };
          
          {
            val __value = value
            if (!__value.isEmpty) {
              __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
            }
          };
          __size += unknownFields.serializedSize
          __size
        }
        override def serializedSize: _root_.scala.Int = {
          var __size = __serializedSizeMemoized
          if (__size == 0) {
            __size = __computeSerializedSize() + 1
            __serializedSizeMemoized = __size
          }
          __size - 1
          
        }
        def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
          {
            val __v = key
            if (!__v.isEmpty) {
              _output__.writeString(1, __v)
            }
          };
          {
            val __v = value
            if (!__v.isEmpty) {
              _output__.writeString(2, __v)
            }
          };
          unknownFields.writeTo(_output__)
        }
        def withKey(__v: _root_.scala.Predef.String): GraphDbIngestionArgsEntry = copy(key = __v)
        def withValue(__v: _root_.scala.Predef.String): GraphDbIngestionArgsEntry = copy(value = __v)
        def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
        def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
        def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
          (__fieldNumber: @_root_.scala.unchecked) match {
            case 1 => {
              val __t = key
              if (__t != "") __t else null
            }
            case 2 => {
              val __t = value
              if (__t != "") __t else null
            }
          }
        }
        def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
          _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
          (__field.number: @_root_.scala.unchecked) match {
            case 1 => _root_.scalapb.descriptors.PString(key)
            case 2 => _root_.scalapb.descriptors.PString(value)
          }
        }
        def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
        def companion: snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDbIngestionArgsEntry.type = snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDbIngestionArgsEntry
        // @@protoc_insertion_point(GeneratedMessage[snapchat.research.gbml.GbmlConfig.GraphDBConfig.GraphDbIngestionArgsEntry])
    }
    
    object GraphDbIngestionArgsEntry extends scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDbIngestionArgsEntry] {
      implicit def messageCompanion: scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDbIngestionArgsEntry] = this
      def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDbIngestionArgsEntry = {
        var __key: _root_.scala.Predef.String = ""
        var __value: _root_.scala.Predef.String = ""
        var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __key = _input__.readStringRequireUtf8()
            case 18 =>
              __value = _input__.readStringRequireUtf8()
            case tag =>
              if (_unknownFields__ == null) {
                _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
              }
              _unknownFields__.parseField(tag, _input__)
          }
        }
        snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDbIngestionArgsEntry(
            key = __key,
            value = __value,
            unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
        )
      }
      implicit def messageReads: _root_.scalapb.descriptors.Reads[snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDbIngestionArgsEntry] = _root_.scalapb.descriptors.Reads{
        case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
          _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
          snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDbIngestionArgsEntry(
            key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
            value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
          )
        case _ => throw new RuntimeException("Expected PMessage")
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.javaDescriptor.getNestedTypes().get(0)
      def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.scalaDescriptor.nestedMessages(0)
      def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      lazy val defaultInstance = snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDbIngestionArgsEntry(
        key = "",
        value = ""
      )
      implicit class GraphDbIngestionArgsEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDbIngestionArgsEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDbIngestionArgsEntry](_l) {
        def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
        def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.value)((c_, f_) => c_.copy(value = f_))
      }
      final val KEY_FIELD_NUMBER = 1
      final val VALUE_FIELD_NUMBER = 2
      @transient
      implicit val keyValueMapper: _root_.scalapb.TypeMapper[snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDbIngestionArgsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)] =
        _root_.scalapb.TypeMapper[snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDbIngestionArgsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)](__m => (__m.key, __m.value))(__p => snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDbIngestionArgsEntry(__p._1, __p._2))
      def of(
        key: _root_.scala.Predef.String,
        value: _root_.scala.Predef.String
      ): _root_.snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDbIngestionArgsEntry = _root_.snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDbIngestionArgsEntry(
        key,
        value
      )
      // @@protoc_insertion_point(GeneratedMessageCompanion[snapchat.research.gbml.GbmlConfig.GraphDBConfig.GraphDbIngestionArgsEntry])
    }
    
    @SerialVersionUID(0L)
    final case class GraphDbArgsEntry(
        key: _root_.scala.Predef.String = "",
        value: _root_.scala.Predef.String = "",
        unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
        ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[GraphDbArgsEntry] {
        @transient
        private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
        private[this] def __computeSerializedSize(): _root_.scala.Int = {
          var __size = 0
          
          {
            val __value = key
            if (!__value.isEmpty) {
              __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
            }
          };
          
          {
            val __value = value
            if (!__value.isEmpty) {
              __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
            }
          };
          __size += unknownFields.serializedSize
          __size
        }
        override def serializedSize: _root_.scala.Int = {
          var __size = __serializedSizeMemoized
          if (__size == 0) {
            __size = __computeSerializedSize() + 1
            __serializedSizeMemoized = __size
          }
          __size - 1
          
        }
        def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
          {
            val __v = key
            if (!__v.isEmpty) {
              _output__.writeString(1, __v)
            }
          };
          {
            val __v = value
            if (!__v.isEmpty) {
              _output__.writeString(2, __v)
            }
          };
          unknownFields.writeTo(_output__)
        }
        def withKey(__v: _root_.scala.Predef.String): GraphDbArgsEntry = copy(key = __v)
        def withValue(__v: _root_.scala.Predef.String): GraphDbArgsEntry = copy(value = __v)
        def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
        def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
        def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
          (__fieldNumber: @_root_.scala.unchecked) match {
            case 1 => {
              val __t = key
              if (__t != "") __t else null
            }
            case 2 => {
              val __t = value
              if (__t != "") __t else null
            }
          }
        }
        def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
          _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
          (__field.number: @_root_.scala.unchecked) match {
            case 1 => _root_.scalapb.descriptors.PString(key)
            case 2 => _root_.scalapb.descriptors.PString(value)
          }
        }
        def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
        def companion: snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDbArgsEntry.type = snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDbArgsEntry
        // @@protoc_insertion_point(GeneratedMessage[snapchat.research.gbml.GbmlConfig.GraphDBConfig.GraphDbArgsEntry])
    }
    
    object GraphDbArgsEntry extends scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDbArgsEntry] {
      implicit def messageCompanion: scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDbArgsEntry] = this
      def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDbArgsEntry = {
        var __key: _root_.scala.Predef.String = ""
        var __value: _root_.scala.Predef.String = ""
        var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __key = _input__.readStringRequireUtf8()
            case 18 =>
              __value = _input__.readStringRequireUtf8()
            case tag =>
              if (_unknownFields__ == null) {
                _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
              }
              _unknownFields__.parseField(tag, _input__)
          }
        }
        snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDbArgsEntry(
            key = __key,
            value = __value,
            unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
        )
      }
      implicit def messageReads: _root_.scalapb.descriptors.Reads[snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDbArgsEntry] = _root_.scalapb.descriptors.Reads{
        case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
          _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
          snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDbArgsEntry(
            key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
            value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
          )
        case _ => throw new RuntimeException("Expected PMessage")
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.javaDescriptor.getNestedTypes().get(1)
      def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.scalaDescriptor.nestedMessages(1)
      def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      lazy val defaultInstance = snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDbArgsEntry(
        key = "",
        value = ""
      )
      implicit class GraphDbArgsEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDbArgsEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDbArgsEntry](_l) {
        def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
        def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.value)((c_, f_) => c_.copy(value = f_))
      }
      final val KEY_FIELD_NUMBER = 1
      final val VALUE_FIELD_NUMBER = 2
      @transient
      implicit val keyValueMapper: _root_.scalapb.TypeMapper[snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDbArgsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)] =
        _root_.scalapb.TypeMapper[snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDbArgsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)](__m => (__m.key, __m.value))(__p => snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDbArgsEntry(__p._1, __p._2))
      def of(
        key: _root_.scala.Predef.String,
        value: _root_.scala.Predef.String
      ): _root_.snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDbArgsEntry = _root_.snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDbArgsEntry(
        key,
        value
      )
      // @@protoc_insertion_point(GeneratedMessageCompanion[snapchat.research.gbml.GbmlConfig.GraphDBConfig.GraphDbArgsEntry])
    }
    
    /** Scala-specific configuration.
      *
      * @param graphDbClientClassPath
      *   Scala absolute class path pointing to an implementation of `DBClient[DBResult]`
      *   e.g. `my.team.graph_db.DBClient`.
      */
    @SerialVersionUID(0L)
    final case class GraphDBServiceConfig(
        graphDbClientClassPath: _root_.scala.Predef.String = "",
        unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
        ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[GraphDBServiceConfig] {
        @transient
        private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
        private[this] def __computeSerializedSize(): _root_.scala.Int = {
          var __size = 0
          
          {
            val __value = graphDbClientClassPath
            if (!__value.isEmpty) {
              __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
            }
          };
          __size += unknownFields.serializedSize
          __size
        }
        override def serializedSize: _root_.scala.Int = {
          var __size = __serializedSizeMemoized
          if (__size == 0) {
            __size = __computeSerializedSize() + 1
            __serializedSizeMemoized = __size
          }
          __size - 1
          
        }
        def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
          {
            val __v = graphDbClientClassPath
            if (!__v.isEmpty) {
              _output__.writeString(1, __v)
            }
          };
          unknownFields.writeTo(_output__)
        }
        def withGraphDbClientClassPath(__v: _root_.scala.Predef.String): GraphDBServiceConfig = copy(graphDbClientClassPath = __v)
        def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
        def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
        def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
          (__fieldNumber: @_root_.scala.unchecked) match {
            case 1 => {
              val __t = graphDbClientClassPath
              if (__t != "") __t else null
            }
          }
        }
        def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
          _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
          (__field.number: @_root_.scala.unchecked) match {
            case 1 => _root_.scalapb.descriptors.PString(graphDbClientClassPath)
          }
        }
        def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
        def companion: snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDBServiceConfig.type = snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDBServiceConfig
        // @@protoc_insertion_point(GeneratedMessage[snapchat.research.gbml.GbmlConfig.GraphDBConfig.GraphDBServiceConfig])
    }
    
    object GraphDBServiceConfig extends scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDBServiceConfig] {
      implicit def messageCompanion: scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDBServiceConfig] = this
      def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDBServiceConfig = {
        var __graphDbClientClassPath: _root_.scala.Predef.String = ""
        var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __graphDbClientClassPath = _input__.readStringRequireUtf8()
            case tag =>
              if (_unknownFields__ == null) {
                _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
              }
              _unknownFields__.parseField(tag, _input__)
          }
        }
        snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDBServiceConfig(
            graphDbClientClassPath = __graphDbClientClassPath,
            unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
        )
      }
      implicit def messageReads: _root_.scalapb.descriptors.Reads[snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDBServiceConfig] = _root_.scalapb.descriptors.Reads{
        case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
          _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
          snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDBServiceConfig(
            graphDbClientClassPath = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
          )
        case _ => throw new RuntimeException("Expected PMessage")
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.javaDescriptor.getNestedTypes().get(2)
      def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.scalaDescriptor.nestedMessages(2)
      def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      lazy val defaultInstance = snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDBServiceConfig(
        graphDbClientClassPath = ""
      )
      implicit class GraphDBServiceConfigLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDBServiceConfig]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDBServiceConfig](_l) {
        def graphDbClientClassPath: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.graphDbClientClassPath)((c_, f_) => c_.copy(graphDbClientClassPath = f_))
      }
      final val GRAPH_DB_CLIENT_CLASS_PATH_FIELD_NUMBER = 1
      def of(
        graphDbClientClassPath: _root_.scala.Predef.String
      ): _root_.snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDBServiceConfig = _root_.snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDBServiceConfig(
        graphDbClientClassPath
      )
      // @@protoc_insertion_point(GeneratedMessageCompanion[snapchat.research.gbml.GbmlConfig.GraphDBConfig.GraphDBServiceConfig])
    }
    
    implicit class GraphDBConfigLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig](_l) {
      def graphDbIngestionClsPath: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.graphDbIngestionClsPath)((c_, f_) => c_.copy(graphDbIngestionClsPath = f_))
      def graphDbIngestionArgs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]] = field(_.graphDbIngestionArgs)((c_, f_) => c_.copy(graphDbIngestionArgs = f_))
      def graphDbArgs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]] = field(_.graphDbArgs)((c_, f_) => c_.copy(graphDbArgs = f_))
      def graphDbSamplerConfig: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDBServiceConfig] = field(_.getGraphDbSamplerConfig)((c_, f_) => c_.copy(graphDbSamplerConfig = Option(f_)))
      def optionalGraphDbSamplerConfig: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDBServiceConfig]] = field(_.graphDbSamplerConfig)((c_, f_) => c_.copy(graphDbSamplerConfig = f_))
    }
    final val GRAPH_DB_INGESTION_CLS_PATH_FIELD_NUMBER = 1
    final val GRAPH_DB_INGESTION_ARGS_FIELD_NUMBER = 2
    final val GRAPH_DB_ARGS_FIELD_NUMBER = 3
    final val GRAPH_DB_SAMPLER_CONFIG_FIELD_NUMBER = 4
    @transient
    private[gbml_config] val _typemapper_graphDbIngestionArgs: _root_.scalapb.TypeMapper[snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDbIngestionArgsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)] = implicitly[_root_.scalapb.TypeMapper[snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDbIngestionArgsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)]]
    @transient
    private[gbml_config] val _typemapper_graphDbArgs: _root_.scalapb.TypeMapper[snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDbArgsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)] = implicitly[_root_.scalapb.TypeMapper[snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDbArgsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)]]
    def of(
      graphDbIngestionClsPath: _root_.scala.Predef.String,
      graphDbIngestionArgs: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String],
      graphDbArgs: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String],
      graphDbSamplerConfig: _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig.GraphDBServiceConfig]
    ): _root_.snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig = _root_.snapchat.research.gbml.gbml_config.GbmlConfig.GraphDBConfig(
      graphDbIngestionClsPath,
      graphDbIngestionArgs,
      graphDbArgs,
      graphDbSamplerConfig
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[snapchat.research.gbml.GbmlConfig.GraphDBConfig])
  }
  
  /** @param trainerClsPath
    *   (deprecated)
    *   Uri pointing to user-written BaseTrainer class definition. Used for the subgraph-sampling-based training process. 
    * @param trainerArgs
    *   Arguments to parameterize training process with.
    * @param shouldLogToTensorboard
    *   Weather to log to tensorboard or not (defaults to false)
    */
  @SerialVersionUID(0L)
  final case class TrainerConfig(
      trainerClsPath: _root_.scala.Predef.String = "",
      trainerArgs: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String] = _root_.scala.collection.immutable.Map.empty,
      executable: snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig.Executable = snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig.Executable.Empty,
      shouldLogToTensorboard: _root_.scala.Boolean = false,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[TrainerConfig] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = trainerClsPath
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        trainerArgs.foreach { __item =>
          val __value = snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig._typemapper_trainerArgs.toBase(__item)
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
        if (executable.clsPath.isDefined) {
          val __value = executable.clsPath.get
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(100, __value)
        };
        if (executable.command.isDefined) {
          val __value = executable.command.get
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(101, __value)
        };
        
        {
          val __value = shouldLogToTensorboard
          if (__value != false) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(12, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = trainerClsPath
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        trainerArgs.foreach { __v =>
          val __m = snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig._typemapper_trainerArgs.toBase(__v)
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        {
          val __v = shouldLogToTensorboard
          if (__v != false) {
            _output__.writeBool(12, __v)
          }
        };
        executable.clsPath.foreach { __v =>
          val __m = __v
          _output__.writeString(100, __m)
        };
        executable.command.foreach { __v =>
          val __m = __v
          _output__.writeString(101, __m)
        };
        unknownFields.writeTo(_output__)
      }
      def withTrainerClsPath(__v: _root_.scala.Predef.String): TrainerConfig = copy(trainerClsPath = __v)
      def clearTrainerArgs = copy(trainerArgs = _root_.scala.collection.immutable.Map.empty)
      def addTrainerArgs(__vs: (_root_.scala.Predef.String, _root_.scala.Predef.String) *): TrainerConfig = addAllTrainerArgs(__vs)
      def addAllTrainerArgs(__vs: Iterable[(_root_.scala.Predef.String, _root_.scala.Predef.String)]): TrainerConfig = copy(trainerArgs = trainerArgs ++ __vs)
      def withTrainerArgs(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]): TrainerConfig = copy(trainerArgs = __v)
      def getClsPath: _root_.scala.Predef.String = executable.clsPath.getOrElse("")
      def withClsPath(__v: _root_.scala.Predef.String): TrainerConfig = copy(executable = snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig.Executable.ClsPath(__v))
      def getCommand: _root_.scala.Predef.String = executable.command.getOrElse("")
      def withCommand(__v: _root_.scala.Predef.String): TrainerConfig = copy(executable = snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig.Executable.Command(__v))
      def withShouldLogToTensorboard(__v: _root_.scala.Boolean): TrainerConfig = copy(shouldLogToTensorboard = __v)
      def clearExecutable: TrainerConfig = copy(executable = snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig.Executable.Empty)
      def withExecutable(__v: snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig.Executable): TrainerConfig = copy(executable = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = trainerClsPath
            if (__t != "") __t else null
          }
          case 2 => trainerArgs.iterator.map(snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig._typemapper_trainerArgs.toBase(_)).toSeq
          case 100 => executable.clsPath.orNull
          case 101 => executable.command.orNull
          case 12 => {
            val __t = shouldLogToTensorboard
            if (__t != false) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(trainerClsPath)
          case 2 => _root_.scalapb.descriptors.PRepeated(trainerArgs.iterator.map(snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig._typemapper_trainerArgs.toBase(_).toPMessage).toVector)
          case 100 => executable.clsPath.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 101 => executable.command.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 12 => _root_.scalapb.descriptors.PBoolean(shouldLogToTensorboard)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig.type = snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig
      // @@protoc_insertion_point(GeneratedMessage[snapchat.research.gbml.GbmlConfig.TrainerConfig])
  }
  
  object TrainerConfig extends scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig = {
      var __trainerClsPath: _root_.scala.Predef.String = ""
      val __trainerArgs: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, _root_.scala.Predef.String), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, _root_.scala.Predef.String]
      var __shouldLogToTensorboard: _root_.scala.Boolean = false
      var __executable: snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig.Executable = snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig.Executable.Empty
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __trainerClsPath = _input__.readStringRequireUtf8()
          case 18 =>
            __trainerArgs += snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig._typemapper_trainerArgs.toCustom(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig.TrainerArgsEntry](_input__))
          case 802 =>
            __executable = snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig.Executable.ClsPath(_input__.readStringRequireUtf8())
          case 810 =>
            __executable = snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig.Executable.Command(_input__.readStringRequireUtf8())
          case 96 =>
            __shouldLogToTensorboard = _input__.readBool()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig(
          trainerClsPath = __trainerClsPath,
          trainerArgs = __trainerArgs.result(),
          shouldLogToTensorboard = __shouldLogToTensorboard,
          executable = __executable,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig(
          trainerClsPath = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          trainerArgs = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig.TrainerArgsEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig._typemapper_trainerArgs.toCustom(_)).toMap,
          shouldLogToTensorboard = __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
          executable = __fieldsMap.get(scalaDescriptor.findFieldByNumber(100).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]).map(snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig.Executable.ClsPath(_))
              .orElse[snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig.Executable](__fieldsMap.get(scalaDescriptor.findFieldByNumber(101).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]).map(snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig.Executable.Command(_)))
              .getOrElse(snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig.Executable.Empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.javaDescriptor.getNestedTypes().get(4)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.scalaDescriptor.nestedMessages(4)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig.TrainerArgsEntry
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
      Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
        _root_.snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig.TrainerArgsEntry
      )
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig(
      trainerClsPath = "",
      trainerArgs = _root_.scala.collection.immutable.Map.empty,
      shouldLogToTensorboard = false,
      executable = snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig.Executable.Empty
    )
    sealed trait Executable extends _root_.scalapb.GeneratedOneof {
      def isEmpty: _root_.scala.Boolean = false
      def isDefined: _root_.scala.Boolean = true
      def isClsPath: _root_.scala.Boolean = false
      def isCommand: _root_.scala.Boolean = false
      def clsPath: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
      def command: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
    }
    object Executable {
      @SerialVersionUID(0L)
      case object Empty extends snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig.Executable {
        type ValueType = _root_.scala.Nothing
        override def isEmpty: _root_.scala.Boolean = true
        override def isDefined: _root_.scala.Boolean = false
        override def number: _root_.scala.Int = 0
        override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
      }
    
      @SerialVersionUID(0L)
      final case class ClsPath(value: _root_.scala.Predef.String) extends snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig.Executable {
        type ValueType = _root_.scala.Predef.String
        override def isClsPath: _root_.scala.Boolean = true
        override def clsPath: _root_.scala.Option[_root_.scala.Predef.String] = Some(value)
        override def number: _root_.scala.Int = 100
      }
      @SerialVersionUID(0L)
      final case class Command(value: _root_.scala.Predef.String) extends snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig.Executable {
        type ValueType = _root_.scala.Predef.String
        override def isCommand: _root_.scala.Boolean = true
        override def command: _root_.scala.Option[_root_.scala.Predef.String] = Some(value)
        override def number: _root_.scala.Int = 101
      }
    }
    @SerialVersionUID(0L)
    final case class TrainerArgsEntry(
        key: _root_.scala.Predef.String = "",
        value: _root_.scala.Predef.String = "",
        unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
        ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[TrainerArgsEntry] {
        @transient
        private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
        private[this] def __computeSerializedSize(): _root_.scala.Int = {
          var __size = 0
          
          {
            val __value = key
            if (!__value.isEmpty) {
              __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
            }
          };
          
          {
            val __value = value
            if (!__value.isEmpty) {
              __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
            }
          };
          __size += unknownFields.serializedSize
          __size
        }
        override def serializedSize: _root_.scala.Int = {
          var __size = __serializedSizeMemoized
          if (__size == 0) {
            __size = __computeSerializedSize() + 1
            __serializedSizeMemoized = __size
          }
          __size - 1
          
        }
        def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
          {
            val __v = key
            if (!__v.isEmpty) {
              _output__.writeString(1, __v)
            }
          };
          {
            val __v = value
            if (!__v.isEmpty) {
              _output__.writeString(2, __v)
            }
          };
          unknownFields.writeTo(_output__)
        }
        def withKey(__v: _root_.scala.Predef.String): TrainerArgsEntry = copy(key = __v)
        def withValue(__v: _root_.scala.Predef.String): TrainerArgsEntry = copy(value = __v)
        def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
        def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
        def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
          (__fieldNumber: @_root_.scala.unchecked) match {
            case 1 => {
              val __t = key
              if (__t != "") __t else null
            }
            case 2 => {
              val __t = value
              if (__t != "") __t else null
            }
          }
        }
        def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
          _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
          (__field.number: @_root_.scala.unchecked) match {
            case 1 => _root_.scalapb.descriptors.PString(key)
            case 2 => _root_.scalapb.descriptors.PString(value)
          }
        }
        def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
        def companion: snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig.TrainerArgsEntry.type = snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig.TrainerArgsEntry
        // @@protoc_insertion_point(GeneratedMessage[snapchat.research.gbml.GbmlConfig.TrainerConfig.TrainerArgsEntry])
    }
    
    object TrainerArgsEntry extends scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig.TrainerArgsEntry] {
      implicit def messageCompanion: scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig.TrainerArgsEntry] = this
      def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig.TrainerArgsEntry = {
        var __key: _root_.scala.Predef.String = ""
        var __value: _root_.scala.Predef.String = ""
        var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __key = _input__.readStringRequireUtf8()
            case 18 =>
              __value = _input__.readStringRequireUtf8()
            case tag =>
              if (_unknownFields__ == null) {
                _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
              }
              _unknownFields__.parseField(tag, _input__)
          }
        }
        snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig.TrainerArgsEntry(
            key = __key,
            value = __value,
            unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
        )
      }
      implicit def messageReads: _root_.scalapb.descriptors.Reads[snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig.TrainerArgsEntry] = _root_.scalapb.descriptors.Reads{
        case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
          _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
          snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig.TrainerArgsEntry(
            key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
            value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
          )
        case _ => throw new RuntimeException("Expected PMessage")
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig.javaDescriptor.getNestedTypes().get(0)
      def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig.scalaDescriptor.nestedMessages(0)
      def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      lazy val defaultInstance = snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig.TrainerArgsEntry(
        key = "",
        value = ""
      )
      implicit class TrainerArgsEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig.TrainerArgsEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig.TrainerArgsEntry](_l) {
        def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
        def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.value)((c_, f_) => c_.copy(value = f_))
      }
      final val KEY_FIELD_NUMBER = 1
      final val VALUE_FIELD_NUMBER = 2
      @transient
      implicit val keyValueMapper: _root_.scalapb.TypeMapper[snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig.TrainerArgsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)] =
        _root_.scalapb.TypeMapper[snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig.TrainerArgsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)](__m => (__m.key, __m.value))(__p => snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig.TrainerArgsEntry(__p._1, __p._2))
      def of(
        key: _root_.scala.Predef.String,
        value: _root_.scala.Predef.String
      ): _root_.snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig.TrainerArgsEntry = _root_.snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig.TrainerArgsEntry(
        key,
        value
      )
      // @@protoc_insertion_point(GeneratedMessageCompanion[snapchat.research.gbml.GbmlConfig.TrainerConfig.TrainerArgsEntry])
    }
    
    implicit class TrainerConfigLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig](_l) {
      def trainerClsPath: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.trainerClsPath)((c_, f_) => c_.copy(trainerClsPath = f_))
      def trainerArgs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]] = field(_.trainerArgs)((c_, f_) => c_.copy(trainerArgs = f_))
      def clsPath: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getClsPath)((c_, f_) => c_.copy(executable = snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig.Executable.ClsPath(f_)))
      def command: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getCommand)((c_, f_) => c_.copy(executable = snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig.Executable.Command(f_)))
      def shouldLogToTensorboard: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.shouldLogToTensorboard)((c_, f_) => c_.copy(shouldLogToTensorboard = f_))
      def executable: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig.Executable] = field(_.executable)((c_, f_) => c_.copy(executable = f_))
    }
    final val TRAINER_CLS_PATH_FIELD_NUMBER = 1
    final val TRAINER_ARGS_FIELD_NUMBER = 2
    final val CLS_PATH_FIELD_NUMBER = 100
    final val COMMAND_FIELD_NUMBER = 101
    final val SHOULD_LOG_TO_TENSORBOARD_FIELD_NUMBER = 12
    @transient
    private[gbml_config] val _typemapper_trainerArgs: _root_.scalapb.TypeMapper[snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig.TrainerArgsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)] = implicitly[_root_.scalapb.TypeMapper[snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig.TrainerArgsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)]]
    def of(
      trainerClsPath: _root_.scala.Predef.String,
      trainerArgs: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String],
      executable: snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig.Executable,
      shouldLogToTensorboard: _root_.scala.Boolean
    ): _root_.snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig = _root_.snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig(
      trainerClsPath,
      trainerArgs,
      executable,
      shouldLogToTensorboard
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[snapchat.research.gbml.GbmlConfig.TrainerConfig])
  }
  
  /** @param inferencerClsPath
    *   (deprecated)
    *   Path to modeling task spec class path to construct model for inference. Used for the subgraph-sampling-based inference process. 
    * @param inferenceBatchSize
    *   Optional. If set, will be used to batch inference samples to a specific size before call for inference is made
    *   Defaults to setting in python/gigl/src/inference/gnn_inferencer.py
    */
  @SerialVersionUID(0L)
  final case class InferencerConfig(
      inferencerArgs: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String] = _root_.scala.collection.immutable.Map.empty,
      inferencerClsPath: _root_.scala.Predef.String = "",
      executable: snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig.Executable = snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig.Executable.Empty,
      inferenceBatchSize: _root_.scala.Int = 0,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[InferencerConfig] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        inferencerArgs.foreach { __item =>
          val __value = snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig._typemapper_inferencerArgs.toBase(__item)
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
        
        {
          val __value = inferencerClsPath
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
          }
        };
        if (executable.clsPath.isDefined) {
          val __value = executable.clsPath.get
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(100, __value)
        };
        if (executable.command.isDefined) {
          val __value = executable.command.get
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(101, __value)
        };
        
        {
          val __value = inferenceBatchSize
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(5, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        inferencerArgs.foreach { __v =>
          val __m = snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig._typemapper_inferencerArgs.toBase(__v)
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        {
          val __v = inferencerClsPath
          if (!__v.isEmpty) {
            _output__.writeString(2, __v)
          }
        };
        {
          val __v = inferenceBatchSize
          if (__v != 0) {
            _output__.writeUInt32(5, __v)
          }
        };
        executable.clsPath.foreach { __v =>
          val __m = __v
          _output__.writeString(100, __m)
        };
        executable.command.foreach { __v =>
          val __m = __v
          _output__.writeString(101, __m)
        };
        unknownFields.writeTo(_output__)
      }
      def clearInferencerArgs = copy(inferencerArgs = _root_.scala.collection.immutable.Map.empty)
      def addInferencerArgs(__vs: (_root_.scala.Predef.String, _root_.scala.Predef.String) *): InferencerConfig = addAllInferencerArgs(__vs)
      def addAllInferencerArgs(__vs: Iterable[(_root_.scala.Predef.String, _root_.scala.Predef.String)]): InferencerConfig = copy(inferencerArgs = inferencerArgs ++ __vs)
      def withInferencerArgs(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]): InferencerConfig = copy(inferencerArgs = __v)
      def withInferencerClsPath(__v: _root_.scala.Predef.String): InferencerConfig = copy(inferencerClsPath = __v)
      def getClsPath: _root_.scala.Predef.String = executable.clsPath.getOrElse("")
      def withClsPath(__v: _root_.scala.Predef.String): InferencerConfig = copy(executable = snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig.Executable.ClsPath(__v))
      def getCommand: _root_.scala.Predef.String = executable.command.getOrElse("")
      def withCommand(__v: _root_.scala.Predef.String): InferencerConfig = copy(executable = snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig.Executable.Command(__v))
      def withInferenceBatchSize(__v: _root_.scala.Int): InferencerConfig = copy(inferenceBatchSize = __v)
      def clearExecutable: InferencerConfig = copy(executable = snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig.Executable.Empty)
      def withExecutable(__v: snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig.Executable): InferencerConfig = copy(executable = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => inferencerArgs.iterator.map(snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig._typemapper_inferencerArgs.toBase(_)).toSeq
          case 2 => {
            val __t = inferencerClsPath
            if (__t != "") __t else null
          }
          case 100 => executable.clsPath.orNull
          case 101 => executable.command.orNull
          case 5 => {
            val __t = inferenceBatchSize
            if (__t != 0) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PRepeated(inferencerArgs.iterator.map(snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig._typemapper_inferencerArgs.toBase(_).toPMessage).toVector)
          case 2 => _root_.scalapb.descriptors.PString(inferencerClsPath)
          case 100 => executable.clsPath.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 101 => executable.command.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 5 => _root_.scalapb.descriptors.PInt(inferenceBatchSize)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig.type = snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig
      // @@protoc_insertion_point(GeneratedMessage[snapchat.research.gbml.GbmlConfig.InferencerConfig])
  }
  
  object InferencerConfig extends scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig = {
      val __inferencerArgs: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, _root_.scala.Predef.String), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, _root_.scala.Predef.String]
      var __inferencerClsPath: _root_.scala.Predef.String = ""
      var __inferenceBatchSize: _root_.scala.Int = 0
      var __executable: snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig.Executable = snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig.Executable.Empty
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __inferencerArgs += snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig._typemapper_inferencerArgs.toCustom(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig.InferencerArgsEntry](_input__))
          case 18 =>
            __inferencerClsPath = _input__.readStringRequireUtf8()
          case 802 =>
            __executable = snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig.Executable.ClsPath(_input__.readStringRequireUtf8())
          case 810 =>
            __executable = snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig.Executable.Command(_input__.readStringRequireUtf8())
          case 40 =>
            __inferenceBatchSize = _input__.readUInt32()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig(
          inferencerArgs = __inferencerArgs.result(),
          inferencerClsPath = __inferencerClsPath,
          inferenceBatchSize = __inferenceBatchSize,
          executable = __executable,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig(
          inferencerArgs = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig.InferencerArgsEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig._typemapper_inferencerArgs.toCustom(_)).toMap,
          inferencerClsPath = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          inferenceBatchSize = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Int]).getOrElse(0),
          executable = __fieldsMap.get(scalaDescriptor.findFieldByNumber(100).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]).map(snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig.Executable.ClsPath(_))
              .orElse[snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig.Executable](__fieldsMap.get(scalaDescriptor.findFieldByNumber(101).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]).map(snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig.Executable.Command(_)))
              .getOrElse(snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig.Executable.Empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.javaDescriptor.getNestedTypes().get(5)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.scalaDescriptor.nestedMessages(5)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 1 => __out = snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig.InferencerArgsEntry
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
      Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
        _root_.snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig.InferencerArgsEntry
      )
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig(
      inferencerArgs = _root_.scala.collection.immutable.Map.empty,
      inferencerClsPath = "",
      inferenceBatchSize = 0,
      executable = snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig.Executable.Empty
    )
    sealed trait Executable extends _root_.scalapb.GeneratedOneof {
      def isEmpty: _root_.scala.Boolean = false
      def isDefined: _root_.scala.Boolean = true
      def isClsPath: _root_.scala.Boolean = false
      def isCommand: _root_.scala.Boolean = false
      def clsPath: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
      def command: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
    }
    object Executable {
      @SerialVersionUID(0L)
      case object Empty extends snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig.Executable {
        type ValueType = _root_.scala.Nothing
        override def isEmpty: _root_.scala.Boolean = true
        override def isDefined: _root_.scala.Boolean = false
        override def number: _root_.scala.Int = 0
        override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
      }
    
      @SerialVersionUID(0L)
      final case class ClsPath(value: _root_.scala.Predef.String) extends snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig.Executable {
        type ValueType = _root_.scala.Predef.String
        override def isClsPath: _root_.scala.Boolean = true
        override def clsPath: _root_.scala.Option[_root_.scala.Predef.String] = Some(value)
        override def number: _root_.scala.Int = 100
      }
      @SerialVersionUID(0L)
      final case class Command(value: _root_.scala.Predef.String) extends snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig.Executable {
        type ValueType = _root_.scala.Predef.String
        override def isCommand: _root_.scala.Boolean = true
        override def command: _root_.scala.Option[_root_.scala.Predef.String] = Some(value)
        override def number: _root_.scala.Int = 101
      }
    }
    @SerialVersionUID(0L)
    final case class InferencerArgsEntry(
        key: _root_.scala.Predef.String = "",
        value: _root_.scala.Predef.String = "",
        unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
        ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[InferencerArgsEntry] {
        @transient
        private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
        private[this] def __computeSerializedSize(): _root_.scala.Int = {
          var __size = 0
          
          {
            val __value = key
            if (!__value.isEmpty) {
              __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
            }
          };
          
          {
            val __value = value
            if (!__value.isEmpty) {
              __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
            }
          };
          __size += unknownFields.serializedSize
          __size
        }
        override def serializedSize: _root_.scala.Int = {
          var __size = __serializedSizeMemoized
          if (__size == 0) {
            __size = __computeSerializedSize() + 1
            __serializedSizeMemoized = __size
          }
          __size - 1
          
        }
        def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
          {
            val __v = key
            if (!__v.isEmpty) {
              _output__.writeString(1, __v)
            }
          };
          {
            val __v = value
            if (!__v.isEmpty) {
              _output__.writeString(2, __v)
            }
          };
          unknownFields.writeTo(_output__)
        }
        def withKey(__v: _root_.scala.Predef.String): InferencerArgsEntry = copy(key = __v)
        def withValue(__v: _root_.scala.Predef.String): InferencerArgsEntry = copy(value = __v)
        def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
        def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
        def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
          (__fieldNumber: @_root_.scala.unchecked) match {
            case 1 => {
              val __t = key
              if (__t != "") __t else null
            }
            case 2 => {
              val __t = value
              if (__t != "") __t else null
            }
          }
        }
        def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
          _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
          (__field.number: @_root_.scala.unchecked) match {
            case 1 => _root_.scalapb.descriptors.PString(key)
            case 2 => _root_.scalapb.descriptors.PString(value)
          }
        }
        def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
        def companion: snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig.InferencerArgsEntry.type = snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig.InferencerArgsEntry
        // @@protoc_insertion_point(GeneratedMessage[snapchat.research.gbml.GbmlConfig.InferencerConfig.InferencerArgsEntry])
    }
    
    object InferencerArgsEntry extends scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig.InferencerArgsEntry] {
      implicit def messageCompanion: scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig.InferencerArgsEntry] = this
      def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig.InferencerArgsEntry = {
        var __key: _root_.scala.Predef.String = ""
        var __value: _root_.scala.Predef.String = ""
        var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __key = _input__.readStringRequireUtf8()
            case 18 =>
              __value = _input__.readStringRequireUtf8()
            case tag =>
              if (_unknownFields__ == null) {
                _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
              }
              _unknownFields__.parseField(tag, _input__)
          }
        }
        snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig.InferencerArgsEntry(
            key = __key,
            value = __value,
            unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
        )
      }
      implicit def messageReads: _root_.scalapb.descriptors.Reads[snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig.InferencerArgsEntry] = _root_.scalapb.descriptors.Reads{
        case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
          _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
          snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig.InferencerArgsEntry(
            key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
            value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
          )
        case _ => throw new RuntimeException("Expected PMessage")
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig.javaDescriptor.getNestedTypes().get(0)
      def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig.scalaDescriptor.nestedMessages(0)
      def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      lazy val defaultInstance = snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig.InferencerArgsEntry(
        key = "",
        value = ""
      )
      implicit class InferencerArgsEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig.InferencerArgsEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig.InferencerArgsEntry](_l) {
        def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
        def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.value)((c_, f_) => c_.copy(value = f_))
      }
      final val KEY_FIELD_NUMBER = 1
      final val VALUE_FIELD_NUMBER = 2
      @transient
      implicit val keyValueMapper: _root_.scalapb.TypeMapper[snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig.InferencerArgsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)] =
        _root_.scalapb.TypeMapper[snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig.InferencerArgsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)](__m => (__m.key, __m.value))(__p => snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig.InferencerArgsEntry(__p._1, __p._2))
      def of(
        key: _root_.scala.Predef.String,
        value: _root_.scala.Predef.String
      ): _root_.snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig.InferencerArgsEntry = _root_.snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig.InferencerArgsEntry(
        key,
        value
      )
      // @@protoc_insertion_point(GeneratedMessageCompanion[snapchat.research.gbml.GbmlConfig.InferencerConfig.InferencerArgsEntry])
    }
    
    implicit class InferencerConfigLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig](_l) {
      def inferencerArgs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]] = field(_.inferencerArgs)((c_, f_) => c_.copy(inferencerArgs = f_))
      def inferencerClsPath: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.inferencerClsPath)((c_, f_) => c_.copy(inferencerClsPath = f_))
      def clsPath: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getClsPath)((c_, f_) => c_.copy(executable = snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig.Executable.ClsPath(f_)))
      def command: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getCommand)((c_, f_) => c_.copy(executable = snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig.Executable.Command(f_)))
      def inferenceBatchSize: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.inferenceBatchSize)((c_, f_) => c_.copy(inferenceBatchSize = f_))
      def executable: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig.Executable] = field(_.executable)((c_, f_) => c_.copy(executable = f_))
    }
    final val INFERENCER_ARGS_FIELD_NUMBER = 1
    final val INFERENCER_CLS_PATH_FIELD_NUMBER = 2
    final val CLS_PATH_FIELD_NUMBER = 100
    final val COMMAND_FIELD_NUMBER = 101
    final val INFERENCE_BATCH_SIZE_FIELD_NUMBER = 5
    @transient
    private[gbml_config] val _typemapper_inferencerArgs: _root_.scalapb.TypeMapper[snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig.InferencerArgsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)] = implicitly[_root_.scalapb.TypeMapper[snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig.InferencerArgsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)]]
    def of(
      inferencerArgs: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String],
      inferencerClsPath: _root_.scala.Predef.String,
      executable: snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig.Executable,
      inferenceBatchSize: _root_.scala.Int
    ): _root_.snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig = _root_.snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig(
      inferencerArgs,
      inferencerClsPath,
      executable,
      inferenceBatchSize
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[snapchat.research.gbml.GbmlConfig.InferencerConfig])
  }
  
  @SerialVersionUID(0L)
  final case class PostProcessorConfig(
      postProcessorArgs: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String] = _root_.scala.collection.immutable.Map.empty,
      postProcessorClsPath: _root_.scala.Predef.String = "",
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[PostProcessorConfig] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        postProcessorArgs.foreach { __item =>
          val __value = snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig._typemapper_postProcessorArgs.toBase(__item)
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
        
        {
          val __value = postProcessorClsPath
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        postProcessorArgs.foreach { __v =>
          val __m = snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig._typemapper_postProcessorArgs.toBase(__v)
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        {
          val __v = postProcessorClsPath
          if (!__v.isEmpty) {
            _output__.writeString(2, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def clearPostProcessorArgs = copy(postProcessorArgs = _root_.scala.collection.immutable.Map.empty)
      def addPostProcessorArgs(__vs: (_root_.scala.Predef.String, _root_.scala.Predef.String) *): PostProcessorConfig = addAllPostProcessorArgs(__vs)
      def addAllPostProcessorArgs(__vs: Iterable[(_root_.scala.Predef.String, _root_.scala.Predef.String)]): PostProcessorConfig = copy(postProcessorArgs = postProcessorArgs ++ __vs)
      def withPostProcessorArgs(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]): PostProcessorConfig = copy(postProcessorArgs = __v)
      def withPostProcessorClsPath(__v: _root_.scala.Predef.String): PostProcessorConfig = copy(postProcessorClsPath = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => postProcessorArgs.iterator.map(snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig._typemapper_postProcessorArgs.toBase(_)).toSeq
          case 2 => {
            val __t = postProcessorClsPath
            if (__t != "") __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PRepeated(postProcessorArgs.iterator.map(snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig._typemapper_postProcessorArgs.toBase(_).toPMessage).toVector)
          case 2 => _root_.scalapb.descriptors.PString(postProcessorClsPath)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig.type = snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig
      // @@protoc_insertion_point(GeneratedMessage[snapchat.research.gbml.GbmlConfig.PostProcessorConfig])
  }
  
  object PostProcessorConfig extends scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig = {
      val __postProcessorArgs: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, _root_.scala.Predef.String), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, _root_.scala.Predef.String]
      var __postProcessorClsPath: _root_.scala.Predef.String = ""
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __postProcessorArgs += snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig._typemapper_postProcessorArgs.toCustom(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig.PostProcessorArgsEntry](_input__))
          case 18 =>
            __postProcessorClsPath = _input__.readStringRequireUtf8()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig(
          postProcessorArgs = __postProcessorArgs.result(),
          postProcessorClsPath = __postProcessorClsPath,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig(
          postProcessorArgs = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig.PostProcessorArgsEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig._typemapper_postProcessorArgs.toCustom(_)).toMap,
          postProcessorClsPath = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.javaDescriptor.getNestedTypes().get(6)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.scalaDescriptor.nestedMessages(6)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 1 => __out = snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig.PostProcessorArgsEntry
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
      Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
        _root_.snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig.PostProcessorArgsEntry
      )
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig(
      postProcessorArgs = _root_.scala.collection.immutable.Map.empty,
      postProcessorClsPath = ""
    )
    @SerialVersionUID(0L)
    final case class PostProcessorArgsEntry(
        key: _root_.scala.Predef.String = "",
        value: _root_.scala.Predef.String = "",
        unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
        ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[PostProcessorArgsEntry] {
        @transient
        private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
        private[this] def __computeSerializedSize(): _root_.scala.Int = {
          var __size = 0
          
          {
            val __value = key
            if (!__value.isEmpty) {
              __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
            }
          };
          
          {
            val __value = value
            if (!__value.isEmpty) {
              __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
            }
          };
          __size += unknownFields.serializedSize
          __size
        }
        override def serializedSize: _root_.scala.Int = {
          var __size = __serializedSizeMemoized
          if (__size == 0) {
            __size = __computeSerializedSize() + 1
            __serializedSizeMemoized = __size
          }
          __size - 1
          
        }
        def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
          {
            val __v = key
            if (!__v.isEmpty) {
              _output__.writeString(1, __v)
            }
          };
          {
            val __v = value
            if (!__v.isEmpty) {
              _output__.writeString(2, __v)
            }
          };
          unknownFields.writeTo(_output__)
        }
        def withKey(__v: _root_.scala.Predef.String): PostProcessorArgsEntry = copy(key = __v)
        def withValue(__v: _root_.scala.Predef.String): PostProcessorArgsEntry = copy(value = __v)
        def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
        def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
        def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
          (__fieldNumber: @_root_.scala.unchecked) match {
            case 1 => {
              val __t = key
              if (__t != "") __t else null
            }
            case 2 => {
              val __t = value
              if (__t != "") __t else null
            }
          }
        }
        def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
          _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
          (__field.number: @_root_.scala.unchecked) match {
            case 1 => _root_.scalapb.descriptors.PString(key)
            case 2 => _root_.scalapb.descriptors.PString(value)
          }
        }
        def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
        def companion: snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig.PostProcessorArgsEntry.type = snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig.PostProcessorArgsEntry
        // @@protoc_insertion_point(GeneratedMessage[snapchat.research.gbml.GbmlConfig.PostProcessorConfig.PostProcessorArgsEntry])
    }
    
    object PostProcessorArgsEntry extends scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig.PostProcessorArgsEntry] {
      implicit def messageCompanion: scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig.PostProcessorArgsEntry] = this
      def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig.PostProcessorArgsEntry = {
        var __key: _root_.scala.Predef.String = ""
        var __value: _root_.scala.Predef.String = ""
        var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __key = _input__.readStringRequireUtf8()
            case 18 =>
              __value = _input__.readStringRequireUtf8()
            case tag =>
              if (_unknownFields__ == null) {
                _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
              }
              _unknownFields__.parseField(tag, _input__)
          }
        }
        snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig.PostProcessorArgsEntry(
            key = __key,
            value = __value,
            unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
        )
      }
      implicit def messageReads: _root_.scalapb.descriptors.Reads[snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig.PostProcessorArgsEntry] = _root_.scalapb.descriptors.Reads{
        case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
          _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
          snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig.PostProcessorArgsEntry(
            key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
            value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
          )
        case _ => throw new RuntimeException("Expected PMessage")
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig.javaDescriptor.getNestedTypes().get(0)
      def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig.scalaDescriptor.nestedMessages(0)
      def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      lazy val defaultInstance = snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig.PostProcessorArgsEntry(
        key = "",
        value = ""
      )
      implicit class PostProcessorArgsEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig.PostProcessorArgsEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig.PostProcessorArgsEntry](_l) {
        def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
        def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.value)((c_, f_) => c_.copy(value = f_))
      }
      final val KEY_FIELD_NUMBER = 1
      final val VALUE_FIELD_NUMBER = 2
      @transient
      implicit val keyValueMapper: _root_.scalapb.TypeMapper[snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig.PostProcessorArgsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)] =
        _root_.scalapb.TypeMapper[snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig.PostProcessorArgsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)](__m => (__m.key, __m.value))(__p => snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig.PostProcessorArgsEntry(__p._1, __p._2))
      def of(
        key: _root_.scala.Predef.String,
        value: _root_.scala.Predef.String
      ): _root_.snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig.PostProcessorArgsEntry = _root_.snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig.PostProcessorArgsEntry(
        key,
        value
      )
      // @@protoc_insertion_point(GeneratedMessageCompanion[snapchat.research.gbml.GbmlConfig.PostProcessorConfig.PostProcessorArgsEntry])
    }
    
    implicit class PostProcessorConfigLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig](_l) {
      def postProcessorArgs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]] = field(_.postProcessorArgs)((c_, f_) => c_.copy(postProcessorArgs = f_))
      def postProcessorClsPath: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.postProcessorClsPath)((c_, f_) => c_.copy(postProcessorClsPath = f_))
    }
    final val POST_PROCESSOR_ARGS_FIELD_NUMBER = 1
    final val POST_PROCESSOR_CLS_PATH_FIELD_NUMBER = 2
    @transient
    private[gbml_config] val _typemapper_postProcessorArgs: _root_.scalapb.TypeMapper[snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig.PostProcessorArgsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)] = implicitly[_root_.scalapb.TypeMapper[snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig.PostProcessorArgsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)]]
    def of(
      postProcessorArgs: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String],
      postProcessorClsPath: _root_.scala.Predef.String
    ): _root_.snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig = _root_.snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig(
      postProcessorArgs,
      postProcessorClsPath
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[snapchat.research.gbml.GbmlConfig.PostProcessorConfig])
  }
  
  @SerialVersionUID(0L)
  final case class MetricsConfig(
      metricsClsPath: _root_.scala.Predef.String = "",
      metricsArgs: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String] = _root_.scala.collection.immutable.Map.empty,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[MetricsConfig] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = metricsClsPath
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        metricsArgs.foreach { __item =>
          val __value = snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig._typemapper_metricsArgs.toBase(__item)
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = metricsClsPath
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        metricsArgs.foreach { __v =>
          val __m = snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig._typemapper_metricsArgs.toBase(__v)
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def withMetricsClsPath(__v: _root_.scala.Predef.String): MetricsConfig = copy(metricsClsPath = __v)
      def clearMetricsArgs = copy(metricsArgs = _root_.scala.collection.immutable.Map.empty)
      def addMetricsArgs(__vs: (_root_.scala.Predef.String, _root_.scala.Predef.String) *): MetricsConfig = addAllMetricsArgs(__vs)
      def addAllMetricsArgs(__vs: Iterable[(_root_.scala.Predef.String, _root_.scala.Predef.String)]): MetricsConfig = copy(metricsArgs = metricsArgs ++ __vs)
      def withMetricsArgs(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]): MetricsConfig = copy(metricsArgs = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = metricsClsPath
            if (__t != "") __t else null
          }
          case 2 => metricsArgs.iterator.map(snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig._typemapper_metricsArgs.toBase(_)).toSeq
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(metricsClsPath)
          case 2 => _root_.scalapb.descriptors.PRepeated(metricsArgs.iterator.map(snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig._typemapper_metricsArgs.toBase(_).toPMessage).toVector)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig.type = snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig
      // @@protoc_insertion_point(GeneratedMessage[snapchat.research.gbml.GbmlConfig.MetricsConfig])
  }
  
  object MetricsConfig extends scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig = {
      var __metricsClsPath: _root_.scala.Predef.String = ""
      val __metricsArgs: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, _root_.scala.Predef.String), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, _root_.scala.Predef.String]
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __metricsClsPath = _input__.readStringRequireUtf8()
          case 18 =>
            __metricsArgs += snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig._typemapper_metricsArgs.toCustom(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig.MetricsArgsEntry](_input__))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig(
          metricsClsPath = __metricsClsPath,
          metricsArgs = __metricsArgs.result(),
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig(
          metricsClsPath = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          metricsArgs = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig.MetricsArgsEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig._typemapper_metricsArgs.toCustom(_)).toMap
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.javaDescriptor.getNestedTypes().get(7)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.scalaDescriptor.nestedMessages(7)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig.MetricsArgsEntry
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
      Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
        _root_.snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig.MetricsArgsEntry
      )
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig(
      metricsClsPath = "",
      metricsArgs = _root_.scala.collection.immutable.Map.empty
    )
    @SerialVersionUID(0L)
    final case class MetricsArgsEntry(
        key: _root_.scala.Predef.String = "",
        value: _root_.scala.Predef.String = "",
        unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
        ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[MetricsArgsEntry] {
        @transient
        private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
        private[this] def __computeSerializedSize(): _root_.scala.Int = {
          var __size = 0
          
          {
            val __value = key
            if (!__value.isEmpty) {
              __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
            }
          };
          
          {
            val __value = value
            if (!__value.isEmpty) {
              __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
            }
          };
          __size += unknownFields.serializedSize
          __size
        }
        override def serializedSize: _root_.scala.Int = {
          var __size = __serializedSizeMemoized
          if (__size == 0) {
            __size = __computeSerializedSize() + 1
            __serializedSizeMemoized = __size
          }
          __size - 1
          
        }
        def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
          {
            val __v = key
            if (!__v.isEmpty) {
              _output__.writeString(1, __v)
            }
          };
          {
            val __v = value
            if (!__v.isEmpty) {
              _output__.writeString(2, __v)
            }
          };
          unknownFields.writeTo(_output__)
        }
        def withKey(__v: _root_.scala.Predef.String): MetricsArgsEntry = copy(key = __v)
        def withValue(__v: _root_.scala.Predef.String): MetricsArgsEntry = copy(value = __v)
        def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
        def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
        def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
          (__fieldNumber: @_root_.scala.unchecked) match {
            case 1 => {
              val __t = key
              if (__t != "") __t else null
            }
            case 2 => {
              val __t = value
              if (__t != "") __t else null
            }
          }
        }
        def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
          _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
          (__field.number: @_root_.scala.unchecked) match {
            case 1 => _root_.scalapb.descriptors.PString(key)
            case 2 => _root_.scalapb.descriptors.PString(value)
          }
        }
        def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
        def companion: snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig.MetricsArgsEntry.type = snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig.MetricsArgsEntry
        // @@protoc_insertion_point(GeneratedMessage[snapchat.research.gbml.GbmlConfig.MetricsConfig.MetricsArgsEntry])
    }
    
    object MetricsArgsEntry extends scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig.MetricsArgsEntry] {
      implicit def messageCompanion: scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig.MetricsArgsEntry] = this
      def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig.MetricsArgsEntry = {
        var __key: _root_.scala.Predef.String = ""
        var __value: _root_.scala.Predef.String = ""
        var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __key = _input__.readStringRequireUtf8()
            case 18 =>
              __value = _input__.readStringRequireUtf8()
            case tag =>
              if (_unknownFields__ == null) {
                _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
              }
              _unknownFields__.parseField(tag, _input__)
          }
        }
        snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig.MetricsArgsEntry(
            key = __key,
            value = __value,
            unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
        )
      }
      implicit def messageReads: _root_.scalapb.descriptors.Reads[snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig.MetricsArgsEntry] = _root_.scalapb.descriptors.Reads{
        case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
          _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
          snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig.MetricsArgsEntry(
            key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
            value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
          )
        case _ => throw new RuntimeException("Expected PMessage")
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig.javaDescriptor.getNestedTypes().get(0)
      def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig.scalaDescriptor.nestedMessages(0)
      def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      lazy val defaultInstance = snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig.MetricsArgsEntry(
        key = "",
        value = ""
      )
      implicit class MetricsArgsEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig.MetricsArgsEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig.MetricsArgsEntry](_l) {
        def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
        def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.value)((c_, f_) => c_.copy(value = f_))
      }
      final val KEY_FIELD_NUMBER = 1
      final val VALUE_FIELD_NUMBER = 2
      @transient
      implicit val keyValueMapper: _root_.scalapb.TypeMapper[snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig.MetricsArgsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)] =
        _root_.scalapb.TypeMapper[snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig.MetricsArgsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)](__m => (__m.key, __m.value))(__p => snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig.MetricsArgsEntry(__p._1, __p._2))
      def of(
        key: _root_.scala.Predef.String,
        value: _root_.scala.Predef.String
      ): _root_.snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig.MetricsArgsEntry = _root_.snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig.MetricsArgsEntry(
        key,
        value
      )
      // @@protoc_insertion_point(GeneratedMessageCompanion[snapchat.research.gbml.GbmlConfig.MetricsConfig.MetricsArgsEntry])
    }
    
    implicit class MetricsConfigLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig](_l) {
      def metricsClsPath: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.metricsClsPath)((c_, f_) => c_.copy(metricsClsPath = f_))
      def metricsArgs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]] = field(_.metricsArgs)((c_, f_) => c_.copy(metricsArgs = f_))
    }
    final val METRICS_CLS_PATH_FIELD_NUMBER = 1
    final val METRICS_ARGS_FIELD_NUMBER = 2
    @transient
    private[gbml_config] val _typemapper_metricsArgs: _root_.scalapb.TypeMapper[snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig.MetricsArgsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)] = implicitly[_root_.scalapb.TypeMapper[snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig.MetricsArgsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)]]
    def of(
      metricsClsPath: _root_.scala.Predef.String,
      metricsArgs: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]
    ): _root_.snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig = _root_.snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig(
      metricsClsPath,
      metricsArgs
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[snapchat.research.gbml.GbmlConfig.MetricsConfig])
  }
  
  @SerialVersionUID(0L)
  final case class ProfilerConfig(
      shouldEnableProfiler: _root_.scala.Boolean = false,
      profilerLogDir: _root_.scala.Predef.String = "",
      profilerArgs: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String] = _root_.scala.collection.immutable.Map.empty,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ProfilerConfig] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = shouldEnableProfiler
          if (__value != false) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(1, __value)
          }
        };
        
        {
          val __value = profilerLogDir
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
          }
        };
        profilerArgs.foreach { __item =>
          val __value = snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig._typemapper_profilerArgs.toBase(__item)
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = shouldEnableProfiler
          if (__v != false) {
            _output__.writeBool(1, __v)
          }
        };
        {
          val __v = profilerLogDir
          if (!__v.isEmpty) {
            _output__.writeString(2, __v)
          }
        };
        profilerArgs.foreach { __v =>
          val __m = snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig._typemapper_profilerArgs.toBase(__v)
          _output__.writeTag(3, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def withShouldEnableProfiler(__v: _root_.scala.Boolean): ProfilerConfig = copy(shouldEnableProfiler = __v)
      def withProfilerLogDir(__v: _root_.scala.Predef.String): ProfilerConfig = copy(profilerLogDir = __v)
      def clearProfilerArgs = copy(profilerArgs = _root_.scala.collection.immutable.Map.empty)
      def addProfilerArgs(__vs: (_root_.scala.Predef.String, _root_.scala.Predef.String) *): ProfilerConfig = addAllProfilerArgs(__vs)
      def addAllProfilerArgs(__vs: Iterable[(_root_.scala.Predef.String, _root_.scala.Predef.String)]): ProfilerConfig = copy(profilerArgs = profilerArgs ++ __vs)
      def withProfilerArgs(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]): ProfilerConfig = copy(profilerArgs = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = shouldEnableProfiler
            if (__t != false) __t else null
          }
          case 2 => {
            val __t = profilerLogDir
            if (__t != "") __t else null
          }
          case 3 => profilerArgs.iterator.map(snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig._typemapper_profilerArgs.toBase(_)).toSeq
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PBoolean(shouldEnableProfiler)
          case 2 => _root_.scalapb.descriptors.PString(profilerLogDir)
          case 3 => _root_.scalapb.descriptors.PRepeated(profilerArgs.iterator.map(snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig._typemapper_profilerArgs.toBase(_).toPMessage).toVector)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig.type = snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig
      // @@protoc_insertion_point(GeneratedMessage[snapchat.research.gbml.GbmlConfig.ProfilerConfig])
  }
  
  object ProfilerConfig extends scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig = {
      var __shouldEnableProfiler: _root_.scala.Boolean = false
      var __profilerLogDir: _root_.scala.Predef.String = ""
      val __profilerArgs: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, _root_.scala.Predef.String), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, _root_.scala.Predef.String]
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __shouldEnableProfiler = _input__.readBool()
          case 18 =>
            __profilerLogDir = _input__.readStringRequireUtf8()
          case 26 =>
            __profilerArgs += snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig._typemapper_profilerArgs.toCustom(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig.ProfilerArgsEntry](_input__))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig(
          shouldEnableProfiler = __shouldEnableProfiler,
          profilerLogDir = __profilerLogDir,
          profilerArgs = __profilerArgs.result(),
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig(
          shouldEnableProfiler = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
          profilerLogDir = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          profilerArgs = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig.ProfilerArgsEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig._typemapper_profilerArgs.toCustom(_)).toMap
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.javaDescriptor.getNestedTypes().get(8)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.scalaDescriptor.nestedMessages(8)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 3 => __out = snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig.ProfilerArgsEntry
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
      Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
        _root_.snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig.ProfilerArgsEntry
      )
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig(
      shouldEnableProfiler = false,
      profilerLogDir = "",
      profilerArgs = _root_.scala.collection.immutable.Map.empty
    )
    @SerialVersionUID(0L)
    final case class ProfilerArgsEntry(
        key: _root_.scala.Predef.String = "",
        value: _root_.scala.Predef.String = "",
        unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
        ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ProfilerArgsEntry] {
        @transient
        private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
        private[this] def __computeSerializedSize(): _root_.scala.Int = {
          var __size = 0
          
          {
            val __value = key
            if (!__value.isEmpty) {
              __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
            }
          };
          
          {
            val __value = value
            if (!__value.isEmpty) {
              __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
            }
          };
          __size += unknownFields.serializedSize
          __size
        }
        override def serializedSize: _root_.scala.Int = {
          var __size = __serializedSizeMemoized
          if (__size == 0) {
            __size = __computeSerializedSize() + 1
            __serializedSizeMemoized = __size
          }
          __size - 1
          
        }
        def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
          {
            val __v = key
            if (!__v.isEmpty) {
              _output__.writeString(1, __v)
            }
          };
          {
            val __v = value
            if (!__v.isEmpty) {
              _output__.writeString(2, __v)
            }
          };
          unknownFields.writeTo(_output__)
        }
        def withKey(__v: _root_.scala.Predef.String): ProfilerArgsEntry = copy(key = __v)
        def withValue(__v: _root_.scala.Predef.String): ProfilerArgsEntry = copy(value = __v)
        def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
        def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
        def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
          (__fieldNumber: @_root_.scala.unchecked) match {
            case 1 => {
              val __t = key
              if (__t != "") __t else null
            }
            case 2 => {
              val __t = value
              if (__t != "") __t else null
            }
          }
        }
        def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
          _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
          (__field.number: @_root_.scala.unchecked) match {
            case 1 => _root_.scalapb.descriptors.PString(key)
            case 2 => _root_.scalapb.descriptors.PString(value)
          }
        }
        def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
        def companion: snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig.ProfilerArgsEntry.type = snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig.ProfilerArgsEntry
        // @@protoc_insertion_point(GeneratedMessage[snapchat.research.gbml.GbmlConfig.ProfilerConfig.ProfilerArgsEntry])
    }
    
    object ProfilerArgsEntry extends scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig.ProfilerArgsEntry] {
      implicit def messageCompanion: scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig.ProfilerArgsEntry] = this
      def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig.ProfilerArgsEntry = {
        var __key: _root_.scala.Predef.String = ""
        var __value: _root_.scala.Predef.String = ""
        var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __key = _input__.readStringRequireUtf8()
            case 18 =>
              __value = _input__.readStringRequireUtf8()
            case tag =>
              if (_unknownFields__ == null) {
                _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
              }
              _unknownFields__.parseField(tag, _input__)
          }
        }
        snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig.ProfilerArgsEntry(
            key = __key,
            value = __value,
            unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
        )
      }
      implicit def messageReads: _root_.scalapb.descriptors.Reads[snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig.ProfilerArgsEntry] = _root_.scalapb.descriptors.Reads{
        case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
          _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
          snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig.ProfilerArgsEntry(
            key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
            value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
          )
        case _ => throw new RuntimeException("Expected PMessage")
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig.javaDescriptor.getNestedTypes().get(0)
      def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig.scalaDescriptor.nestedMessages(0)
      def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      lazy val defaultInstance = snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig.ProfilerArgsEntry(
        key = "",
        value = ""
      )
      implicit class ProfilerArgsEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig.ProfilerArgsEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig.ProfilerArgsEntry](_l) {
        def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
        def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.value)((c_, f_) => c_.copy(value = f_))
      }
      final val KEY_FIELD_NUMBER = 1
      final val VALUE_FIELD_NUMBER = 2
      @transient
      implicit val keyValueMapper: _root_.scalapb.TypeMapper[snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig.ProfilerArgsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)] =
        _root_.scalapb.TypeMapper[snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig.ProfilerArgsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)](__m => (__m.key, __m.value))(__p => snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig.ProfilerArgsEntry(__p._1, __p._2))
      def of(
        key: _root_.scala.Predef.String,
        value: _root_.scala.Predef.String
      ): _root_.snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig.ProfilerArgsEntry = _root_.snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig.ProfilerArgsEntry(
        key,
        value
      )
      // @@protoc_insertion_point(GeneratedMessageCompanion[snapchat.research.gbml.GbmlConfig.ProfilerConfig.ProfilerArgsEntry])
    }
    
    implicit class ProfilerConfigLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig](_l) {
      def shouldEnableProfiler: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.shouldEnableProfiler)((c_, f_) => c_.copy(shouldEnableProfiler = f_))
      def profilerLogDir: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.profilerLogDir)((c_, f_) => c_.copy(profilerLogDir = f_))
      def profilerArgs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]] = field(_.profilerArgs)((c_, f_) => c_.copy(profilerArgs = f_))
    }
    final val SHOULD_ENABLE_PROFILER_FIELD_NUMBER = 1
    final val PROFILER_LOG_DIR_FIELD_NUMBER = 2
    final val PROFILER_ARGS_FIELD_NUMBER = 3
    @transient
    private[gbml_config] val _typemapper_profilerArgs: _root_.scalapb.TypeMapper[snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig.ProfilerArgsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)] = implicitly[_root_.scalapb.TypeMapper[snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig.ProfilerArgsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)]]
    def of(
      shouldEnableProfiler: _root_.scala.Boolean,
      profilerLogDir: _root_.scala.Predef.String,
      profilerArgs: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]
    ): _root_.snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig = _root_.snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig(
      shouldEnableProfiler,
      profilerLogDir,
      profilerArgs
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[snapchat.research.gbml.GbmlConfig.ProfilerConfig])
  }
  
  @SerialVersionUID(0L)
  final case class FeatureFlagsEntry(
      key: _root_.scala.Predef.String = "",
      value: _root_.scala.Predef.String = "",
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[FeatureFlagsEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        
        {
          val __value = value
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        {
          val __v = value
          if (!__v.isEmpty) {
            _output__.writeString(2, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Predef.String): FeatureFlagsEntry = copy(key = __v)
      def withValue(__v: _root_.scala.Predef.String): FeatureFlagsEntry = copy(value = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => {
            val __t = value
            if (__t != "") __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => _root_.scalapb.descriptors.PString(value)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: snapchat.research.gbml.gbml_config.GbmlConfig.FeatureFlagsEntry.type = snapchat.research.gbml.gbml_config.GbmlConfig.FeatureFlagsEntry
      // @@protoc_insertion_point(GeneratedMessage[snapchat.research.gbml.GbmlConfig.FeatureFlagsEntry])
  }
  
  object FeatureFlagsEntry extends scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.FeatureFlagsEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gbml_config.GbmlConfig.FeatureFlagsEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): snapchat.research.gbml.gbml_config.GbmlConfig.FeatureFlagsEntry = {
      var __key: _root_.scala.Predef.String = ""
      var __value: _root_.scala.Predef.String = ""
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = _input__.readStringRequireUtf8()
          case 18 =>
            __value = _input__.readStringRequireUtf8()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      snapchat.research.gbml.gbml_config.GbmlConfig.FeatureFlagsEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[snapchat.research.gbml.gbml_config.GbmlConfig.FeatureFlagsEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        snapchat.research.gbml.gbml_config.GbmlConfig.FeatureFlagsEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.javaDescriptor.getNestedTypes().get(9)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = snapchat.research.gbml.gbml_config.GbmlConfig.scalaDescriptor.nestedMessages(9)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = snapchat.research.gbml.gbml_config.GbmlConfig.FeatureFlagsEntry(
      key = "",
      value = ""
    )
    implicit class FeatureFlagsEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.FeatureFlagsEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.FeatureFlagsEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[snapchat.research.gbml.gbml_config.GbmlConfig.FeatureFlagsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)] =
      _root_.scalapb.TypeMapper[snapchat.research.gbml.gbml_config.GbmlConfig.FeatureFlagsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)](__m => (__m.key, __m.value))(__p => snapchat.research.gbml.gbml_config.GbmlConfig.FeatureFlagsEntry(__p._1, __p._2))
    def of(
      key: _root_.scala.Predef.String,
      value: _root_.scala.Predef.String
    ): _root_.snapchat.research.gbml.gbml_config.GbmlConfig.FeatureFlagsEntry = _root_.snapchat.research.gbml.gbml_config.GbmlConfig.FeatureFlagsEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[snapchat.research.gbml.GbmlConfig.FeatureFlagsEntry])
  }
  
  implicit class GbmlConfigLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig](_l) {
    def taskMetadata: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata] = field(_.getTaskMetadata)((c_, f_) => c_.copy(taskMetadata = Option(f_)))
    def optionalTaskMetadata: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata]] = field(_.taskMetadata)((c_, f_) => c_.copy(taskMetadata = f_))
    def graphMetadata: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.graph_schema.GraphMetadata] = field(_.getGraphMetadata)((c_, f_) => c_.copy(graphMetadata = Option(f_)))
    def optionalGraphMetadata: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[snapchat.research.gbml.graph_schema.GraphMetadata]] = field(_.graphMetadata)((c_, f_) => c_.copy(graphMetadata = f_))
    def sharedConfig: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig] = field(_.getSharedConfig)((c_, f_) => c_.copy(sharedConfig = Option(f_)))
    def optionalSharedConfig: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig]] = field(_.sharedConfig)((c_, f_) => c_.copy(sharedConfig = f_))
    def datasetConfig: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig] = field(_.getDatasetConfig)((c_, f_) => c_.copy(datasetConfig = Option(f_)))
    def optionalDatasetConfig: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig]] = field(_.datasetConfig)((c_, f_) => c_.copy(datasetConfig = f_))
    def trainerConfig: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig] = field(_.getTrainerConfig)((c_, f_) => c_.copy(trainerConfig = Option(f_)))
    def optionalTrainerConfig: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig]] = field(_.trainerConfig)((c_, f_) => c_.copy(trainerConfig = f_))
    def inferencerConfig: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig] = field(_.getInferencerConfig)((c_, f_) => c_.copy(inferencerConfig = Option(f_)))
    def optionalInferencerConfig: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig]] = field(_.inferencerConfig)((c_, f_) => c_.copy(inferencerConfig = f_))
    def postProcessorConfig: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig] = field(_.getPostProcessorConfig)((c_, f_) => c_.copy(postProcessorConfig = Option(f_)))
    def optionalPostProcessorConfig: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig]] = field(_.postProcessorConfig)((c_, f_) => c_.copy(postProcessorConfig = f_))
    def metricsConfig: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig] = field(_.getMetricsConfig)((c_, f_) => c_.copy(metricsConfig = Option(f_)))
    def optionalMetricsConfig: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig]] = field(_.metricsConfig)((c_, f_) => c_.copy(metricsConfig = f_))
    def profilerConfig: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig] = field(_.getProfilerConfig)((c_, f_) => c_.copy(profilerConfig = Option(f_)))
    def optionalProfilerConfig: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig]] = field(_.profilerConfig)((c_, f_) => c_.copy(profilerConfig = f_))
    def featureFlags: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]] = field(_.featureFlags)((c_, f_) => c_.copy(featureFlags = f_))
  }
  final val TASK_METADATA_FIELD_NUMBER = 1
  final val GRAPH_METADATA_FIELD_NUMBER = 2
  final val SHARED_CONFIG_FIELD_NUMBER = 3
  final val DATASET_CONFIG_FIELD_NUMBER = 4
  final val TRAINER_CONFIG_FIELD_NUMBER = 5
  final val INFERENCER_CONFIG_FIELD_NUMBER = 6
  final val POST_PROCESSOR_CONFIG_FIELD_NUMBER = 9
  final val METRICS_CONFIG_FIELD_NUMBER = 7
  final val PROFILER_CONFIG_FIELD_NUMBER = 8
  final val FEATURE_FLAGS_FIELD_NUMBER = 10
  @transient
  private[gbml_config] val _typemapper_featureFlags: _root_.scalapb.TypeMapper[snapchat.research.gbml.gbml_config.GbmlConfig.FeatureFlagsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)] = implicitly[_root_.scalapb.TypeMapper[snapchat.research.gbml.gbml_config.GbmlConfig.FeatureFlagsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)]]
  def of(
    taskMetadata: _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.TaskMetadata],
    graphMetadata: _root_.scala.Option[snapchat.research.gbml.graph_schema.GraphMetadata],
    sharedConfig: _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.SharedConfig],
    datasetConfig: _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.DatasetConfig],
    trainerConfig: _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.TrainerConfig],
    inferencerConfig: _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.InferencerConfig],
    postProcessorConfig: _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.PostProcessorConfig],
    metricsConfig: _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.MetricsConfig],
    profilerConfig: _root_.scala.Option[snapchat.research.gbml.gbml_config.GbmlConfig.ProfilerConfig],
    featureFlags: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]
  ): _root_.snapchat.research.gbml.gbml_config.GbmlConfig = _root_.snapchat.research.gbml.gbml_config.GbmlConfig(
    taskMetadata,
    graphMetadata,
    sharedConfig,
    datasetConfig,
    trainerConfig,
    inferencerConfig,
    postProcessorConfig,
    metricsConfig,
    profilerConfig,
    featureFlags
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[snapchat.research.gbml.GbmlConfig])
}
