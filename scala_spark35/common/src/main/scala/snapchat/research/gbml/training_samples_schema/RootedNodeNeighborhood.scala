// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package snapchat.research.gbml.training_samples_schema

/** Store each node and related neighborhood subgraph
  * can be used for storing random negative samples
  *
  * @param rootNode
  *   The main node for the sample
  * @param neighborhood
  *   k-hop neighborhood of the root_node
  */
@SerialVersionUID(0L)
final case class RootedNodeNeighborhood(
    rootNode: _root_.scala.Option[snapchat.research.gbml.graph_schema.Node] = _root_.scala.None,
    neighborhood: _root_.scala.Option[snapchat.research.gbml.graph_schema.Graph] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[RootedNodeNeighborhood] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (rootNode.isDefined) {
        val __value = rootNode.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (neighborhood.isDefined) {
        val __value = neighborhood.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      rootNode.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      neighborhood.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getRootNode: snapchat.research.gbml.graph_schema.Node = rootNode.getOrElse(snapchat.research.gbml.graph_schema.Node.defaultInstance)
    def clearRootNode: RootedNodeNeighborhood = copy(rootNode = _root_.scala.None)
    def withRootNode(__v: snapchat.research.gbml.graph_schema.Node): RootedNodeNeighborhood = copy(rootNode = Option(__v))
    def getNeighborhood: snapchat.research.gbml.graph_schema.Graph = neighborhood.getOrElse(snapchat.research.gbml.graph_schema.Graph.defaultInstance)
    def clearNeighborhood: RootedNodeNeighborhood = copy(neighborhood = _root_.scala.None)
    def withNeighborhood(__v: snapchat.research.gbml.graph_schema.Graph): RootedNodeNeighborhood = copy(neighborhood = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => rootNode.orNull
        case 2 => neighborhood.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => rootNode.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => neighborhood.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: snapchat.research.gbml.training_samples_schema.RootedNodeNeighborhood.type = snapchat.research.gbml.training_samples_schema.RootedNodeNeighborhood
    // @@protoc_insertion_point(GeneratedMessage[snapchat.research.gbml.RootedNodeNeighborhood])
}

object RootedNodeNeighborhood extends scalapb.GeneratedMessageCompanion[snapchat.research.gbml.training_samples_schema.RootedNodeNeighborhood] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[snapchat.research.gbml.training_samples_schema.RootedNodeNeighborhood] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): snapchat.research.gbml.training_samples_schema.RootedNodeNeighborhood = {
    var __rootNode: _root_.scala.Option[snapchat.research.gbml.graph_schema.Node] = _root_.scala.None
    var __neighborhood: _root_.scala.Option[snapchat.research.gbml.graph_schema.Graph] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __rootNode = Option(__rootNode.fold(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.graph_schema.Node](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __neighborhood = Option(__neighborhood.fold(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.graph_schema.Graph](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    snapchat.research.gbml.training_samples_schema.RootedNodeNeighborhood(
        rootNode = __rootNode,
        neighborhood = __neighborhood,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[snapchat.research.gbml.training_samples_schema.RootedNodeNeighborhood] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      snapchat.research.gbml.training_samples_schema.RootedNodeNeighborhood(
        rootNode = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[snapchat.research.gbml.graph_schema.Node]]),
        neighborhood = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[snapchat.research.gbml.graph_schema.Graph]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = TrainingSamplesSchemaProto.javaDescriptor.getMessageTypes().get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = TrainingSamplesSchemaProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = snapchat.research.gbml.graph_schema.Node
      case 2 => __out = snapchat.research.gbml.graph_schema.Graph
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = snapchat.research.gbml.training_samples_schema.RootedNodeNeighborhood(
    rootNode = _root_.scala.None,
    neighborhood = _root_.scala.None
  )
  implicit class RootedNodeNeighborhoodLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.training_samples_schema.RootedNodeNeighborhood]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, snapchat.research.gbml.training_samples_schema.RootedNodeNeighborhood](_l) {
    def rootNode: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.graph_schema.Node] = field(_.getRootNode)((c_, f_) => c_.copy(rootNode = Option(f_)))
    def optionalRootNode: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[snapchat.research.gbml.graph_schema.Node]] = field(_.rootNode)((c_, f_) => c_.copy(rootNode = f_))
    def neighborhood: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.graph_schema.Graph] = field(_.getNeighborhood)((c_, f_) => c_.copy(neighborhood = Option(f_)))
    def optionalNeighborhood: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[snapchat.research.gbml.graph_schema.Graph]] = field(_.neighborhood)((c_, f_) => c_.copy(neighborhood = f_))
  }
  final val ROOT_NODE_FIELD_NUMBER = 1
  final val NEIGHBORHOOD_FIELD_NUMBER = 2
  def of(
    rootNode: _root_.scala.Option[snapchat.research.gbml.graph_schema.Node],
    neighborhood: _root_.scala.Option[snapchat.research.gbml.graph_schema.Graph]
  ): _root_.snapchat.research.gbml.training_samples_schema.RootedNodeNeighborhood = _root_.snapchat.research.gbml.training_samples_schema.RootedNodeNeighborhood(
    rootNode,
    neighborhood
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[snapchat.research.gbml.RootedNodeNeighborhood])
}
