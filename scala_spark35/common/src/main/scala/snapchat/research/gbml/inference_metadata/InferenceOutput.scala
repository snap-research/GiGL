// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package snapchat.research.gbml.inference_metadata

/** @param embeddingsPath
  *   Embeddings from model output
  * @param predictionsPath
  *   Predictions from model output
  */
@SerialVersionUID(0L)
final case class InferenceOutput(
    embeddingsPath: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    predictionsPath: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[InferenceOutput] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (embeddingsPath.isDefined) {
        val __value = embeddingsPath.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
      };
      if (predictionsPath.isDefined) {
        val __value = predictionsPath.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      embeddingsPath.foreach { __v =>
        val __m = __v
        _output__.writeString(1, __m)
      };
      predictionsPath.foreach { __v =>
        val __m = __v
        _output__.writeString(2, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def getEmbeddingsPath: _root_.scala.Predef.String = embeddingsPath.getOrElse("")
    def clearEmbeddingsPath: InferenceOutput = copy(embeddingsPath = _root_.scala.None)
    def withEmbeddingsPath(__v: _root_.scala.Predef.String): InferenceOutput = copy(embeddingsPath = Option(__v))
    def getPredictionsPath: _root_.scala.Predef.String = predictionsPath.getOrElse("")
    def clearPredictionsPath: InferenceOutput = copy(predictionsPath = _root_.scala.None)
    def withPredictionsPath(__v: _root_.scala.Predef.String): InferenceOutput = copy(predictionsPath = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => embeddingsPath.orNull
        case 2 => predictionsPath.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => embeddingsPath.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => predictionsPath.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: snapchat.research.gbml.inference_metadata.InferenceOutput.type = snapchat.research.gbml.inference_metadata.InferenceOutput
    // @@protoc_insertion_point(GeneratedMessage[snapchat.research.gbml.InferenceOutput])
}

object InferenceOutput extends scalapb.GeneratedMessageCompanion[snapchat.research.gbml.inference_metadata.InferenceOutput] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[snapchat.research.gbml.inference_metadata.InferenceOutput] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): snapchat.research.gbml.inference_metadata.InferenceOutput = {
    var __embeddingsPath: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
    var __predictionsPath: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __embeddingsPath = Option(_input__.readStringRequireUtf8())
        case 18 =>
          __predictionsPath = Option(_input__.readStringRequireUtf8())
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    snapchat.research.gbml.inference_metadata.InferenceOutput(
        embeddingsPath = __embeddingsPath,
        predictionsPath = __predictionsPath,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[snapchat.research.gbml.inference_metadata.InferenceOutput] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      snapchat.research.gbml.inference_metadata.InferenceOutput(
        embeddingsPath = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
        predictionsPath = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = InferenceMetadataProto.javaDescriptor.getMessageTypes().get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = InferenceMetadataProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = snapchat.research.gbml.inference_metadata.InferenceOutput(
    embeddingsPath = _root_.scala.None,
    predictionsPath = _root_.scala.None
  )
  implicit class InferenceOutputLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.inference_metadata.InferenceOutput]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, snapchat.research.gbml.inference_metadata.InferenceOutput](_l) {
    def embeddingsPath: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getEmbeddingsPath)((c_, f_) => c_.copy(embeddingsPath = Option(f_)))
    def optionalEmbeddingsPath: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.embeddingsPath)((c_, f_) => c_.copy(embeddingsPath = f_))
    def predictionsPath: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getPredictionsPath)((c_, f_) => c_.copy(predictionsPath = Option(f_)))
    def optionalPredictionsPath: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.predictionsPath)((c_, f_) => c_.copy(predictionsPath = f_))
  }
  final val EMBEDDINGS_PATH_FIELD_NUMBER = 1
  final val PREDICTIONS_PATH_FIELD_NUMBER = 2
  def of(
    embeddingsPath: _root_.scala.Option[_root_.scala.Predef.String],
    predictionsPath: _root_.scala.Option[_root_.scala.Predef.String]
  ): _root_.snapchat.research.gbml.inference_metadata.InferenceOutput = _root_.snapchat.research.gbml.inference_metadata.InferenceOutput(
    embeddingsPath,
    predictionsPath
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[snapchat.research.gbml.InferenceOutput])
}
