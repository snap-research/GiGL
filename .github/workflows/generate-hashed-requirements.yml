name: generate-hashed-requirements

# This GitHub Action is triggered when a new comment is created on an issue.
# on:
#   issue_comment:                                     
#     types: [created, edited]

on: [push]

jobs:
  comment-link-to-workflow:
    runs-on: ubuntu-latest
    steps:
      - name: Post a comment with the workflow run link
        run: |
          curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -d '{"body": "The workflow run is starting. You can view the details here: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"}' \
          https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments

  setup-python-and-tools:
    # This job sets up Python and pip-tools on both Linux and macOS.
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-14]
    needs: comment-link-to-workflow  # Ensure that a comment is posted with workflow id
    steps:
      # Step 1: Check out the repository code.
      - uses: actions/checkout@v3

      # Step 2: Set up Python environment (Python 3.9.18).
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9.23'

      # Step 3: Install pip-tools, which is used to generate hashed requirements.
      - name: Install pip-tools
        run: pip install pip-tools

  generate-linux-cpu-hashed-requirements:
    # This job only runs if its a pull request and the comment contains `/generate_hashed_requirements`
    # See: https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows#issue_comment-on-issues-only-or-pull-requests-only
    if: ${{ github.event.issue.pull_request }} && contains(github.event.comment.body, '/generate_hashed_requirements')

    # This job runs on an Ubuntu-based runner.
    runs-on: ubuntu-latest
    needs: setup-python-and-tools  # Ensures Python setup is completed first
        
    steps:
      # Step 4: Generate a hashed requirements file from pyproject.toml using pip-compile.
      - name: Generate hashed requirements for Linux Platform
        run: |
          pip-compile -v --allow-unsafe --generate-hashes --no-emit-index-url --resolver=backtracking \
          --output-file=requirements/linux_cpu_requirements_unified.txt \
          --extra torch25-cpu --extra transform \
          ./python/pyproject.toml

      # Step 5: Upload the generated hashed requirements file as an artifact.
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux_cpu_requirements_unified
          path: requirements/linux_cpu_requirements_unified.txt

  generate-dev-linux-cpu-hashed-requirements:
    if: ${{ github.event.issue.pull_request }} && contains(github.event.comment.body, '/generate_hashed_requirements')

    # This job runs on an Ubuntu-based runner.
    runs-on: ubuntu-latest
    needs: setup-python-and-tools  # Ensures Python setup is completed first
  
  
    steps:
      # Step 4: Generate a different hashed requirements file.
      - name: Generate dev hashed requirements for Linux CPU platform
        run: |
          pip-compile -v --allow-unsafe --generate-hashes --no-emit-index-url --resolver=backtracking \
          --output-file=requirements/dev_linux_cpu_requirements_unified.txt \
          --extra torch25-cpu --extra transform --extra dev \
          ./python/pyproject.toml

      # Step 5: Upload the new hashed requirements file as an artifact.
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dev_linux_cpu_requirements_unified
          path: requirements/dev_linux_cpu_requirements_unified.txt

  generate-mac-hashed-requirements:
    if: ${{ github.event.issue.pull_request }} && contains(github.event.comment.body, '/generate_hashed_requirements')

    # This job runs on a macOS-based runner (macOS 14) - Arm64 (Apple Silicon) runner.
    runs-on: macos-14
    needs: setup-python-and-tools  # Ensures Python setup is completed first
        
    steps:
      # Step 4: Generate a hashed requirements file from pyproject.toml using pip-compile.
      - name: Generate hashed requirements for MAC
        run: |
          pip-compile -v --allow-unsafe --generate-hashes --no-emit-index-url --resolver=backtracking \
          --output-file=requirements/darwin_arm64_requirements_unified.txt \
          --extra torch25-cpu --extra transform \
          ./python/pyproject.toml

      # Step 5: Upload the generated hashed requirements file as an artifact.
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: darwin_arm64_requirements_unified
          path: requirements/darwin_arm64_requirements_unified.txt
