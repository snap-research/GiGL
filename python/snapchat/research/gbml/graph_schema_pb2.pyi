"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class Node(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NODE_ID_FIELD_NUMBER: builtins.int
    CONDENSED_NODE_TYPE_FIELD_NUMBER: builtins.int
    FEATURE_VALUES_FIELD_NUMBER: builtins.int
    node_id: builtins.int
    """should be unique for nodes per node_type"""
    condensed_node_type: builtins.int
    """condensed_node_type are integer values that correspond 1:1 to a node_type: string
    See GraphMetadata for mapping. If not provided, assumed homogeneous.
    """
    @property
    def feature_values(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
        """feature_values for a node"""
    def __init__(
        self,
        *,
        node_id: builtins.int = ...,
        condensed_node_type: builtins.int | None = ...,
        feature_values: collections.abc.Iterable[builtins.float] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_condensed_node_type", b"_condensed_node_type", "condensed_node_type", b"condensed_node_type"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_condensed_node_type", b"_condensed_node_type", "condensed_node_type", b"condensed_node_type", "feature_values", b"feature_values", "node_id", b"node_id"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_condensed_node_type", b"_condensed_node_type"]) -> typing_extensions.Literal["condensed_node_type"] | None: ...

global___Node = Node

class Edge(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SRC_NODE_ID_FIELD_NUMBER: builtins.int
    DST_NODE_ID_FIELD_NUMBER: builtins.int
    CONDENSED_EDGE_TYPE_FIELD_NUMBER: builtins.int
    FEATURE_VALUES_FIELD_NUMBER: builtins.int
    src_node_id: builtins.int
    """the src_node_id & dst_node_id that the edge spans across
    node types for these nodes is encoded in condensed_edge_type
    """
    dst_node_id: builtins.int
    condensed_edge_type: builtins.int
    """Graph is assumed homogeneous if condensed_edge_type is not provided
    We store condensed representation here instead of EdgeType to optimize
    on storage space. Otherwise we would be storing atleast 3*32bytes of information : (
       src_node_type: string, dst_node_type: string, edge_type: string
    )
    See GraphMetadata for mapping
    """
    @property
    def feature_values(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
        """features_values for an edge"""
    def __init__(
        self,
        *,
        src_node_id: builtins.int = ...,
        dst_node_id: builtins.int = ...,
        condensed_edge_type: builtins.int | None = ...,
        feature_values: collections.abc.Iterable[builtins.float] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_condensed_edge_type", b"_condensed_edge_type", "condensed_edge_type", b"condensed_edge_type"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_condensed_edge_type", b"_condensed_edge_type", "condensed_edge_type", b"condensed_edge_type", "dst_node_id", b"dst_node_id", "feature_values", b"feature_values", "src_node_id", b"src_node_id"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_condensed_edge_type", b"_condensed_edge_type"]) -> typing_extensions.Literal["condensed_edge_type"] | None: ...

global___Edge = Edge

class EdgeType(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RELATION_FIELD_NUMBER: builtins.int
    SRC_NODE_TYPE_FIELD_NUMBER: builtins.int
    DST_NODE_TYPE_FIELD_NUMBER: builtins.int
    relation: builtins.str
    """The relation of source / destination node_type
    i.e. (Person , is_friend, Person) ; "Person" is node_type for both
    src and dst nodes, and "is_friend" is the "relation"
    """
    src_node_type: builtins.str
    dst_node_type: builtins.str
    def __init__(
        self,
        *,
        relation: builtins.str = ...,
        src_node_type: builtins.str = ...,
        dst_node_type: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["dst_node_type", b"dst_node_type", "relation", b"relation", "src_node_type", b"src_node_type"]) -> None: ...

global___EdgeType = EdgeType

class GraphMetadata(google.protobuf.message.Message):
    """Stores metadata that helps map the created graph samples back to original graph"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class CondensedEdgeTypeMapEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.int
        @property
        def value(self) -> global___EdgeType: ...
        def __init__(
            self,
            *,
            key: builtins.int = ...,
            value: global___EdgeType | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    class CondensedNodeTypeMapEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.int
        value: builtins.str
        def __init__(
            self,
            *,
            key: builtins.int = ...,
            value: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    NODE_TYPES_FIELD_NUMBER: builtins.int
    EDGE_TYPES_FIELD_NUMBER: builtins.int
    CONDENSED_EDGE_TYPE_MAP_FIELD_NUMBER: builtins.int
    CONDENSED_NODE_TYPE_MAP_FIELD_NUMBER: builtins.int
    @property
    def node_types(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """User provided list of node types"""
    @property
    def edge_types(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___EdgeType]:
        """User provided list of edge types"""
    @property
    def condensed_edge_type_map(self) -> google.protobuf.internal.containers.MessageMap[builtins.int, global___EdgeType]:
        """Maps condensed_edge_type: uint32 to edge_type: EdgeType; 1:1 mapping
        We use unit32 instead of EdgeType to save space when storing
        graph information
        """
    @property
    def condensed_node_type_map(self) -> google.protobuf.internal.containers.ScalarMap[builtins.int, builtins.str]:
        """Maps condensed_node_type: uint32 to node_type: string; 1:1 mapping
        We use unit32 instead of string to save space when storing
        graph information
        """
    def __init__(
        self,
        *,
        node_types: collections.abc.Iterable[builtins.str] | None = ...,
        edge_types: collections.abc.Iterable[global___EdgeType] | None = ...,
        condensed_edge_type_map: collections.abc.Mapping[builtins.int, global___EdgeType] | None = ...,
        condensed_node_type_map: collections.abc.Mapping[builtins.int, builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["condensed_edge_type_map", b"condensed_edge_type_map", "condensed_node_type_map", b"condensed_node_type_map", "edge_types", b"edge_types", "node_types", b"node_types"]) -> None: ...

global___GraphMetadata = GraphMetadata

class Graph(google.protobuf.message.Message):
    """Represents a graph; usually used to represent a rooted k-hop subgraph for a bigger graph"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NODES_FIELD_NUMBER: builtins.int
    EDGES_FIELD_NUMBER: builtins.int
    @property
    def nodes(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Node]: ...
    @property
    def edges(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Edge]: ...
    def __init__(
        self,
        *,
        nodes: collections.abc.Iterable[global___Node] | None = ...,
        edges: collections.abc.Iterable[global___Edge] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["edges", b"edges", "nodes", b"nodes"]) -> None: ...

global___Graph = Graph
