"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import snapchat.research.gbml.dataset_metadata_pb2
import snapchat.research.gbml.flattened_graph_metadata_pb2
import snapchat.research.gbml.graph_schema_pb2
import snapchat.research.gbml.inference_metadata_pb2
import snapchat.research.gbml.postprocessed_metadata_pb2
import snapchat.research.gbml.subgraph_sampling_strategy_pb2
import snapchat.research.gbml.trained_model_metadata_pb2
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class GbmlConfig(google.protobuf.message.Message):
    """
    TODO: document all protos with comments.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class TaskMetadata(google.protobuf.message.Message):
        """Indicates the training task specification and metadata for the config."""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        class NodeBasedTaskMetadata(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor

            SUPERVISION_NODE_TYPES_FIELD_NUMBER: builtins.int
            @property
            def supervision_node_types(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
            def __init__(
                self,
                *,
                supervision_node_types: collections.abc.Iterable[builtins.str] | None = ...,
            ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["supervision_node_types", b"supervision_node_types"]) -> None: ...

        class NodeAnchorBasedLinkPredictionTaskMetadata(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor

            SUPERVISION_EDGE_TYPES_FIELD_NUMBER: builtins.int
            @property
            def supervision_edge_types(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[snapchat.research.gbml.graph_schema_pb2.EdgeType]: ...
            def __init__(
                self,
                *,
                supervision_edge_types: collections.abc.Iterable[snapchat.research.gbml.graph_schema_pb2.EdgeType] | None = ...,
            ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["supervision_edge_types", b"supervision_edge_types"]) -> None: ...

        class LinkBasedTaskMetadata(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor

            SUPERVISION_EDGE_TYPES_FIELD_NUMBER: builtins.int
            @property
            def supervision_edge_types(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[snapchat.research.gbml.graph_schema_pb2.EdgeType]: ...
            def __init__(
                self,
                *,
                supervision_edge_types: collections.abc.Iterable[snapchat.research.gbml.graph_schema_pb2.EdgeType] | None = ...,
            ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["supervision_edge_types", b"supervision_edge_types"]) -> None: ...

        NODE_BASED_TASK_METADATA_FIELD_NUMBER: builtins.int
        NODE_ANCHOR_BASED_LINK_PREDICTION_TASK_METADATA_FIELD_NUMBER: builtins.int
        LINK_BASED_TASK_METADATA_FIELD_NUMBER: builtins.int
        @property
        def node_based_task_metadata(self) -> global___GbmlConfig.TaskMetadata.NodeBasedTaskMetadata: ...
        @property
        def node_anchor_based_link_prediction_task_metadata(self) -> global___GbmlConfig.TaskMetadata.NodeAnchorBasedLinkPredictionTaskMetadata: ...
        @property
        def link_based_task_metadata(self) -> global___GbmlConfig.TaskMetadata.LinkBasedTaskMetadata: ...
        def __init__(
            self,
            *,
            node_based_task_metadata: global___GbmlConfig.TaskMetadata.NodeBasedTaskMetadata | None = ...,
            node_anchor_based_link_prediction_task_metadata: global___GbmlConfig.TaskMetadata.NodeAnchorBasedLinkPredictionTaskMetadata | None = ...,
            link_based_task_metadata: global___GbmlConfig.TaskMetadata.LinkBasedTaskMetadata | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["link_based_task_metadata", b"link_based_task_metadata", "node_anchor_based_link_prediction_task_metadata", b"node_anchor_based_link_prediction_task_metadata", "node_based_task_metadata", b"node_based_task_metadata", "task_metadata", b"task_metadata"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["link_based_task_metadata", b"link_based_task_metadata", "node_anchor_based_link_prediction_task_metadata", b"node_anchor_based_link_prediction_task_metadata", "node_based_task_metadata", b"node_based_task_metadata", "task_metadata", b"task_metadata"]) -> None: ...
        def WhichOneof(self, oneof_group: typing_extensions.Literal["task_metadata", b"task_metadata"]) -> typing_extensions.Literal["node_based_task_metadata", "node_anchor_based_link_prediction_task_metadata", "link_based_task_metadata"] | None: ...

    class SharedConfig(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        class SharedArgsEntry(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor

            KEY_FIELD_NUMBER: builtins.int
            VALUE_FIELD_NUMBER: builtins.int
            key: builtins.str
            value: builtins.str
            def __init__(
                self,
                *,
                key: builtins.str = ...,
                value: builtins.str = ...,
            ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

        PREPROCESSED_METADATA_URI_FIELD_NUMBER: builtins.int
        FLATTENED_GRAPH_METADATA_FIELD_NUMBER: builtins.int
        DATASET_METADATA_FIELD_NUMBER: builtins.int
        TRAINED_MODEL_METADATA_FIELD_NUMBER: builtins.int
        INFERENCE_METADATA_FIELD_NUMBER: builtins.int
        POSTPROCESSED_METADATA_FIELD_NUMBER: builtins.int
        SHARED_ARGS_FIELD_NUMBER: builtins.int
        IS_GRAPH_DIRECTED_FIELD_NUMBER: builtins.int
        SHOULD_SKIP_TRAINING_FIELD_NUMBER: builtins.int
        SHOULD_SKIP_AUTOMATIC_TEMP_ASSET_CLEANUP_FIELD_NUMBER: builtins.int
        SHOULD_SKIP_INFERENCE_FIELD_NUMBER: builtins.int
        SHOULD_SKIP_MODEL_EVALUATION_FIELD_NUMBER: builtins.int
        SHOULD_INCLUDE_ISOLATED_NODES_IN_TRAINING_FIELD_NUMBER: builtins.int
        preprocessed_metadata_uri: builtins.str
        """Uri where DataPreprocessor generates the PreprocessedMetadata proto."""
        @property
        def flattened_graph_metadata(self) -> snapchat.research.gbml.flattened_graph_metadata_pb2.FlattenedGraphMetadata:
            """FlattenedGraphMetadata message, which designates locations of GraphFlat outputs."""
        @property
        def dataset_metadata(self) -> snapchat.research.gbml.dataset_metadata_pb2.DatasetMetadata:
            """DatasetMetadata message, which designates location of SplitGenerator outputs."""
        @property
        def trained_model_metadata(self) -> snapchat.research.gbml.trained_model_metadata_pb2.TrainedModelMetadata:
            """TrainedModelMetadata message, which designates location of Trainer outputs."""
        @property
        def inference_metadata(self) -> snapchat.research.gbml.inference_metadata_pb2.InferenceMetadata:
            """InferenceMetadata message, which designates location of Inferencer outputs."""
        @property
        def postprocessed_metadata(self) -> snapchat.research.gbml.postprocessed_metadata_pb2.PostProcessedMetadata:
            """PostProcessedMetadata message, which designates location of PostProcessor outputs."""
        @property
        def shared_args(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]: ...
        is_graph_directed: builtins.bool
        """is the graph directed or undirected (bidirectional)"""
        should_skip_training: builtins.bool
        """to skip training or not (inference only)"""
        should_skip_automatic_temp_asset_cleanup: builtins.bool
        """If set to true, will skip automatic clean up of temp assets
        Useful if you are running hyper param tuning jobs and dont want to continuously
        run the whole pipeline
        """
        should_skip_inference: builtins.bool
        """to skip inference or not (for training only jobs)"""
        should_skip_model_evaluation: builtins.bool
        """If set, we will not compute or export model metrics like MRR, etc
        Has a side effect if should_skip_training is set as well to result in
        not generating training samples and only RNNs needed for inference.
        """
        should_include_isolated_nodes_in_training: builtins.bool
        """If set to true, will include isolated nodes in training data
        As isolated nodes do not have positive neighbors, self loop will be added
        SGS outputs training samples including isolated nodes, trainer adds self loops in training subgraphs
        """
        def __init__(
            self,
            *,
            preprocessed_metadata_uri: builtins.str = ...,
            flattened_graph_metadata: snapchat.research.gbml.flattened_graph_metadata_pb2.FlattenedGraphMetadata | None = ...,
            dataset_metadata: snapchat.research.gbml.dataset_metadata_pb2.DatasetMetadata | None = ...,
            trained_model_metadata: snapchat.research.gbml.trained_model_metadata_pb2.TrainedModelMetadata | None = ...,
            inference_metadata: snapchat.research.gbml.inference_metadata_pb2.InferenceMetadata | None = ...,
            postprocessed_metadata: snapchat.research.gbml.postprocessed_metadata_pb2.PostProcessedMetadata | None = ...,
            shared_args: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
            is_graph_directed: builtins.bool = ...,
            should_skip_training: builtins.bool = ...,
            should_skip_automatic_temp_asset_cleanup: builtins.bool = ...,
            should_skip_inference: builtins.bool = ...,
            should_skip_model_evaluation: builtins.bool = ...,
            should_include_isolated_nodes_in_training: builtins.bool = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["dataset_metadata", b"dataset_metadata", "flattened_graph_metadata", b"flattened_graph_metadata", "inference_metadata", b"inference_metadata", "postprocessed_metadata", b"postprocessed_metadata", "trained_model_metadata", b"trained_model_metadata"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["dataset_metadata", b"dataset_metadata", "flattened_graph_metadata", b"flattened_graph_metadata", "inference_metadata", b"inference_metadata", "is_graph_directed", b"is_graph_directed", "postprocessed_metadata", b"postprocessed_metadata", "preprocessed_metadata_uri", b"preprocessed_metadata_uri", "shared_args", b"shared_args", "should_include_isolated_nodes_in_training", b"should_include_isolated_nodes_in_training", "should_skip_automatic_temp_asset_cleanup", b"should_skip_automatic_temp_asset_cleanup", "should_skip_inference", b"should_skip_inference", "should_skip_model_evaluation", b"should_skip_model_evaluation", "should_skip_training", b"should_skip_training", "trained_model_metadata", b"trained_model_metadata"]) -> None: ...

    class DatasetConfig(google.protobuf.message.Message):
        """Contains config related to generating training data for a GML task."""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        class DataPreprocessorConfig(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor

            class DataPreprocessorArgsEntry(google.protobuf.message.Message):
                DESCRIPTOR: google.protobuf.descriptor.Descriptor

                KEY_FIELD_NUMBER: builtins.int
                VALUE_FIELD_NUMBER: builtins.int
                key: builtins.str
                value: builtins.str
                def __init__(
                    self,
                    *,
                    key: builtins.str = ...,
                    value: builtins.str = ...,
                ) -> None: ...
                def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

            DATA_PREPROCESSOR_CONFIG_CLS_PATH_FIELD_NUMBER: builtins.int
            DATA_PREPROCESSOR_ARGS_FIELD_NUMBER: builtins.int
            data_preprocessor_config_cls_path: builtins.str
            """Uri pointing to user-written DataPreprocessorConfig class definition."""
            @property
            def data_preprocessor_args(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]:
                """Arguments to instantiate concrete DataPreprocessorConfig instance with."""
            def __init__(
                self,
                *,
                data_preprocessor_config_cls_path: builtins.str = ...,
                data_preprocessor_args: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
            ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["data_preprocessor_args", b"data_preprocessor_args", "data_preprocessor_config_cls_path", b"data_preprocessor_config_cls_path"]) -> None: ...

        class SubgraphSamplerConfig(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor

            class ExperimentalFlagsEntry(google.protobuf.message.Message):
                DESCRIPTOR: google.protobuf.descriptor.Descriptor

                KEY_FIELD_NUMBER: builtins.int
                VALUE_FIELD_NUMBER: builtins.int
                key: builtins.str
                value: builtins.str
                def __init__(
                    self,
                    *,
                    key: builtins.str = ...,
                    value: builtins.str = ...,
                ) -> None: ...
                def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

            NUM_HOPS_FIELD_NUMBER: builtins.int
            NUM_NEIGHBORS_TO_SAMPLE_FIELD_NUMBER: builtins.int
            SUBGRAPH_SAMPLING_STRATEGY_FIELD_NUMBER: builtins.int
            NUM_POSITIVE_SAMPLES_FIELD_NUMBER: builtins.int
            EXPERIMENTAL_FLAGS_FIELD_NUMBER: builtins.int
            NUM_MAX_TRAINING_SAMPLES_TO_OUTPUT_FIELD_NUMBER: builtins.int
            NUM_USER_DEFINED_POSITIVE_SAMPLES_FIELD_NUMBER: builtins.int
            NUM_USER_DEFINED_NEGATIVE_SAMPLES_FIELD_NUMBER: builtins.int
            GRAPH_DB_CONFIG_FIELD_NUMBER: builtins.int
            num_hops: builtins.int
            """number of hops for subgraph sampler to include"""
            num_neighbors_to_sample: builtins.int
            """num_neighbors_to_sample indicates the max number of neighbors to sample for each hop
            num_neighbors_to_sample can be set to -1 to indicate no sampling (include all neighbors)
            """
            @property
            def subgraph_sampling_strategy(self) -> snapchat.research.gbml.subgraph_sampling_strategy_pb2.SubgraphSamplingStrategy:
                """num hops and num neighbors to sample is deprecated in favor of neighbor_sampling_strategy.
                Used to specify how the graphs which are used for message passing are constructed
                """
            num_positive_samples: builtins.int
            """number of positive samples (1hop) used in NodeAnchorBasedLinkPredictionTask
            as part of loss computation. It cannot be 0. And it's recommended to be larger
            than 1 due to the split filtering logic in split generator, to guarantee most samples to
            have at least one positive for it to not be excluded in training.
            """
            @property
            def experimental_flags(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]:
                """(deprecated)
                number of hard negative samples (3,4hops) used in NodeAnchorBasedLinkPredictionTask
                also used in loss computation. Random negatives will always be used even when there
                are no hard negatives
                uint32 num_hard_negative_samples = 4;

                Arguments for experimental_flags, can be permutation_strategy: 'deterministic' or 'non-deterministic'
                """
            num_max_training_samples_to_output: builtins.int
            """max number of training samples (i.e. nodes to store as main samples for training)
            If this is not provided or is set to 0, all nodes will be included for training
            """
            num_user_defined_positive_samples: builtins.int
            """number of user defined positive samples. Used in NodeAnchorBasedLinkPredictionTask
            as part of loss computation.
            If `num_user_defined_positive_samples` is specified `num_positive_samples` will be ignored as
            positive samples will only be drawn from user defined positive samples.
            """
            num_user_defined_negative_samples: builtins.int
            """number of user defined negative samples.
            Treated as hard negative samples. Used in NodeAnchorBasedLinkPredictionTask
            Also used in loss computation. Random negatives will always be used even when there
            are no user defined hard negatives
            """
            @property
            def graph_db_config(self) -> global___GbmlConfig.GraphDBConfig:
                """If specified, intention is to run ingestion into graphDB for subgraph sampler"""
            def __init__(
                self,
                *,
                num_hops: builtins.int = ...,
                num_neighbors_to_sample: builtins.int = ...,
                subgraph_sampling_strategy: snapchat.research.gbml.subgraph_sampling_strategy_pb2.SubgraphSamplingStrategy | None = ...,
                num_positive_samples: builtins.int = ...,
                experimental_flags: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
                num_max_training_samples_to_output: builtins.int = ...,
                num_user_defined_positive_samples: builtins.int = ...,
                num_user_defined_negative_samples: builtins.int = ...,
                graph_db_config: global___GbmlConfig.GraphDBConfig | None = ...,
            ) -> None: ...
            def HasField(self, field_name: typing_extensions.Literal["graph_db_config", b"graph_db_config", "subgraph_sampling_strategy", b"subgraph_sampling_strategy"]) -> builtins.bool: ...
            def ClearField(self, field_name: typing_extensions.Literal["experimental_flags", b"experimental_flags", "graph_db_config", b"graph_db_config", "num_hops", b"num_hops", "num_max_training_samples_to_output", b"num_max_training_samples_to_output", "num_neighbors_to_sample", b"num_neighbors_to_sample", "num_positive_samples", b"num_positive_samples", "num_user_defined_negative_samples", b"num_user_defined_negative_samples", "num_user_defined_positive_samples", b"num_user_defined_positive_samples", "subgraph_sampling_strategy", b"subgraph_sampling_strategy"]) -> None: ...

        class SplitGeneratorConfig(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor

            class SplitStrategyArgsEntry(google.protobuf.message.Message):
                DESCRIPTOR: google.protobuf.descriptor.Descriptor

                KEY_FIELD_NUMBER: builtins.int
                VALUE_FIELD_NUMBER: builtins.int
                key: builtins.str
                value: builtins.str
                def __init__(
                    self,
                    *,
                    key: builtins.str = ...,
                    value: builtins.str = ...,
                ) -> None: ...
                def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

            class AssignerArgsEntry(google.protobuf.message.Message):
                DESCRIPTOR: google.protobuf.descriptor.Descriptor

                KEY_FIELD_NUMBER: builtins.int
                VALUE_FIELD_NUMBER: builtins.int
                key: builtins.str
                value: builtins.str
                def __init__(
                    self,
                    *,
                    key: builtins.str = ...,
                    value: builtins.str = ...,
                ) -> None: ...
                def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

            SPLIT_STRATEGY_CLS_PATH_FIELD_NUMBER: builtins.int
            SPLIT_STRATEGY_ARGS_FIELD_NUMBER: builtins.int
            ASSIGNER_CLS_PATH_FIELD_NUMBER: builtins.int
            ASSIGNER_ARGS_FIELD_NUMBER: builtins.int
            split_strategy_cls_path: builtins.str
            """Module path to concrete SplitStrategy instance."""
            @property
            def split_strategy_args(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]:
                """Arguments to instantiate concrete SplitStrategy instance with."""
            assigner_cls_path: builtins.str
            """Module path to concrete Assigner instance"""
            @property
            def assigner_args(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]:
                """Arguments to instantiate concrete Assigner instance with."""
            def __init__(
                self,
                *,
                split_strategy_cls_path: builtins.str = ...,
                split_strategy_args: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
                assigner_cls_path: builtins.str = ...,
                assigner_args: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
            ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["assigner_args", b"assigner_args", "assigner_cls_path", b"assigner_cls_path", "split_strategy_args", b"split_strategy_args", "split_strategy_cls_path", b"split_strategy_cls_path"]) -> None: ...

        DATA_PREPROCESSOR_CONFIG_FIELD_NUMBER: builtins.int
        SUBGRAPH_SAMPLER_CONFIG_FIELD_NUMBER: builtins.int
        SPLIT_GENERATOR_CONFIG_FIELD_NUMBER: builtins.int
        @property
        def data_preprocessor_config(self) -> global___GbmlConfig.DatasetConfig.DataPreprocessorConfig: ...
        @property
        def subgraph_sampler_config(self) -> global___GbmlConfig.DatasetConfig.SubgraphSamplerConfig: ...
        @property
        def split_generator_config(self) -> global___GbmlConfig.DatasetConfig.SplitGeneratorConfig: ...
        def __init__(
            self,
            *,
            data_preprocessor_config: global___GbmlConfig.DatasetConfig.DataPreprocessorConfig | None = ...,
            subgraph_sampler_config: global___GbmlConfig.DatasetConfig.SubgraphSamplerConfig | None = ...,
            split_generator_config: global___GbmlConfig.DatasetConfig.SplitGeneratorConfig | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["data_preprocessor_config", b"data_preprocessor_config", "split_generator_config", b"split_generator_config", "subgraph_sampler_config", b"subgraph_sampler_config"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["data_preprocessor_config", b"data_preprocessor_config", "split_generator_config", b"split_generator_config", "subgraph_sampler_config", b"subgraph_sampler_config"]) -> None: ...

    class GraphDBConfig(google.protobuf.message.Message):
        """Generic Configuration for a GraphDB connection."""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        class GraphDbIngestionArgsEntry(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor

            KEY_FIELD_NUMBER: builtins.int
            VALUE_FIELD_NUMBER: builtins.int
            key: builtins.str
            value: builtins.str
            def __init__(
                self,
                *,
                key: builtins.str = ...,
                value: builtins.str = ...,
            ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

        class GraphDbArgsEntry(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor

            KEY_FIELD_NUMBER: builtins.int
            VALUE_FIELD_NUMBER: builtins.int
            key: builtins.str
            value: builtins.str
            def __init__(
                self,
                *,
                key: builtins.str = ...,
                value: builtins.str = ...,
            ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

        class GraphDBServiceConfig(google.protobuf.message.Message):
            """Scala-specific configuration."""

            DESCRIPTOR: google.protobuf.descriptor.Descriptor

            GRAPH_DB_CLIENT_CLASS_PATH_FIELD_NUMBER: builtins.int
            graph_db_client_class_path: builtins.str
            """Scala absolute class path pointing to an implementation of `DBClient[DBResult]`
            e.g. `my.team.graph_db.DBClient`.
            """
            def __init__(
                self,
                *,
                graph_db_client_class_path: builtins.str = ...,
            ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["graph_db_client_class_path", b"graph_db_client_class_path"]) -> None: ...

        GRAPH_DB_INGESTION_CLS_PATH_FIELD_NUMBER: builtins.int
        GRAPH_DB_INGESTION_ARGS_FIELD_NUMBER: builtins.int
        GRAPH_DB_ARGS_FIELD_NUMBER: builtins.int
        GRAPH_DB_SAMPLER_CONFIG_FIELD_NUMBER: builtins.int
        graph_db_ingestion_cls_path: builtins.str
        """Python class path pointing to user-written 
        `BaseIngestion`` class definition. e.g. `my.team.graph_db.BaseInjectionImpl`.
        This class is currently, as an implementation detail, used for injestion only.
        We document this *purely* for information purposes and may change the implementation at any time.
        """
        @property
        def graph_db_ingestion_args(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]:
            """Arguments to instantiate concrete BaseIngestion instance with."""
        @property
        def graph_db_args(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]:
            """General arguments required for graphDB (graph space, port, etc.)
            These are passed to both the Python and Scala implementations.
            """
        @property
        def graph_db_sampler_config(self) -> global___GbmlConfig.GraphDBConfig.GraphDBServiceConfig:
            """If provided, then an implementation of a `DBClient[DBResult]` Scala class
            for a GraphDB.
            Intended to be used to inject specific implementations at runtime.
            The object constructed from this is currently, as an implementation detail, used for sampling only.
            We document this *purely* for information purposes and may change the implementation at any time.
            """
        def __init__(
            self,
            *,
            graph_db_ingestion_cls_path: builtins.str = ...,
            graph_db_ingestion_args: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
            graph_db_args: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
            graph_db_sampler_config: global___GbmlConfig.GraphDBConfig.GraphDBServiceConfig | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["graph_db_sampler_config", b"graph_db_sampler_config"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["graph_db_args", b"graph_db_args", "graph_db_ingestion_args", b"graph_db_ingestion_args", "graph_db_ingestion_cls_path", b"graph_db_ingestion_cls_path", "graph_db_sampler_config", b"graph_db_sampler_config"]) -> None: ...

    class TrainerConfig(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        class TrainerArgsEntry(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor

            KEY_FIELD_NUMBER: builtins.int
            VALUE_FIELD_NUMBER: builtins.int
            key: builtins.str
            value: builtins.str
            def __init__(
                self,
                *,
                key: builtins.str = ...,
                value: builtins.str = ...,
            ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

        TRAINER_CLS_PATH_FIELD_NUMBER: builtins.int
        TRAINER_ARGS_FIELD_NUMBER: builtins.int
        CLS_PATH_FIELD_NUMBER: builtins.int
        COMMAND_FIELD_NUMBER: builtins.int
        SHOULD_LOG_TO_TENSORBOARD_FIELD_NUMBER: builtins.int
        trainer_cls_path: builtins.str
        """(deprecated)
        Uri pointing to user-written BaseTrainer class definition. Used for the subgraph-sampling-based training process.
        """
        @property
        def trainer_args(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]:
            """Arguments to parameterize training process with."""
        cls_path: builtins.str
        """Path pointing to trainer class definition."""
        command: builtins.str
        """Command to use for launching trainer job"""
        should_log_to_tensorboard: builtins.bool
        """Weather to log to tensorboard or not (defaults to false)"""
        def __init__(
            self,
            *,
            trainer_cls_path: builtins.str = ...,
            trainer_args: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
            cls_path: builtins.str = ...,
            command: builtins.str = ...,
            should_log_to_tensorboard: builtins.bool = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["cls_path", b"cls_path", "command", b"command", "executable", b"executable"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["cls_path", b"cls_path", "command", b"command", "executable", b"executable", "should_log_to_tensorboard", b"should_log_to_tensorboard", "trainer_args", b"trainer_args", "trainer_cls_path", b"trainer_cls_path"]) -> None: ...
        def WhichOneof(self, oneof_group: typing_extensions.Literal["executable", b"executable"]) -> typing_extensions.Literal["cls_path", "command"] | None: ...

    class InferencerConfig(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        class InferencerArgsEntry(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor

            KEY_FIELD_NUMBER: builtins.int
            VALUE_FIELD_NUMBER: builtins.int
            key: builtins.str
            value: builtins.str
            def __init__(
                self,
                *,
                key: builtins.str = ...,
                value: builtins.str = ...,
            ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

        INFERENCER_ARGS_FIELD_NUMBER: builtins.int
        INFERENCER_CLS_PATH_FIELD_NUMBER: builtins.int
        CLS_PATH_FIELD_NUMBER: builtins.int
        COMMAND_FIELD_NUMBER: builtins.int
        INFERENCE_BATCH_SIZE_FIELD_NUMBER: builtins.int
        @property
        def inferencer_args(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]: ...
        inferencer_cls_path: builtins.str
        """(deprecated)
        Path to modeling task spec class path to construct model for inference. Used for the subgraph-sampling-based inference process.
        """
        cls_path: builtins.str
        """Path pointing to inferencer class definition."""
        command: builtins.str
        """Command to use for launching inference job"""
        inference_batch_size: builtins.int
        """Optional. If set, will be used to batch inference samples to a specific size before call for inference is made
        Defaults to setting in python/gigl/src/inference/gnn_inferencer.py
        """
        def __init__(
            self,
            *,
            inferencer_args: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
            inferencer_cls_path: builtins.str = ...,
            cls_path: builtins.str = ...,
            command: builtins.str = ...,
            inference_batch_size: builtins.int = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["cls_path", b"cls_path", "command", b"command", "executable", b"executable"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["cls_path", b"cls_path", "command", b"command", "executable", b"executable", "inference_batch_size", b"inference_batch_size", "inferencer_args", b"inferencer_args", "inferencer_cls_path", b"inferencer_cls_path"]) -> None: ...
        def WhichOneof(self, oneof_group: typing_extensions.Literal["executable", b"executable"]) -> typing_extensions.Literal["cls_path", "command"] | None: ...

    class PostProcessorConfig(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        class PostProcessorArgsEntry(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor

            KEY_FIELD_NUMBER: builtins.int
            VALUE_FIELD_NUMBER: builtins.int
            key: builtins.str
            value: builtins.str
            def __init__(
                self,
                *,
                key: builtins.str = ...,
                value: builtins.str = ...,
            ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

        POST_PROCESSOR_ARGS_FIELD_NUMBER: builtins.int
        POST_PROCESSOR_CLS_PATH_FIELD_NUMBER: builtins.int
        @property
        def post_processor_args(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]: ...
        post_processor_cls_path: builtins.str
        def __init__(
            self,
            *,
            post_processor_args: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
            post_processor_cls_path: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["post_processor_args", b"post_processor_args", "post_processor_cls_path", b"post_processor_cls_path"]) -> None: ...

    class MetricsConfig(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        class MetricsArgsEntry(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor

            KEY_FIELD_NUMBER: builtins.int
            VALUE_FIELD_NUMBER: builtins.int
            key: builtins.str
            value: builtins.str
            def __init__(
                self,
                *,
                key: builtins.str = ...,
                value: builtins.str = ...,
            ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

        METRICS_CLS_PATH_FIELD_NUMBER: builtins.int
        METRICS_ARGS_FIELD_NUMBER: builtins.int
        metrics_cls_path: builtins.str
        @property
        def metrics_args(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]: ...
        def __init__(
            self,
            *,
            metrics_cls_path: builtins.str = ...,
            metrics_args: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["metrics_args", b"metrics_args", "metrics_cls_path", b"metrics_cls_path"]) -> None: ...

    class ProfilerConfig(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        class ProfilerArgsEntry(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor

            KEY_FIELD_NUMBER: builtins.int
            VALUE_FIELD_NUMBER: builtins.int
            key: builtins.str
            value: builtins.str
            def __init__(
                self,
                *,
                key: builtins.str = ...,
                value: builtins.str = ...,
            ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

        SHOULD_ENABLE_PROFILER_FIELD_NUMBER: builtins.int
        PROFILER_LOG_DIR_FIELD_NUMBER: builtins.int
        PROFILER_ARGS_FIELD_NUMBER: builtins.int
        should_enable_profiler: builtins.bool
        profiler_log_dir: builtins.str
        @property
        def profiler_args(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]: ...
        def __init__(
            self,
            *,
            should_enable_profiler: builtins.bool = ...,
            profiler_log_dir: builtins.str = ...,
            profiler_args: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["profiler_args", b"profiler_args", "profiler_log_dir", b"profiler_log_dir", "should_enable_profiler", b"should_enable_profiler"]) -> None: ...

    class FeatureFlagsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        value: builtins.str
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    TASK_METADATA_FIELD_NUMBER: builtins.int
    GRAPH_METADATA_FIELD_NUMBER: builtins.int
    SHARED_CONFIG_FIELD_NUMBER: builtins.int
    DATASET_CONFIG_FIELD_NUMBER: builtins.int
    TRAINER_CONFIG_FIELD_NUMBER: builtins.int
    INFERENCER_CONFIG_FIELD_NUMBER: builtins.int
    POST_PROCESSOR_CONFIG_FIELD_NUMBER: builtins.int
    METRICS_CONFIG_FIELD_NUMBER: builtins.int
    PROFILER_CONFIG_FIELD_NUMBER: builtins.int
    FEATURE_FLAGS_FIELD_NUMBER: builtins.int
    @property
    def task_metadata(self) -> global___GbmlConfig.TaskMetadata: ...
    @property
    def graph_metadata(self) -> snapchat.research.gbml.graph_schema_pb2.GraphMetadata: ...
    @property
    def shared_config(self) -> global___GbmlConfig.SharedConfig: ...
    @property
    def dataset_config(self) -> global___GbmlConfig.DatasetConfig: ...
    @property
    def trainer_config(self) -> global___GbmlConfig.TrainerConfig: ...
    @property
    def inferencer_config(self) -> global___GbmlConfig.InferencerConfig: ...
    @property
    def post_processor_config(self) -> global___GbmlConfig.PostProcessorConfig: ...
    @property
    def metrics_config(self) -> global___GbmlConfig.MetricsConfig: ...
    @property
    def profiler_config(self) -> global___GbmlConfig.ProfilerConfig: ...
    @property
    def feature_flags(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]: ...
    def __init__(
        self,
        *,
        task_metadata: global___GbmlConfig.TaskMetadata | None = ...,
        graph_metadata: snapchat.research.gbml.graph_schema_pb2.GraphMetadata | None = ...,
        shared_config: global___GbmlConfig.SharedConfig | None = ...,
        dataset_config: global___GbmlConfig.DatasetConfig | None = ...,
        trainer_config: global___GbmlConfig.TrainerConfig | None = ...,
        inferencer_config: global___GbmlConfig.InferencerConfig | None = ...,
        post_processor_config: global___GbmlConfig.PostProcessorConfig | None = ...,
        metrics_config: global___GbmlConfig.MetricsConfig | None = ...,
        profiler_config: global___GbmlConfig.ProfilerConfig | None = ...,
        feature_flags: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["dataset_config", b"dataset_config", "graph_metadata", b"graph_metadata", "inferencer_config", b"inferencer_config", "metrics_config", b"metrics_config", "post_processor_config", b"post_processor_config", "profiler_config", b"profiler_config", "shared_config", b"shared_config", "task_metadata", b"task_metadata", "trainer_config", b"trainer_config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["dataset_config", b"dataset_config", "feature_flags", b"feature_flags", "graph_metadata", b"graph_metadata", "inferencer_config", b"inferencer_config", "metrics_config", b"metrics_config", "post_processor_config", b"post_processor_config", "profiler_config", b"profiler_config", "shared_config", b"shared_config", "task_metadata", b"task_metadata", "trainer_config", b"trainer_config"]) -> None: ...

global___GbmlConfig = GbmlConfig
