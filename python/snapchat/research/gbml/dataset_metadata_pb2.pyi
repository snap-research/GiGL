"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class SupervisedNodeClassificationDataset(google.protobuf.message.Message):
    """Stores SupervisedNodeClassificationSample-relevant output"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TRAIN_DATA_URI_FIELD_NUMBER: builtins.int
    TEST_DATA_URI_FIELD_NUMBER: builtins.int
    VAL_DATA_URI_FIELD_NUMBER: builtins.int
    train_data_uri: builtins.str
    test_data_uri: builtins.str
    val_data_uri: builtins.str
    def __init__(
        self,
        *,
        train_data_uri: builtins.str = ...,
        test_data_uri: builtins.str = ...,
        val_data_uri: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["test_data_uri", b"test_data_uri", "train_data_uri", b"train_data_uri", "val_data_uri", b"val_data_uri"]) -> None: ...

global___SupervisedNodeClassificationDataset = SupervisedNodeClassificationDataset

class NodeAnchorBasedLinkPredictionDataset(google.protobuf.message.Message):
    """Stores NodeAnchorBasedLinkPredictionSample-relevant output"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class TrainNodeTypeToRandomNegativeDataUriEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        value: builtins.str
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    class ValNodeTypeToRandomNegativeDataUriEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        value: builtins.str
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    class TestNodeTypeToRandomNegativeDataUriEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        value: builtins.str
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    TRAIN_MAIN_DATA_URI_FIELD_NUMBER: builtins.int
    TEST_MAIN_DATA_URI_FIELD_NUMBER: builtins.int
    VAL_MAIN_DATA_URI_FIELD_NUMBER: builtins.int
    TRAIN_NODE_TYPE_TO_RANDOM_NEGATIVE_DATA_URI_FIELD_NUMBER: builtins.int
    VAL_NODE_TYPE_TO_RANDOM_NEGATIVE_DATA_URI_FIELD_NUMBER: builtins.int
    TEST_NODE_TYPE_TO_RANDOM_NEGATIVE_DATA_URI_FIELD_NUMBER: builtins.int
    train_main_data_uri: builtins.str
    test_main_data_uri: builtins.str
    val_main_data_uri: builtins.str
    @property
    def train_node_type_to_random_negative_data_uri(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]: ...
    @property
    def val_node_type_to_random_negative_data_uri(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]: ...
    @property
    def test_node_type_to_random_negative_data_uri(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]: ...
    def __init__(
        self,
        *,
        train_main_data_uri: builtins.str = ...,
        test_main_data_uri: builtins.str = ...,
        val_main_data_uri: builtins.str = ...,
        train_node_type_to_random_negative_data_uri: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
        val_node_type_to_random_negative_data_uri: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
        test_node_type_to_random_negative_data_uri: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["test_main_data_uri", b"test_main_data_uri", "test_node_type_to_random_negative_data_uri", b"test_node_type_to_random_negative_data_uri", "train_main_data_uri", b"train_main_data_uri", "train_node_type_to_random_negative_data_uri", b"train_node_type_to_random_negative_data_uri", "val_main_data_uri", b"val_main_data_uri", "val_node_type_to_random_negative_data_uri", b"val_node_type_to_random_negative_data_uri"]) -> None: ...

global___NodeAnchorBasedLinkPredictionDataset = NodeAnchorBasedLinkPredictionDataset

class SupervisedLinkBasedTaskSplitDataset(google.protobuf.message.Message):
    """Stores SupervisedLinkBasedTaskSample-relevant output"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TRAIN_DATA_URI_FIELD_NUMBER: builtins.int
    TEST_DATA_URI_FIELD_NUMBER: builtins.int
    VAL_DATA_URI_FIELD_NUMBER: builtins.int
    train_data_uri: builtins.str
    test_data_uri: builtins.str
    val_data_uri: builtins.str
    def __init__(
        self,
        *,
        train_data_uri: builtins.str = ...,
        test_data_uri: builtins.str = ...,
        val_data_uri: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["test_data_uri", b"test_data_uri", "train_data_uri", b"train_data_uri", "val_data_uri", b"val_data_uri"]) -> None: ...

global___SupervisedLinkBasedTaskSplitDataset = SupervisedLinkBasedTaskSplitDataset

class DatasetMetadata(google.protobuf.message.Message):
    """Stores final dataset output by SplitGenerator"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SUPERVISED_NODE_CLASSIFICATION_DATASET_FIELD_NUMBER: builtins.int
    NODE_ANCHOR_BASED_LINK_PREDICTION_DATASET_FIELD_NUMBER: builtins.int
    SUPERVISED_LINK_BASED_TASK_DATASET_FIELD_NUMBER: builtins.int
    @property
    def supervised_node_classification_dataset(self) -> global___SupervisedNodeClassificationDataset:
        """indicates the output is of SupervisedNodeClassificationSamples"""
    @property
    def node_anchor_based_link_prediction_dataset(self) -> global___NodeAnchorBasedLinkPredictionDataset:
        """indicates the output is of NodeAnchorBasedLinkPredictionSamples"""
    @property
    def supervised_link_based_task_dataset(self) -> global___SupervisedLinkBasedTaskSplitDataset:
        """indicates the output is of SupervisedLinkBasedTaskSamples"""
    def __init__(
        self,
        *,
        supervised_node_classification_dataset: global___SupervisedNodeClassificationDataset | None = ...,
        node_anchor_based_link_prediction_dataset: global___NodeAnchorBasedLinkPredictionDataset | None = ...,
        supervised_link_based_task_dataset: global___SupervisedLinkBasedTaskSplitDataset | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["node_anchor_based_link_prediction_dataset", b"node_anchor_based_link_prediction_dataset", "output_metadata", b"output_metadata", "supervised_link_based_task_dataset", b"supervised_link_based_task_dataset", "supervised_node_classification_dataset", b"supervised_node_classification_dataset"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["node_anchor_based_link_prediction_dataset", b"node_anchor_based_link_prediction_dataset", "output_metadata", b"output_metadata", "supervised_link_based_task_dataset", b"supervised_link_based_task_dataset", "supervised_node_classification_dataset", b"supervised_node_classification_dataset"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["output_metadata", b"output_metadata"]) -> typing_extensions.Literal["supervised_node_classification_dataset", "node_anchor_based_link_prediction_dataset", "supervised_link_based_task_dataset"] | None: ...

global___DatasetMetadata = DatasetMetadata
