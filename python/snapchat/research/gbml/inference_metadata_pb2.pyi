"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class InferenceMetadata(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class NodeTypeToInferencerOutputInfoMapEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___InferenceOutput: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___InferenceOutput | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    NODE_TYPE_TO_INFERENCER_OUTPUT_INFO_MAP_FIELD_NUMBER: builtins.int
    @property
    def node_type_to_inferencer_output_info_map(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___InferenceOutput]:
        """Map of node type to outputs from inferencer"""
    def __init__(
        self,
        *,
        node_type_to_inferencer_output_info_map: collections.abc.Mapping[builtins.str, global___InferenceOutput] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["node_type_to_inferencer_output_info_map", b"node_type_to_inferencer_output_info_map"]) -> None: ...

global___InferenceMetadata = InferenceMetadata

class InferenceOutput(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    EMBEDDINGS_PATH_FIELD_NUMBER: builtins.int
    PREDICTIONS_PATH_FIELD_NUMBER: builtins.int
    embeddings_path: builtins.str
    """Embeddings from model output"""
    predictions_path: builtins.str
    """Predictions from model output"""
    def __init__(
        self,
        *,
        embeddings_path: builtins.str | None = ...,
        predictions_path: builtins.str | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_embeddings_path", b"_embeddings_path", "_predictions_path", b"_predictions_path", "embeddings_path", b"embeddings_path", "predictions_path", b"predictions_path"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_embeddings_path", b"_embeddings_path", "_predictions_path", b"_predictions_path", "embeddings_path", b"embeddings_path", "predictions_path", b"predictions_path"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_embeddings_path", b"_embeddings_path"]) -> typing_extensions.Literal["embeddings_path"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_predictions_path", b"_predictions_path"]) -> typing_extensions.Literal["predictions_path"] | None: ...

global___InferenceOutput = InferenceOutput
