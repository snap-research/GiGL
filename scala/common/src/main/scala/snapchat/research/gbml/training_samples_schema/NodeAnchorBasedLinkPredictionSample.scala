// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package snapchat.research.gbml.training_samples_schema

/** @param rootNode
  *   The main node for the sample
  * @param hardNegEdges
  *   Hard negative edges: destination node is a negative example to the root_node
  *   Can be "fake" edges i.e. destination is a non neighbor of the root_node or user-defined
  * @param posEdges
  *   Positive edges: destination node is a positive example to the root_node
  *   Can be "real" edges i.e. destination is a neighbor of the root_node or user-defined
  * @param negEdges
  *   (DEPRECATED) Random negatives edges, now provided by batch-shared random negatives
  *   in RootedNodeNeighborhood and in-batch negatives
  * @param neighborhood
  *   The khop neighborhoods of root/pos/neg nodes are merged in proto definition,
  *   therefore in training additional fast tree search needs to be done to retrieve
  *   the relevant k hop neighborhoods for each node
  */
@SerialVersionUID(0L)
final case class NodeAnchorBasedLinkPredictionSample(
    rootNode: _root_.scala.Option[snapchat.research.gbml.graph_schema.Node] = _root_.scala.None,
    hardNegEdges: _root_.scala.Seq[snapchat.research.gbml.graph_schema.Edge] = _root_.scala.Seq.empty,
    posEdges: _root_.scala.Seq[snapchat.research.gbml.graph_schema.Edge] = _root_.scala.Seq.empty,
    negEdges: _root_.scala.Seq[snapchat.research.gbml.graph_schema.Edge] = _root_.scala.Seq.empty,
    neighborhood: _root_.scala.Option[snapchat.research.gbml.graph_schema.Graph] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[NodeAnchorBasedLinkPredictionSample] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (rootNode.isDefined) {
        val __value = rootNode.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      hardNegEdges.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      posEdges.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      negEdges.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      if (neighborhood.isDefined) {
        val __value = neighborhood.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      rootNode.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      hardNegEdges.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      neighborhood.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      posEdges.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      negEdges.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getRootNode: snapchat.research.gbml.graph_schema.Node = rootNode.getOrElse(snapchat.research.gbml.graph_schema.Node.defaultInstance)
    def clearRootNode: NodeAnchorBasedLinkPredictionSample = copy(rootNode = _root_.scala.None)
    def withRootNode(__v: snapchat.research.gbml.graph_schema.Node): NodeAnchorBasedLinkPredictionSample = copy(rootNode = Option(__v))
    def clearHardNegEdges = copy(hardNegEdges = _root_.scala.Seq.empty)
    def addHardNegEdges(__vs: snapchat.research.gbml.graph_schema.Edge *): NodeAnchorBasedLinkPredictionSample = addAllHardNegEdges(__vs)
    def addAllHardNegEdges(__vs: Iterable[snapchat.research.gbml.graph_schema.Edge]): NodeAnchorBasedLinkPredictionSample = copy(hardNegEdges = hardNegEdges ++ __vs)
    def withHardNegEdges(__v: _root_.scala.Seq[snapchat.research.gbml.graph_schema.Edge]): NodeAnchorBasedLinkPredictionSample = copy(hardNegEdges = __v)
    def clearPosEdges = copy(posEdges = _root_.scala.Seq.empty)
    def addPosEdges(__vs: snapchat.research.gbml.graph_schema.Edge *): NodeAnchorBasedLinkPredictionSample = addAllPosEdges(__vs)
    def addAllPosEdges(__vs: Iterable[snapchat.research.gbml.graph_schema.Edge]): NodeAnchorBasedLinkPredictionSample = copy(posEdges = posEdges ++ __vs)
    def withPosEdges(__v: _root_.scala.Seq[snapchat.research.gbml.graph_schema.Edge]): NodeAnchorBasedLinkPredictionSample = copy(posEdges = __v)
    def clearNegEdges = copy(negEdges = _root_.scala.Seq.empty)
    def addNegEdges(__vs: snapchat.research.gbml.graph_schema.Edge *): NodeAnchorBasedLinkPredictionSample = addAllNegEdges(__vs)
    def addAllNegEdges(__vs: Iterable[snapchat.research.gbml.graph_schema.Edge]): NodeAnchorBasedLinkPredictionSample = copy(negEdges = negEdges ++ __vs)
    def withNegEdges(__v: _root_.scala.Seq[snapchat.research.gbml.graph_schema.Edge]): NodeAnchorBasedLinkPredictionSample = copy(negEdges = __v)
    def getNeighborhood: snapchat.research.gbml.graph_schema.Graph = neighborhood.getOrElse(snapchat.research.gbml.graph_schema.Graph.defaultInstance)
    def clearNeighborhood: NodeAnchorBasedLinkPredictionSample = copy(neighborhood = _root_.scala.None)
    def withNeighborhood(__v: snapchat.research.gbml.graph_schema.Graph): NodeAnchorBasedLinkPredictionSample = copy(neighborhood = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => rootNode.orNull
        case 2 => hardNegEdges
        case 4 => posEdges
        case 5 => negEdges
        case 3 => neighborhood.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => rootNode.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PRepeated(hardNegEdges.iterator.map(_.toPMessage).toVector)
        case 4 => _root_.scalapb.descriptors.PRepeated(posEdges.iterator.map(_.toPMessage).toVector)
        case 5 => _root_.scalapb.descriptors.PRepeated(negEdges.iterator.map(_.toPMessage).toVector)
        case 3 => neighborhood.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: snapchat.research.gbml.training_samples_schema.NodeAnchorBasedLinkPredictionSample.type = snapchat.research.gbml.training_samples_schema.NodeAnchorBasedLinkPredictionSample
    // @@protoc_insertion_point(GeneratedMessage[snapchat.research.gbml.NodeAnchorBasedLinkPredictionSample])
}

object NodeAnchorBasedLinkPredictionSample extends scalapb.GeneratedMessageCompanion[snapchat.research.gbml.training_samples_schema.NodeAnchorBasedLinkPredictionSample] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[snapchat.research.gbml.training_samples_schema.NodeAnchorBasedLinkPredictionSample] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): snapchat.research.gbml.training_samples_schema.NodeAnchorBasedLinkPredictionSample = {
    var __rootNode: _root_.scala.Option[snapchat.research.gbml.graph_schema.Node] = _root_.scala.None
    val __hardNegEdges: _root_.scala.collection.immutable.VectorBuilder[snapchat.research.gbml.graph_schema.Edge] = new _root_.scala.collection.immutable.VectorBuilder[snapchat.research.gbml.graph_schema.Edge]
    val __posEdges: _root_.scala.collection.immutable.VectorBuilder[snapchat.research.gbml.graph_schema.Edge] = new _root_.scala.collection.immutable.VectorBuilder[snapchat.research.gbml.graph_schema.Edge]
    val __negEdges: _root_.scala.collection.immutable.VectorBuilder[snapchat.research.gbml.graph_schema.Edge] = new _root_.scala.collection.immutable.VectorBuilder[snapchat.research.gbml.graph_schema.Edge]
    var __neighborhood: _root_.scala.Option[snapchat.research.gbml.graph_schema.Graph] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __rootNode = Option(__rootNode.fold(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.graph_schema.Node](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __hardNegEdges += _root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.graph_schema.Edge](_input__)
        case 34 =>
          __posEdges += _root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.graph_schema.Edge](_input__)
        case 42 =>
          __negEdges += _root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.graph_schema.Edge](_input__)
        case 26 =>
          __neighborhood = Option(__neighborhood.fold(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.graph_schema.Graph](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    snapchat.research.gbml.training_samples_schema.NodeAnchorBasedLinkPredictionSample(
        rootNode = __rootNode,
        hardNegEdges = __hardNegEdges.result(),
        posEdges = __posEdges.result(),
        negEdges = __negEdges.result(),
        neighborhood = __neighborhood,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[snapchat.research.gbml.training_samples_schema.NodeAnchorBasedLinkPredictionSample] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      snapchat.research.gbml.training_samples_schema.NodeAnchorBasedLinkPredictionSample(
        rootNode = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[snapchat.research.gbml.graph_schema.Node]]),
        hardNegEdges = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[snapchat.research.gbml.graph_schema.Edge]]).getOrElse(_root_.scala.Seq.empty),
        posEdges = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[snapchat.research.gbml.graph_schema.Edge]]).getOrElse(_root_.scala.Seq.empty),
        negEdges = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Seq[snapchat.research.gbml.graph_schema.Edge]]).getOrElse(_root_.scala.Seq.empty),
        neighborhood = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[snapchat.research.gbml.graph_schema.Graph]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = TrainingSamplesSchemaProto.javaDescriptor.getMessageTypes().get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = TrainingSamplesSchemaProto.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = snapchat.research.gbml.graph_schema.Node
      case 2 => __out = snapchat.research.gbml.graph_schema.Edge
      case 4 => __out = snapchat.research.gbml.graph_schema.Edge
      case 5 => __out = snapchat.research.gbml.graph_schema.Edge
      case 3 => __out = snapchat.research.gbml.graph_schema.Graph
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = snapchat.research.gbml.training_samples_schema.NodeAnchorBasedLinkPredictionSample(
    rootNode = _root_.scala.None,
    hardNegEdges = _root_.scala.Seq.empty,
    posEdges = _root_.scala.Seq.empty,
    negEdges = _root_.scala.Seq.empty,
    neighborhood = _root_.scala.None
  )
  implicit class NodeAnchorBasedLinkPredictionSampleLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.training_samples_schema.NodeAnchorBasedLinkPredictionSample]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, snapchat.research.gbml.training_samples_schema.NodeAnchorBasedLinkPredictionSample](_l) {
    def rootNode: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.graph_schema.Node] = field(_.getRootNode)((c_, f_) => c_.copy(rootNode = Option(f_)))
    def optionalRootNode: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[snapchat.research.gbml.graph_schema.Node]] = field(_.rootNode)((c_, f_) => c_.copy(rootNode = f_))
    def hardNegEdges: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[snapchat.research.gbml.graph_schema.Edge]] = field(_.hardNegEdges)((c_, f_) => c_.copy(hardNegEdges = f_))
    def posEdges: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[snapchat.research.gbml.graph_schema.Edge]] = field(_.posEdges)((c_, f_) => c_.copy(posEdges = f_))
    def negEdges: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[snapchat.research.gbml.graph_schema.Edge]] = field(_.negEdges)((c_, f_) => c_.copy(negEdges = f_))
    def neighborhood: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.graph_schema.Graph] = field(_.getNeighborhood)((c_, f_) => c_.copy(neighborhood = Option(f_)))
    def optionalNeighborhood: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[snapchat.research.gbml.graph_schema.Graph]] = field(_.neighborhood)((c_, f_) => c_.copy(neighborhood = f_))
  }
  final val ROOT_NODE_FIELD_NUMBER = 1
  final val HARD_NEG_EDGES_FIELD_NUMBER = 2
  final val POS_EDGES_FIELD_NUMBER = 4
  final val NEG_EDGES_FIELD_NUMBER = 5
  final val NEIGHBORHOOD_FIELD_NUMBER = 3
  def of(
    rootNode: _root_.scala.Option[snapchat.research.gbml.graph_schema.Node],
    hardNegEdges: _root_.scala.Seq[snapchat.research.gbml.graph_schema.Edge],
    posEdges: _root_.scala.Seq[snapchat.research.gbml.graph_schema.Edge],
    negEdges: _root_.scala.Seq[snapchat.research.gbml.graph_schema.Edge],
    neighborhood: _root_.scala.Option[snapchat.research.gbml.graph_schema.Graph]
  ): _root_.snapchat.research.gbml.training_samples_schema.NodeAnchorBasedLinkPredictionSample = _root_.snapchat.research.gbml.training_samples_schema.NodeAnchorBasedLinkPredictionSample(
    rootNode,
    hardNegEdges,
    posEdges,
    negEdges,
    neighborhood
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[snapchat.research.gbml.NodeAnchorBasedLinkPredictionSample])
}
