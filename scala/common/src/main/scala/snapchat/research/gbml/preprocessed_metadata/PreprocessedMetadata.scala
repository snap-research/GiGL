// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package snapchat.research.gbml.preprocessed_metadata

/** @param condensedNodeTypeToPreprocessedMetadata
  *   Maps condensed node types to their respective post-TFTransform outputs.
  * @param condensedEdgeTypeToPreprocessedMetadata
  *   Maps condensed edge types to their respective post-TFTransform outputs.
  */
@SerialVersionUID(0L)
final case class PreprocessedMetadata(
    condensedNodeTypeToPreprocessedMetadata: _root_.scala.collection.immutable.Map[_root_.scala.Int, snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.NodeMetadataOutput] = _root_.scala.collection.immutable.Map.empty,
    condensedEdgeTypeToPreprocessedMetadata: _root_.scala.collection.immutable.Map[_root_.scala.Int, snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataOutput] = _root_.scala.collection.immutable.Map.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[PreprocessedMetadata] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      condensedNodeTypeToPreprocessedMetadata.foreach { __item =>
        val __value = snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata._typemapper_condensedNodeTypeToPreprocessedMetadata.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      condensedEdgeTypeToPreprocessedMetadata.foreach { __item =>
        val __value = snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata._typemapper_condensedEdgeTypeToPreprocessedMetadata.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      condensedNodeTypeToPreprocessedMetadata.foreach { __v =>
        val __m = snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata._typemapper_condensedNodeTypeToPreprocessedMetadata.toBase(__v)
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      condensedEdgeTypeToPreprocessedMetadata.foreach { __v =>
        val __m = snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata._typemapper_condensedEdgeTypeToPreprocessedMetadata.toBase(__v)
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def clearCondensedNodeTypeToPreprocessedMetadata = copy(condensedNodeTypeToPreprocessedMetadata = _root_.scala.collection.immutable.Map.empty)
    def addCondensedNodeTypeToPreprocessedMetadata(__vs: (_root_.scala.Int, snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.NodeMetadataOutput) *): PreprocessedMetadata = addAllCondensedNodeTypeToPreprocessedMetadata(__vs)
    def addAllCondensedNodeTypeToPreprocessedMetadata(__vs: Iterable[(_root_.scala.Int, snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.NodeMetadataOutput)]): PreprocessedMetadata = copy(condensedNodeTypeToPreprocessedMetadata = condensedNodeTypeToPreprocessedMetadata ++ __vs)
    def withCondensedNodeTypeToPreprocessedMetadata(__v: _root_.scala.collection.immutable.Map[_root_.scala.Int, snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.NodeMetadataOutput]): PreprocessedMetadata = copy(condensedNodeTypeToPreprocessedMetadata = __v)
    def clearCondensedEdgeTypeToPreprocessedMetadata = copy(condensedEdgeTypeToPreprocessedMetadata = _root_.scala.collection.immutable.Map.empty)
    def addCondensedEdgeTypeToPreprocessedMetadata(__vs: (_root_.scala.Int, snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataOutput) *): PreprocessedMetadata = addAllCondensedEdgeTypeToPreprocessedMetadata(__vs)
    def addAllCondensedEdgeTypeToPreprocessedMetadata(__vs: Iterable[(_root_.scala.Int, snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataOutput)]): PreprocessedMetadata = copy(condensedEdgeTypeToPreprocessedMetadata = condensedEdgeTypeToPreprocessedMetadata ++ __vs)
    def withCondensedEdgeTypeToPreprocessedMetadata(__v: _root_.scala.collection.immutable.Map[_root_.scala.Int, snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataOutput]): PreprocessedMetadata = copy(condensedEdgeTypeToPreprocessedMetadata = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => condensedNodeTypeToPreprocessedMetadata.iterator.map(snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata._typemapper_condensedNodeTypeToPreprocessedMetadata.toBase(_)).toSeq
        case 2 => condensedEdgeTypeToPreprocessedMetadata.iterator.map(snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata._typemapper_condensedEdgeTypeToPreprocessedMetadata.toBase(_)).toSeq
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(condensedNodeTypeToPreprocessedMetadata.iterator.map(snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata._typemapper_condensedNodeTypeToPreprocessedMetadata.toBase(_).toPMessage).toVector)
        case 2 => _root_.scalapb.descriptors.PRepeated(condensedEdgeTypeToPreprocessedMetadata.iterator.map(snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata._typemapper_condensedEdgeTypeToPreprocessedMetadata.toBase(_).toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.type = snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata
    // @@protoc_insertion_point(GeneratedMessage[snapchat.research.gbml.PreprocessedMetadata])
}

object PreprocessedMetadata extends scalapb.GeneratedMessageCompanion[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata = {
    val __condensedNodeTypeToPreprocessedMetadata: _root_.scala.collection.mutable.Builder[(_root_.scala.Int, snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.NodeMetadataOutput), _root_.scala.collection.immutable.Map[_root_.scala.Int, snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.NodeMetadataOutput]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Int, snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.NodeMetadataOutput]
    val __condensedEdgeTypeToPreprocessedMetadata: _root_.scala.collection.mutable.Builder[(_root_.scala.Int, snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataOutput), _root_.scala.collection.immutable.Map[_root_.scala.Int, snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataOutput]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Int, snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataOutput]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __condensedNodeTypeToPreprocessedMetadata += snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata._typemapper_condensedNodeTypeToPreprocessedMetadata.toCustom(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.CondensedNodeTypeToPreprocessedMetadataEntry](_input__))
        case 18 =>
          __condensedEdgeTypeToPreprocessedMetadata += snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata._typemapper_condensedEdgeTypeToPreprocessedMetadata.toCustom(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.CondensedEdgeTypeToPreprocessedMetadataEntry](_input__))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata(
        condensedNodeTypeToPreprocessedMetadata = __condensedNodeTypeToPreprocessedMetadata.result(),
        condensedEdgeTypeToPreprocessedMetadata = __condensedEdgeTypeToPreprocessedMetadata.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata(
        condensedNodeTypeToPreprocessedMetadata = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.CondensedNodeTypeToPreprocessedMetadataEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata._typemapper_condensedNodeTypeToPreprocessedMetadata.toCustom(_)).toMap,
        condensedEdgeTypeToPreprocessedMetadata = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.CondensedEdgeTypeToPreprocessedMetadataEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata._typemapper_condensedEdgeTypeToPreprocessedMetadata.toCustom(_)).toMap
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = PreprocessedMetadataProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = PreprocessedMetadataProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.CondensedNodeTypeToPreprocessedMetadataEntry
      case 2 => __out = snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.CondensedEdgeTypeToPreprocessedMetadataEntry
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.NodeMetadataOutput,
      _root_.snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataInfo,
      _root_.snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataOutput,
      _root_.snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.CondensedNodeTypeToPreprocessedMetadataEntry,
      _root_.snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.CondensedEdgeTypeToPreprocessedMetadataEntry
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata(
    condensedNodeTypeToPreprocessedMetadata = _root_.scala.collection.immutable.Map.empty,
    condensedEdgeTypeToPreprocessedMetadata = _root_.scala.collection.immutable.Map.empty
  )
  /** Houses metadata about node TFTransform output from DataPreprocessor.
    *
    * @param nodeIdKey
    *   The field in output TFRecords which references the node identifier.
    * @param featureKeys
    *   Fields in output TFRecords which reference features.
    * @param labelKeys
    *   Fields in output TFRecords which reference labels.
    * @param tfrecordUriPrefix
    *   GCS prefix which can be used to glob the TFRecord dataset.
    * @param schemaUri
    *   GCS path to a schema which can be used to parse the TFRecord dataset.
    * @param enumeratedNodeIdsBqTable
    *   BQ path to a table which stores the original to enumerated node id association.
    * @param enumeratedNodeDataBqTable
    *   BQ path to a table which stores the enumerated node id to node metadata association.
    * @param featureDim
    *   Feature dimension after preprocessing
    * @param transformFnAssetsUri
    *   Contains categorical feature vocabularies
    */
  @SerialVersionUID(0L)
  final case class NodeMetadataOutput(
      nodeIdKey: _root_.scala.Predef.String = "",
      featureKeys: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
      labelKeys: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
      tfrecordUriPrefix: _root_.scala.Predef.String = "",
      schemaUri: _root_.scala.Predef.String = "",
      enumeratedNodeIdsBqTable: _root_.scala.Predef.String = "",
      enumeratedNodeDataBqTable: _root_.scala.Predef.String = "",
      featureDim: _root_.scala.Option[_root_.scala.Int] = _root_.scala.None,
      transformFnAssetsUri: _root_.scala.Predef.String = "",
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[NodeMetadataOutput] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = nodeIdKey
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        featureKeys.foreach { __item =>
          val __value = __item
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
        labelKeys.foreach { __item =>
          val __value = __item
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
        
        {
          val __value = tfrecordUriPrefix
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
          }
        };
        
        {
          val __value = schemaUri
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
          }
        };
        
        {
          val __value = enumeratedNodeIdsBqTable
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, __value)
          }
        };
        
        {
          val __value = enumeratedNodeDataBqTable
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, __value)
          }
        };
        if (featureDim.isDefined) {
          val __value = featureDim.get
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(8, __value)
        };
        
        {
          val __value = transformFnAssetsUri
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(9, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = nodeIdKey
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        featureKeys.foreach { __v =>
          val __m = __v
          _output__.writeString(2, __m)
        };
        labelKeys.foreach { __v =>
          val __m = __v
          _output__.writeString(3, __m)
        };
        {
          val __v = tfrecordUriPrefix
          if (!__v.isEmpty) {
            _output__.writeString(4, __v)
          }
        };
        {
          val __v = schemaUri
          if (!__v.isEmpty) {
            _output__.writeString(5, __v)
          }
        };
        {
          val __v = enumeratedNodeIdsBqTable
          if (!__v.isEmpty) {
            _output__.writeString(6, __v)
          }
        };
        {
          val __v = enumeratedNodeDataBqTable
          if (!__v.isEmpty) {
            _output__.writeString(7, __v)
          }
        };
        featureDim.foreach { __v =>
          val __m = __v
          _output__.writeUInt32(8, __m)
        };
        {
          val __v = transformFnAssetsUri
          if (!__v.isEmpty) {
            _output__.writeString(9, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withNodeIdKey(__v: _root_.scala.Predef.String): NodeMetadataOutput = copy(nodeIdKey = __v)
      def clearFeatureKeys = copy(featureKeys = _root_.scala.Seq.empty)
      def addFeatureKeys(__vs: _root_.scala.Predef.String *): NodeMetadataOutput = addAllFeatureKeys(__vs)
      def addAllFeatureKeys(__vs: Iterable[_root_.scala.Predef.String]): NodeMetadataOutput = copy(featureKeys = featureKeys ++ __vs)
      def withFeatureKeys(__v: _root_.scala.Seq[_root_.scala.Predef.String]): NodeMetadataOutput = copy(featureKeys = __v)
      def clearLabelKeys = copy(labelKeys = _root_.scala.Seq.empty)
      def addLabelKeys(__vs: _root_.scala.Predef.String *): NodeMetadataOutput = addAllLabelKeys(__vs)
      def addAllLabelKeys(__vs: Iterable[_root_.scala.Predef.String]): NodeMetadataOutput = copy(labelKeys = labelKeys ++ __vs)
      def withLabelKeys(__v: _root_.scala.Seq[_root_.scala.Predef.String]): NodeMetadataOutput = copy(labelKeys = __v)
      def withTfrecordUriPrefix(__v: _root_.scala.Predef.String): NodeMetadataOutput = copy(tfrecordUriPrefix = __v)
      def withSchemaUri(__v: _root_.scala.Predef.String): NodeMetadataOutput = copy(schemaUri = __v)
      def withEnumeratedNodeIdsBqTable(__v: _root_.scala.Predef.String): NodeMetadataOutput = copy(enumeratedNodeIdsBqTable = __v)
      def withEnumeratedNodeDataBqTable(__v: _root_.scala.Predef.String): NodeMetadataOutput = copy(enumeratedNodeDataBqTable = __v)
      def getFeatureDim: _root_.scala.Int = featureDim.getOrElse(0)
      def clearFeatureDim: NodeMetadataOutput = copy(featureDim = _root_.scala.None)
      def withFeatureDim(__v: _root_.scala.Int): NodeMetadataOutput = copy(featureDim = Option(__v))
      def withTransformFnAssetsUri(__v: _root_.scala.Predef.String): NodeMetadataOutput = copy(transformFnAssetsUri = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = nodeIdKey
            if (__t != "") __t else null
          }
          case 2 => featureKeys
          case 3 => labelKeys
          case 4 => {
            val __t = tfrecordUriPrefix
            if (__t != "") __t else null
          }
          case 5 => {
            val __t = schemaUri
            if (__t != "") __t else null
          }
          case 6 => {
            val __t = enumeratedNodeIdsBqTable
            if (__t != "") __t else null
          }
          case 7 => {
            val __t = enumeratedNodeDataBqTable
            if (__t != "") __t else null
          }
          case 8 => featureDim.orNull
          case 9 => {
            val __t = transformFnAssetsUri
            if (__t != "") __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(nodeIdKey)
          case 2 => _root_.scalapb.descriptors.PRepeated(featureKeys.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
          case 3 => _root_.scalapb.descriptors.PRepeated(labelKeys.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
          case 4 => _root_.scalapb.descriptors.PString(tfrecordUriPrefix)
          case 5 => _root_.scalapb.descriptors.PString(schemaUri)
          case 6 => _root_.scalapb.descriptors.PString(enumeratedNodeIdsBqTable)
          case 7 => _root_.scalapb.descriptors.PString(enumeratedNodeDataBqTable)
          case 8 => featureDim.map(_root_.scalapb.descriptors.PInt(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 9 => _root_.scalapb.descriptors.PString(transformFnAssetsUri)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.NodeMetadataOutput.type = snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.NodeMetadataOutput
      // @@protoc_insertion_point(GeneratedMessage[snapchat.research.gbml.PreprocessedMetadata.NodeMetadataOutput])
  }
  
  object NodeMetadataOutput extends scalapb.GeneratedMessageCompanion[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.NodeMetadataOutput] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.NodeMetadataOutput] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.NodeMetadataOutput = {
      var __nodeIdKey: _root_.scala.Predef.String = ""
      val __featureKeys: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
      val __labelKeys: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
      var __tfrecordUriPrefix: _root_.scala.Predef.String = ""
      var __schemaUri: _root_.scala.Predef.String = ""
      var __enumeratedNodeIdsBqTable: _root_.scala.Predef.String = ""
      var __enumeratedNodeDataBqTable: _root_.scala.Predef.String = ""
      var __featureDim: _root_.scala.Option[_root_.scala.Int] = _root_.scala.None
      var __transformFnAssetsUri: _root_.scala.Predef.String = ""
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __nodeIdKey = _input__.readStringRequireUtf8()
          case 18 =>
            __featureKeys += _input__.readStringRequireUtf8()
          case 26 =>
            __labelKeys += _input__.readStringRequireUtf8()
          case 34 =>
            __tfrecordUriPrefix = _input__.readStringRequireUtf8()
          case 42 =>
            __schemaUri = _input__.readStringRequireUtf8()
          case 50 =>
            __enumeratedNodeIdsBqTable = _input__.readStringRequireUtf8()
          case 58 =>
            __enumeratedNodeDataBqTable = _input__.readStringRequireUtf8()
          case 64 =>
            __featureDim = Option(_input__.readUInt32())
          case 74 =>
            __transformFnAssetsUri = _input__.readStringRequireUtf8()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.NodeMetadataOutput(
          nodeIdKey = __nodeIdKey,
          featureKeys = __featureKeys.result(),
          labelKeys = __labelKeys.result(),
          tfrecordUriPrefix = __tfrecordUriPrefix,
          schemaUri = __schemaUri,
          enumeratedNodeIdsBqTable = __enumeratedNodeIdsBqTable,
          enumeratedNodeDataBqTable = __enumeratedNodeDataBqTable,
          featureDim = __featureDim,
          transformFnAssetsUri = __transformFnAssetsUri,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.NodeMetadataOutput] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.NodeMetadataOutput(
          nodeIdKey = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          featureKeys = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
          labelKeys = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
          tfrecordUriPrefix = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          schemaUri = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          enumeratedNodeIdsBqTable = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          enumeratedNodeDataBqTable = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          featureDim = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Int]]),
          transformFnAssetsUri = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.NodeMetadataOutput(
      nodeIdKey = "",
      featureKeys = _root_.scala.Seq.empty,
      labelKeys = _root_.scala.Seq.empty,
      tfrecordUriPrefix = "",
      schemaUri = "",
      enumeratedNodeIdsBqTable = "",
      enumeratedNodeDataBqTable = "",
      featureDim = _root_.scala.None,
      transformFnAssetsUri = ""
    )
    implicit class NodeMetadataOutputLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.NodeMetadataOutput]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.NodeMetadataOutput](_l) {
      def nodeIdKey: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.nodeIdKey)((c_, f_) => c_.copy(nodeIdKey = f_))
      def featureKeys: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.featureKeys)((c_, f_) => c_.copy(featureKeys = f_))
      def labelKeys: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.labelKeys)((c_, f_) => c_.copy(labelKeys = f_))
      def tfrecordUriPrefix: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.tfrecordUriPrefix)((c_, f_) => c_.copy(tfrecordUriPrefix = f_))
      def schemaUri: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.schemaUri)((c_, f_) => c_.copy(schemaUri = f_))
      def enumeratedNodeIdsBqTable: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.enumeratedNodeIdsBqTable)((c_, f_) => c_.copy(enumeratedNodeIdsBqTable = f_))
      def enumeratedNodeDataBqTable: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.enumeratedNodeDataBqTable)((c_, f_) => c_.copy(enumeratedNodeDataBqTable = f_))
      def featureDim: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getFeatureDim)((c_, f_) => c_.copy(featureDim = Option(f_)))
      def optionalFeatureDim: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Int]] = field(_.featureDim)((c_, f_) => c_.copy(featureDim = f_))
      def transformFnAssetsUri: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.transformFnAssetsUri)((c_, f_) => c_.copy(transformFnAssetsUri = f_))
    }
    final val NODE_ID_KEY_FIELD_NUMBER = 1
    final val FEATURE_KEYS_FIELD_NUMBER = 2
    final val LABEL_KEYS_FIELD_NUMBER = 3
    final val TFRECORD_URI_PREFIX_FIELD_NUMBER = 4
    final val SCHEMA_URI_FIELD_NUMBER = 5
    final val ENUMERATED_NODE_IDS_BQ_TABLE_FIELD_NUMBER = 6
    final val ENUMERATED_NODE_DATA_BQ_TABLE_FIELD_NUMBER = 7
    final val FEATURE_DIM_FIELD_NUMBER = 8
    final val TRANSFORM_FN_ASSETS_URI_FIELD_NUMBER = 9
    def of(
      nodeIdKey: _root_.scala.Predef.String,
      featureKeys: _root_.scala.Seq[_root_.scala.Predef.String],
      labelKeys: _root_.scala.Seq[_root_.scala.Predef.String],
      tfrecordUriPrefix: _root_.scala.Predef.String,
      schemaUri: _root_.scala.Predef.String,
      enumeratedNodeIdsBqTable: _root_.scala.Predef.String,
      enumeratedNodeDataBqTable: _root_.scala.Predef.String,
      featureDim: _root_.scala.Option[_root_.scala.Int],
      transformFnAssetsUri: _root_.scala.Predef.String
    ): _root_.snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.NodeMetadataOutput = _root_.snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.NodeMetadataOutput(
      nodeIdKey,
      featureKeys,
      labelKeys,
      tfrecordUriPrefix,
      schemaUri,
      enumeratedNodeIdsBqTable,
      enumeratedNodeDataBqTable,
      featureDim,
      transformFnAssetsUri
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[snapchat.research.gbml.PreprocessedMetadata.NodeMetadataOutput])
  }
  
  /** Houses metadata of edge features output from DataPreprocessor
    *
    * @param featureKeys
    *   Fields in output TFRecords which reference features.
    * @param labelKeys
    *   Fields in output TFRecords which reference labels.
    * @param tfrecordUriPrefix
    *   GCS prefix which can be used to glob the TFRecord dataset.
    * @param schemaUri
    *   GCS path to a schema which can be used to parse the TFRecord dataset.
    * @param enumeratedEdgeDataBqTable
    *   BQ path to a table which stores the enumerated node id to node metadata association.
    * @param featureDim
    *   Feature dimension after preprocessing
    * @param transformFnAssetsUri
    *   Contains categorical feature vocabularies
    */
  @SerialVersionUID(0L)
  final case class EdgeMetadataInfo(
      featureKeys: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
      labelKeys: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
      tfrecordUriPrefix: _root_.scala.Predef.String = "",
      schemaUri: _root_.scala.Predef.String = "",
      enumeratedEdgeDataBqTable: _root_.scala.Predef.String = "",
      featureDim: _root_.scala.Option[_root_.scala.Int] = _root_.scala.None,
      transformFnAssetsUri: _root_.scala.Predef.String = "",
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[EdgeMetadataInfo] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        featureKeys.foreach { __item =>
          val __value = __item
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
        labelKeys.foreach { __item =>
          val __value = __item
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
        
        {
          val __value = tfrecordUriPrefix
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
          }
        };
        
        {
          val __value = schemaUri
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
          }
        };
        
        {
          val __value = enumeratedEdgeDataBqTable
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
          }
        };
        if (featureDim.isDefined) {
          val __value = featureDim.get
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(6, __value)
        };
        
        {
          val __value = transformFnAssetsUri
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        featureKeys.foreach { __v =>
          val __m = __v
          _output__.writeString(1, __m)
        };
        labelKeys.foreach { __v =>
          val __m = __v
          _output__.writeString(2, __m)
        };
        {
          val __v = tfrecordUriPrefix
          if (!__v.isEmpty) {
            _output__.writeString(3, __v)
          }
        };
        {
          val __v = schemaUri
          if (!__v.isEmpty) {
            _output__.writeString(4, __v)
          }
        };
        {
          val __v = enumeratedEdgeDataBqTable
          if (!__v.isEmpty) {
            _output__.writeString(5, __v)
          }
        };
        featureDim.foreach { __v =>
          val __m = __v
          _output__.writeUInt32(6, __m)
        };
        {
          val __v = transformFnAssetsUri
          if (!__v.isEmpty) {
            _output__.writeString(7, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def clearFeatureKeys = copy(featureKeys = _root_.scala.Seq.empty)
      def addFeatureKeys(__vs: _root_.scala.Predef.String *): EdgeMetadataInfo = addAllFeatureKeys(__vs)
      def addAllFeatureKeys(__vs: Iterable[_root_.scala.Predef.String]): EdgeMetadataInfo = copy(featureKeys = featureKeys ++ __vs)
      def withFeatureKeys(__v: _root_.scala.Seq[_root_.scala.Predef.String]): EdgeMetadataInfo = copy(featureKeys = __v)
      def clearLabelKeys = copy(labelKeys = _root_.scala.Seq.empty)
      def addLabelKeys(__vs: _root_.scala.Predef.String *): EdgeMetadataInfo = addAllLabelKeys(__vs)
      def addAllLabelKeys(__vs: Iterable[_root_.scala.Predef.String]): EdgeMetadataInfo = copy(labelKeys = labelKeys ++ __vs)
      def withLabelKeys(__v: _root_.scala.Seq[_root_.scala.Predef.String]): EdgeMetadataInfo = copy(labelKeys = __v)
      def withTfrecordUriPrefix(__v: _root_.scala.Predef.String): EdgeMetadataInfo = copy(tfrecordUriPrefix = __v)
      def withSchemaUri(__v: _root_.scala.Predef.String): EdgeMetadataInfo = copy(schemaUri = __v)
      def withEnumeratedEdgeDataBqTable(__v: _root_.scala.Predef.String): EdgeMetadataInfo = copy(enumeratedEdgeDataBqTable = __v)
      def getFeatureDim: _root_.scala.Int = featureDim.getOrElse(0)
      def clearFeatureDim: EdgeMetadataInfo = copy(featureDim = _root_.scala.None)
      def withFeatureDim(__v: _root_.scala.Int): EdgeMetadataInfo = copy(featureDim = Option(__v))
      def withTransformFnAssetsUri(__v: _root_.scala.Predef.String): EdgeMetadataInfo = copy(transformFnAssetsUri = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => featureKeys
          case 2 => labelKeys
          case 3 => {
            val __t = tfrecordUriPrefix
            if (__t != "") __t else null
          }
          case 4 => {
            val __t = schemaUri
            if (__t != "") __t else null
          }
          case 5 => {
            val __t = enumeratedEdgeDataBqTable
            if (__t != "") __t else null
          }
          case 6 => featureDim.orNull
          case 7 => {
            val __t = transformFnAssetsUri
            if (__t != "") __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PRepeated(featureKeys.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
          case 2 => _root_.scalapb.descriptors.PRepeated(labelKeys.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
          case 3 => _root_.scalapb.descriptors.PString(tfrecordUriPrefix)
          case 4 => _root_.scalapb.descriptors.PString(schemaUri)
          case 5 => _root_.scalapb.descriptors.PString(enumeratedEdgeDataBqTable)
          case 6 => featureDim.map(_root_.scalapb.descriptors.PInt(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 7 => _root_.scalapb.descriptors.PString(transformFnAssetsUri)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataInfo.type = snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataInfo
      // @@protoc_insertion_point(GeneratedMessage[snapchat.research.gbml.PreprocessedMetadata.EdgeMetadataInfo])
  }
  
  object EdgeMetadataInfo extends scalapb.GeneratedMessageCompanion[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataInfo] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataInfo] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataInfo = {
      val __featureKeys: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
      val __labelKeys: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
      var __tfrecordUriPrefix: _root_.scala.Predef.String = ""
      var __schemaUri: _root_.scala.Predef.String = ""
      var __enumeratedEdgeDataBqTable: _root_.scala.Predef.String = ""
      var __featureDim: _root_.scala.Option[_root_.scala.Int] = _root_.scala.None
      var __transformFnAssetsUri: _root_.scala.Predef.String = ""
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __featureKeys += _input__.readStringRequireUtf8()
          case 18 =>
            __labelKeys += _input__.readStringRequireUtf8()
          case 26 =>
            __tfrecordUriPrefix = _input__.readStringRequireUtf8()
          case 34 =>
            __schemaUri = _input__.readStringRequireUtf8()
          case 42 =>
            __enumeratedEdgeDataBqTable = _input__.readStringRequireUtf8()
          case 48 =>
            __featureDim = Option(_input__.readUInt32())
          case 58 =>
            __transformFnAssetsUri = _input__.readStringRequireUtf8()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataInfo(
          featureKeys = __featureKeys.result(),
          labelKeys = __labelKeys.result(),
          tfrecordUriPrefix = __tfrecordUriPrefix,
          schemaUri = __schemaUri,
          enumeratedEdgeDataBqTable = __enumeratedEdgeDataBqTable,
          featureDim = __featureDim,
          transformFnAssetsUri = __transformFnAssetsUri,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataInfo] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataInfo(
          featureKeys = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
          labelKeys = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
          tfrecordUriPrefix = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          schemaUri = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          enumeratedEdgeDataBqTable = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          featureDim = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Int]]),
          transformFnAssetsUri = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.javaDescriptor.getNestedTypes().get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataInfo(
      featureKeys = _root_.scala.Seq.empty,
      labelKeys = _root_.scala.Seq.empty,
      tfrecordUriPrefix = "",
      schemaUri = "",
      enumeratedEdgeDataBqTable = "",
      featureDim = _root_.scala.None,
      transformFnAssetsUri = ""
    )
    implicit class EdgeMetadataInfoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataInfo]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataInfo](_l) {
      def featureKeys: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.featureKeys)((c_, f_) => c_.copy(featureKeys = f_))
      def labelKeys: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.labelKeys)((c_, f_) => c_.copy(labelKeys = f_))
      def tfrecordUriPrefix: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.tfrecordUriPrefix)((c_, f_) => c_.copy(tfrecordUriPrefix = f_))
      def schemaUri: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.schemaUri)((c_, f_) => c_.copy(schemaUri = f_))
      def enumeratedEdgeDataBqTable: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.enumeratedEdgeDataBqTable)((c_, f_) => c_.copy(enumeratedEdgeDataBqTable = f_))
      def featureDim: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getFeatureDim)((c_, f_) => c_.copy(featureDim = Option(f_)))
      def optionalFeatureDim: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Int]] = field(_.featureDim)((c_, f_) => c_.copy(featureDim = f_))
      def transformFnAssetsUri: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.transformFnAssetsUri)((c_, f_) => c_.copy(transformFnAssetsUri = f_))
    }
    final val FEATURE_KEYS_FIELD_NUMBER = 1
    final val LABEL_KEYS_FIELD_NUMBER = 2
    final val TFRECORD_URI_PREFIX_FIELD_NUMBER = 3
    final val SCHEMA_URI_FIELD_NUMBER = 4
    final val ENUMERATED_EDGE_DATA_BQ_TABLE_FIELD_NUMBER = 5
    final val FEATURE_DIM_FIELD_NUMBER = 6
    final val TRANSFORM_FN_ASSETS_URI_FIELD_NUMBER = 7
    def of(
      featureKeys: _root_.scala.Seq[_root_.scala.Predef.String],
      labelKeys: _root_.scala.Seq[_root_.scala.Predef.String],
      tfrecordUriPrefix: _root_.scala.Predef.String,
      schemaUri: _root_.scala.Predef.String,
      enumeratedEdgeDataBqTable: _root_.scala.Predef.String,
      featureDim: _root_.scala.Option[_root_.scala.Int],
      transformFnAssetsUri: _root_.scala.Predef.String
    ): _root_.snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataInfo = _root_.snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataInfo(
      featureKeys,
      labelKeys,
      tfrecordUriPrefix,
      schemaUri,
      enumeratedEdgeDataBqTable,
      featureDim,
      transformFnAssetsUri
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[snapchat.research.gbml.PreprocessedMetadata.EdgeMetadataInfo])
  }
  
  /** Houses metadata about edge TFTransform output from DataPreprocessor.
    *
    * @param srcNodeIdKey
    *   The field in output TFRecords which references the source node identifier.
    * @param dstNodeIdKey
    *   The field in output TFRecords which references the destination node identifier.
    * @param mainEdgeInfo
    *   Detailed metadata for message-passing edges
    * @param positiveEdgeInfo
    *   Detailed metadata for user-defined positive edges
    * @param negativeEdgeInfo
    *   Detailed metadata for user-defined negative edges
    */
  @SerialVersionUID(0L)
  final case class EdgeMetadataOutput(
      srcNodeIdKey: _root_.scala.Predef.String = "",
      dstNodeIdKey: _root_.scala.Predef.String = "",
      mainEdgeInfo: _root_.scala.Option[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataInfo] = _root_.scala.None,
      positiveEdgeInfo: _root_.scala.Option[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataInfo] = _root_.scala.None,
      negativeEdgeInfo: _root_.scala.Option[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataInfo] = _root_.scala.None,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[EdgeMetadataOutput] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = srcNodeIdKey
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        
        {
          val __value = dstNodeIdKey
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
          }
        };
        if (mainEdgeInfo.isDefined) {
          val __value = mainEdgeInfo.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (positiveEdgeInfo.isDefined) {
          val __value = positiveEdgeInfo.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (negativeEdgeInfo.isDefined) {
          val __value = negativeEdgeInfo.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = srcNodeIdKey
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        {
          val __v = dstNodeIdKey
          if (!__v.isEmpty) {
            _output__.writeString(2, __v)
          }
        };
        mainEdgeInfo.foreach { __v =>
          val __m = __v
          _output__.writeTag(3, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        positiveEdgeInfo.foreach { __v =>
          val __m = __v
          _output__.writeTag(4, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        negativeEdgeInfo.foreach { __v =>
          val __m = __v
          _output__.writeTag(5, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def withSrcNodeIdKey(__v: _root_.scala.Predef.String): EdgeMetadataOutput = copy(srcNodeIdKey = __v)
      def withDstNodeIdKey(__v: _root_.scala.Predef.String): EdgeMetadataOutput = copy(dstNodeIdKey = __v)
      def getMainEdgeInfo: snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataInfo = mainEdgeInfo.getOrElse(snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataInfo.defaultInstance)
      def clearMainEdgeInfo: EdgeMetadataOutput = copy(mainEdgeInfo = _root_.scala.None)
      def withMainEdgeInfo(__v: snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataInfo): EdgeMetadataOutput = copy(mainEdgeInfo = Option(__v))
      def getPositiveEdgeInfo: snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataInfo = positiveEdgeInfo.getOrElse(snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataInfo.defaultInstance)
      def clearPositiveEdgeInfo: EdgeMetadataOutput = copy(positiveEdgeInfo = _root_.scala.None)
      def withPositiveEdgeInfo(__v: snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataInfo): EdgeMetadataOutput = copy(positiveEdgeInfo = Option(__v))
      def getNegativeEdgeInfo: snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataInfo = negativeEdgeInfo.getOrElse(snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataInfo.defaultInstance)
      def clearNegativeEdgeInfo: EdgeMetadataOutput = copy(negativeEdgeInfo = _root_.scala.None)
      def withNegativeEdgeInfo(__v: snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataInfo): EdgeMetadataOutput = copy(negativeEdgeInfo = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = srcNodeIdKey
            if (__t != "") __t else null
          }
          case 2 => {
            val __t = dstNodeIdKey
            if (__t != "") __t else null
          }
          case 3 => mainEdgeInfo.orNull
          case 4 => positiveEdgeInfo.orNull
          case 5 => negativeEdgeInfo.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(srcNodeIdKey)
          case 2 => _root_.scalapb.descriptors.PString(dstNodeIdKey)
          case 3 => mainEdgeInfo.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 4 => positiveEdgeInfo.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 5 => negativeEdgeInfo.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataOutput.type = snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataOutput
      // @@protoc_insertion_point(GeneratedMessage[snapchat.research.gbml.PreprocessedMetadata.EdgeMetadataOutput])
  }
  
  object EdgeMetadataOutput extends scalapb.GeneratedMessageCompanion[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataOutput] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataOutput] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataOutput = {
      var __srcNodeIdKey: _root_.scala.Predef.String = ""
      var __dstNodeIdKey: _root_.scala.Predef.String = ""
      var __mainEdgeInfo: _root_.scala.Option[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataInfo] = _root_.scala.None
      var __positiveEdgeInfo: _root_.scala.Option[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataInfo] = _root_.scala.None
      var __negativeEdgeInfo: _root_.scala.Option[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataInfo] = _root_.scala.None
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __srcNodeIdKey = _input__.readStringRequireUtf8()
          case 18 =>
            __dstNodeIdKey = _input__.readStringRequireUtf8()
          case 26 =>
            __mainEdgeInfo = Option(__mainEdgeInfo.fold(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataInfo](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 34 =>
            __positiveEdgeInfo = Option(__positiveEdgeInfo.fold(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataInfo](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 42 =>
            __negativeEdgeInfo = Option(__negativeEdgeInfo.fold(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataInfo](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataOutput(
          srcNodeIdKey = __srcNodeIdKey,
          dstNodeIdKey = __dstNodeIdKey,
          mainEdgeInfo = __mainEdgeInfo,
          positiveEdgeInfo = __positiveEdgeInfo,
          negativeEdgeInfo = __negativeEdgeInfo,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataOutput] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataOutput(
          srcNodeIdKey = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          dstNodeIdKey = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          mainEdgeInfo = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataInfo]]),
          positiveEdgeInfo = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataInfo]]),
          negativeEdgeInfo = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataInfo]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.javaDescriptor.getNestedTypes().get(2)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.scalaDescriptor.nestedMessages(2)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 3 => __out = snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataInfo
        case 4 => __out = snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataInfo
        case 5 => __out = snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataInfo
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataOutput(
      srcNodeIdKey = "",
      dstNodeIdKey = "",
      mainEdgeInfo = _root_.scala.None,
      positiveEdgeInfo = _root_.scala.None,
      negativeEdgeInfo = _root_.scala.None
    )
    implicit class EdgeMetadataOutputLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataOutput]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataOutput](_l) {
      def srcNodeIdKey: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.srcNodeIdKey)((c_, f_) => c_.copy(srcNodeIdKey = f_))
      def dstNodeIdKey: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.dstNodeIdKey)((c_, f_) => c_.copy(dstNodeIdKey = f_))
      def mainEdgeInfo: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataInfo] = field(_.getMainEdgeInfo)((c_, f_) => c_.copy(mainEdgeInfo = Option(f_)))
      def optionalMainEdgeInfo: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataInfo]] = field(_.mainEdgeInfo)((c_, f_) => c_.copy(mainEdgeInfo = f_))
      def positiveEdgeInfo: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataInfo] = field(_.getPositiveEdgeInfo)((c_, f_) => c_.copy(positiveEdgeInfo = Option(f_)))
      def optionalPositiveEdgeInfo: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataInfo]] = field(_.positiveEdgeInfo)((c_, f_) => c_.copy(positiveEdgeInfo = f_))
      def negativeEdgeInfo: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataInfo] = field(_.getNegativeEdgeInfo)((c_, f_) => c_.copy(negativeEdgeInfo = Option(f_)))
      def optionalNegativeEdgeInfo: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataInfo]] = field(_.negativeEdgeInfo)((c_, f_) => c_.copy(negativeEdgeInfo = f_))
    }
    final val SRC_NODE_ID_KEY_FIELD_NUMBER = 1
    final val DST_NODE_ID_KEY_FIELD_NUMBER = 2
    final val MAIN_EDGE_INFO_FIELD_NUMBER = 3
    final val POSITIVE_EDGE_INFO_FIELD_NUMBER = 4
    final val NEGATIVE_EDGE_INFO_FIELD_NUMBER = 5
    def of(
      srcNodeIdKey: _root_.scala.Predef.String,
      dstNodeIdKey: _root_.scala.Predef.String,
      mainEdgeInfo: _root_.scala.Option[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataInfo],
      positiveEdgeInfo: _root_.scala.Option[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataInfo],
      negativeEdgeInfo: _root_.scala.Option[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataInfo]
    ): _root_.snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataOutput = _root_.snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataOutput(
      srcNodeIdKey,
      dstNodeIdKey,
      mainEdgeInfo,
      positiveEdgeInfo,
      negativeEdgeInfo
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[snapchat.research.gbml.PreprocessedMetadata.EdgeMetadataOutput])
  }
  
  @SerialVersionUID(0L)
  final case class CondensedNodeTypeToPreprocessedMetadataEntry(
      key: _root_.scala.Int = 0,
      value: _root_.scala.Option[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.NodeMetadataOutput] = _root_.scala.None,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[CondensedNodeTypeToPreprocessedMetadataEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, __value)
          }
        };
        if (value.isDefined) {
          val __value = value.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (__v != 0) {
            _output__.writeUInt32(1, __v)
          }
        };
        value.foreach { __v =>
          val __m = __v
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Int): CondensedNodeTypeToPreprocessedMetadataEntry = copy(key = __v)
      def getValue: snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.NodeMetadataOutput = value.getOrElse(snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.NodeMetadataOutput.defaultInstance)
      def clearValue: CondensedNodeTypeToPreprocessedMetadataEntry = copy(value = _root_.scala.None)
      def withValue(__v: snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.NodeMetadataOutput): CondensedNodeTypeToPreprocessedMetadataEntry = copy(value = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != 0) __t else null
          }
          case 2 => value.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PInt(key)
          case 2 => value.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.CondensedNodeTypeToPreprocessedMetadataEntry.type = snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.CondensedNodeTypeToPreprocessedMetadataEntry
      // @@protoc_insertion_point(GeneratedMessage[snapchat.research.gbml.PreprocessedMetadata.CondensedNodeTypeToPreprocessedMetadataEntry])
  }
  
  object CondensedNodeTypeToPreprocessedMetadataEntry extends scalapb.GeneratedMessageCompanion[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.CondensedNodeTypeToPreprocessedMetadataEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.CondensedNodeTypeToPreprocessedMetadataEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.CondensedNodeTypeToPreprocessedMetadataEntry = {
      var __key: _root_.scala.Int = 0
      var __value: _root_.scala.Option[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.NodeMetadataOutput] = _root_.scala.None
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __key = _input__.readUInt32()
          case 18 =>
            __value = Option(__value.fold(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.NodeMetadataOutput](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.CondensedNodeTypeToPreprocessedMetadataEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.CondensedNodeTypeToPreprocessedMetadataEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.CondensedNodeTypeToPreprocessedMetadataEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.NodeMetadataOutput]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.javaDescriptor.getNestedTypes().get(3)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.scalaDescriptor.nestedMessages(3)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.NodeMetadataOutput
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.CondensedNodeTypeToPreprocessedMetadataEntry(
      key = 0,
      value = _root_.scala.None
    )
    implicit class CondensedNodeTypeToPreprocessedMetadataEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.CondensedNodeTypeToPreprocessedMetadataEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.CondensedNodeTypeToPreprocessedMetadataEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.NodeMetadataOutput] = field(_.getValue)((c_, f_) => c_.copy(value = Option(f_)))
      def optionalValue: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.NodeMetadataOutput]] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.CondensedNodeTypeToPreprocessedMetadataEntry, (_root_.scala.Int, snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.NodeMetadataOutput)] =
      _root_.scalapb.TypeMapper[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.CondensedNodeTypeToPreprocessedMetadataEntry, (_root_.scala.Int, snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.NodeMetadataOutput)](__m => (__m.key, __m.getValue))(__p => snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.CondensedNodeTypeToPreprocessedMetadataEntry(__p._1, Some(__p._2)))
    def of(
      key: _root_.scala.Int,
      value: _root_.scala.Option[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.NodeMetadataOutput]
    ): _root_.snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.CondensedNodeTypeToPreprocessedMetadataEntry = _root_.snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.CondensedNodeTypeToPreprocessedMetadataEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[snapchat.research.gbml.PreprocessedMetadata.CondensedNodeTypeToPreprocessedMetadataEntry])
  }
  
  @SerialVersionUID(0L)
  final case class CondensedEdgeTypeToPreprocessedMetadataEntry(
      key: _root_.scala.Int = 0,
      value: _root_.scala.Option[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataOutput] = _root_.scala.None,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[CondensedEdgeTypeToPreprocessedMetadataEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, __value)
          }
        };
        if (value.isDefined) {
          val __value = value.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (__v != 0) {
            _output__.writeUInt32(1, __v)
          }
        };
        value.foreach { __v =>
          val __m = __v
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Int): CondensedEdgeTypeToPreprocessedMetadataEntry = copy(key = __v)
      def getValue: snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataOutput = value.getOrElse(snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataOutput.defaultInstance)
      def clearValue: CondensedEdgeTypeToPreprocessedMetadataEntry = copy(value = _root_.scala.None)
      def withValue(__v: snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataOutput): CondensedEdgeTypeToPreprocessedMetadataEntry = copy(value = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != 0) __t else null
          }
          case 2 => value.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PInt(key)
          case 2 => value.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.CondensedEdgeTypeToPreprocessedMetadataEntry.type = snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.CondensedEdgeTypeToPreprocessedMetadataEntry
      // @@protoc_insertion_point(GeneratedMessage[snapchat.research.gbml.PreprocessedMetadata.CondensedEdgeTypeToPreprocessedMetadataEntry])
  }
  
  object CondensedEdgeTypeToPreprocessedMetadataEntry extends scalapb.GeneratedMessageCompanion[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.CondensedEdgeTypeToPreprocessedMetadataEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.CondensedEdgeTypeToPreprocessedMetadataEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.CondensedEdgeTypeToPreprocessedMetadataEntry = {
      var __key: _root_.scala.Int = 0
      var __value: _root_.scala.Option[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataOutput] = _root_.scala.None
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __key = _input__.readUInt32()
          case 18 =>
            __value = Option(__value.fold(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataOutput](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.CondensedEdgeTypeToPreprocessedMetadataEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.CondensedEdgeTypeToPreprocessedMetadataEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.CondensedEdgeTypeToPreprocessedMetadataEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataOutput]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.javaDescriptor.getNestedTypes().get(4)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.scalaDescriptor.nestedMessages(4)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataOutput
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.CondensedEdgeTypeToPreprocessedMetadataEntry(
      key = 0,
      value = _root_.scala.None
    )
    implicit class CondensedEdgeTypeToPreprocessedMetadataEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.CondensedEdgeTypeToPreprocessedMetadataEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.CondensedEdgeTypeToPreprocessedMetadataEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataOutput] = field(_.getValue)((c_, f_) => c_.copy(value = Option(f_)))
      def optionalValue: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataOutput]] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.CondensedEdgeTypeToPreprocessedMetadataEntry, (_root_.scala.Int, snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataOutput)] =
      _root_.scalapb.TypeMapper[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.CondensedEdgeTypeToPreprocessedMetadataEntry, (_root_.scala.Int, snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataOutput)](__m => (__m.key, __m.getValue))(__p => snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.CondensedEdgeTypeToPreprocessedMetadataEntry(__p._1, Some(__p._2)))
    def of(
      key: _root_.scala.Int,
      value: _root_.scala.Option[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataOutput]
    ): _root_.snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.CondensedEdgeTypeToPreprocessedMetadataEntry = _root_.snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.CondensedEdgeTypeToPreprocessedMetadataEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[snapchat.research.gbml.PreprocessedMetadata.CondensedEdgeTypeToPreprocessedMetadataEntry])
  }
  
  implicit class PreprocessedMetadataLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata](_l) {
    def condensedNodeTypeToPreprocessedMetadata: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Int, snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.NodeMetadataOutput]] = field(_.condensedNodeTypeToPreprocessedMetadata)((c_, f_) => c_.copy(condensedNodeTypeToPreprocessedMetadata = f_))
    def condensedEdgeTypeToPreprocessedMetadata: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Int, snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataOutput]] = field(_.condensedEdgeTypeToPreprocessedMetadata)((c_, f_) => c_.copy(condensedEdgeTypeToPreprocessedMetadata = f_))
  }
  final val CONDENSED_NODE_TYPE_TO_PREPROCESSED_METADATA_FIELD_NUMBER = 1
  final val CONDENSED_EDGE_TYPE_TO_PREPROCESSED_METADATA_FIELD_NUMBER = 2
  @transient
  private[preprocessed_metadata] val _typemapper_condensedNodeTypeToPreprocessedMetadata: _root_.scalapb.TypeMapper[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.CondensedNodeTypeToPreprocessedMetadataEntry, (_root_.scala.Int, snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.NodeMetadataOutput)] = implicitly[_root_.scalapb.TypeMapper[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.CondensedNodeTypeToPreprocessedMetadataEntry, (_root_.scala.Int, snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.NodeMetadataOutput)]]
  @transient
  private[preprocessed_metadata] val _typemapper_condensedEdgeTypeToPreprocessedMetadata: _root_.scalapb.TypeMapper[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.CondensedEdgeTypeToPreprocessedMetadataEntry, (_root_.scala.Int, snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataOutput)] = implicitly[_root_.scalapb.TypeMapper[snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.CondensedEdgeTypeToPreprocessedMetadataEntry, (_root_.scala.Int, snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataOutput)]]
  def of(
    condensedNodeTypeToPreprocessedMetadata: _root_.scala.collection.immutable.Map[_root_.scala.Int, snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.NodeMetadataOutput],
    condensedEdgeTypeToPreprocessedMetadata: _root_.scala.collection.immutable.Map[_root_.scala.Int, snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata.EdgeMetadataOutput]
  ): _root_.snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata = _root_.snapchat.research.gbml.preprocessed_metadata.PreprocessedMetadata(
    condensedNodeTypeToPreprocessedMetadata,
    condensedEdgeTypeToPreprocessedMetadata
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[snapchat.research.gbml.PreprocessedMetadata])
}
