// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package snapchat.research.gbml.graph_schema

/** Represents a graph; usually used to represent a rooted k-hop subgraph for a bigger graph
  */
@SerialVersionUID(0L)
final case class Graph(
    nodes: _root_.scala.Seq[snapchat.research.gbml.graph_schema.Node] = _root_.scala.Seq.empty,
    edges: _root_.scala.Seq[snapchat.research.gbml.graph_schema.Edge] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Graph] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      nodes.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      edges.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      nodes.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      edges.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def clearNodes = copy(nodes = _root_.scala.Seq.empty)
    def addNodes(__vs: snapchat.research.gbml.graph_schema.Node *): Graph = addAllNodes(__vs)
    def addAllNodes(__vs: Iterable[snapchat.research.gbml.graph_schema.Node]): Graph = copy(nodes = nodes ++ __vs)
    def withNodes(__v: _root_.scala.Seq[snapchat.research.gbml.graph_schema.Node]): Graph = copy(nodes = __v)
    def clearEdges = copy(edges = _root_.scala.Seq.empty)
    def addEdges(__vs: snapchat.research.gbml.graph_schema.Edge *): Graph = addAllEdges(__vs)
    def addAllEdges(__vs: Iterable[snapchat.research.gbml.graph_schema.Edge]): Graph = copy(edges = edges ++ __vs)
    def withEdges(__v: _root_.scala.Seq[snapchat.research.gbml.graph_schema.Edge]): Graph = copy(edges = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => nodes
        case 3 => edges
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 2 => _root_.scalapb.descriptors.PRepeated(nodes.iterator.map(_.toPMessage).toVector)
        case 3 => _root_.scalapb.descriptors.PRepeated(edges.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: snapchat.research.gbml.graph_schema.Graph.type = snapchat.research.gbml.graph_schema.Graph
    // @@protoc_insertion_point(GeneratedMessage[snapchat.research.gbml.Graph])
}

object Graph extends scalapb.GeneratedMessageCompanion[snapchat.research.gbml.graph_schema.Graph] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[snapchat.research.gbml.graph_schema.Graph] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): snapchat.research.gbml.graph_schema.Graph = {
    val __nodes: _root_.scala.collection.immutable.VectorBuilder[snapchat.research.gbml.graph_schema.Node] = new _root_.scala.collection.immutable.VectorBuilder[snapchat.research.gbml.graph_schema.Node]
    val __edges: _root_.scala.collection.immutable.VectorBuilder[snapchat.research.gbml.graph_schema.Edge] = new _root_.scala.collection.immutable.VectorBuilder[snapchat.research.gbml.graph_schema.Edge]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 18 =>
          __nodes += _root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.graph_schema.Node](_input__)
        case 26 =>
          __edges += _root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.graph_schema.Edge](_input__)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    snapchat.research.gbml.graph_schema.Graph(
        nodes = __nodes.result(),
        edges = __edges.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[snapchat.research.gbml.graph_schema.Graph] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      snapchat.research.gbml.graph_schema.Graph(
        nodes = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[snapchat.research.gbml.graph_schema.Node]]).getOrElse(_root_.scala.Seq.empty),
        edges = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[snapchat.research.gbml.graph_schema.Edge]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = GraphSchemaProto.javaDescriptor.getMessageTypes().get(4)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = GraphSchemaProto.scalaDescriptor.messages(4)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = snapchat.research.gbml.graph_schema.Node
      case 3 => __out = snapchat.research.gbml.graph_schema.Edge
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = snapchat.research.gbml.graph_schema.Graph(
    nodes = _root_.scala.Seq.empty,
    edges = _root_.scala.Seq.empty
  )
  implicit class GraphLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.graph_schema.Graph]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, snapchat.research.gbml.graph_schema.Graph](_l) {
    def nodes: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[snapchat.research.gbml.graph_schema.Node]] = field(_.nodes)((c_, f_) => c_.copy(nodes = f_))
    def edges: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[snapchat.research.gbml.graph_schema.Edge]] = field(_.edges)((c_, f_) => c_.copy(edges = f_))
  }
  final val NODES_FIELD_NUMBER = 2
  final val EDGES_FIELD_NUMBER = 3
  def of(
    nodes: _root_.scala.Seq[snapchat.research.gbml.graph_schema.Node],
    edges: _root_.scala.Seq[snapchat.research.gbml.graph_schema.Edge]
  ): _root_.snapchat.research.gbml.graph_schema.Graph = _root_.snapchat.research.gbml.graph_schema.Graph(
    nodes,
    edges
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[snapchat.research.gbml.Graph])
}
