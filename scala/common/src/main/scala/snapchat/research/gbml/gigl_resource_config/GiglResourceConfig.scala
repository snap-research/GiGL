// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package snapchat.research.gbml.gigl_resource_config

/** GiGL resources configuration
  *
  * @param preprocessorConfig
  *   Configuration for Data Preprocessor
  * @param subgraphSamplerConfig
  *   Configuration for Spark subgraph sampler
  * @param splitGeneratorConfig
  *   Configuration for Spark split generator
  * @param trainerConfig
  *   (deprecated)
  *   Configuration for trainer
  * @param inferencerConfig
  *   (deprecated)
  *   Configuration for inferencer
  * @param trainerResourceConfig
  *   Configuration for distributed trainer
  * @param inferencerResourceConfig
  *   Configuration for distributed inferencer
  */
@SerialVersionUID(0L)
final case class GiglResourceConfig(
    sharedResource: snapchat.research.gbml.gigl_resource_config.GiglResourceConfig.SharedResource = snapchat.research.gbml.gigl_resource_config.GiglResourceConfig.SharedResource.Empty,
    preprocessorConfig: _root_.scala.Option[snapchat.research.gbml.gigl_resource_config.DataPreprocessorConfig] = _root_.scala.None,
    subgraphSamplerConfig: _root_.scala.Option[snapchat.research.gbml.gigl_resource_config.SparkResourceConfig] = _root_.scala.None,
    splitGeneratorConfig: _root_.scala.Option[snapchat.research.gbml.gigl_resource_config.SparkResourceConfig] = _root_.scala.None,
    @scala.deprecated(message="Marked as deprecated in proto file", "") trainerConfig: _root_.scala.Option[snapchat.research.gbml.gigl_resource_config.DistributedTrainerConfig] = _root_.scala.None,
    @scala.deprecated(message="Marked as deprecated in proto file", "") inferencerConfig: _root_.scala.Option[snapchat.research.gbml.gigl_resource_config.DataflowResourceConfig] = _root_.scala.None,
    trainerResourceConfig: _root_.scala.Option[snapchat.research.gbml.gigl_resource_config.TrainerResourceConfig] = _root_.scala.None,
    inferencerResourceConfig: _root_.scala.Option[snapchat.research.gbml.gigl_resource_config.InferencerResourceConfig] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[GiglResourceConfig] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (sharedResource.sharedResourceConfigUri.isDefined) {
        val __value = sharedResource.sharedResourceConfigUri.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
      };
      if (sharedResource.sharedResourceConfig.isDefined) {
        val __value = sharedResource.sharedResourceConfig.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (preprocessorConfig.isDefined) {
        val __value = preprocessorConfig.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (subgraphSamplerConfig.isDefined) {
        val __value = subgraphSamplerConfig.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (splitGeneratorConfig.isDefined) {
        val __value = splitGeneratorConfig.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (trainerConfig.isDefined) {
        val __value = trainerConfig.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (inferencerConfig.isDefined) {
        val __value = inferencerConfig.get
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (trainerResourceConfig.isDefined) {
        val __value = trainerResourceConfig.get
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (inferencerResourceConfig.isDefined) {
        val __value = inferencerResourceConfig.get
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      sharedResource.sharedResourceConfigUri.foreach { __v =>
        val __m = __v
        _output__.writeString(1, __m)
      };
      sharedResource.sharedResourceConfig.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      preprocessorConfig.foreach { __v =>
        val __m = __v
        _output__.writeTag(12, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      subgraphSamplerConfig.foreach { __v =>
        val __m = __v
        _output__.writeTag(13, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      splitGeneratorConfig.foreach { __v =>
        val __m = __v
        _output__.writeTag(14, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      trainerConfig.foreach { __v =>
        val __m = __v
        _output__.writeTag(15, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      inferencerConfig.foreach { __v =>
        val __m = __v
        _output__.writeTag(16, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      trainerResourceConfig.foreach { __v =>
        val __m = __v
        _output__.writeTag(17, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      inferencerResourceConfig.foreach { __v =>
        val __m = __v
        _output__.writeTag(18, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getSharedResourceConfigUri: _root_.scala.Predef.String = sharedResource.sharedResourceConfigUri.getOrElse("")
    def withSharedResourceConfigUri(__v: _root_.scala.Predef.String): GiglResourceConfig = copy(sharedResource = snapchat.research.gbml.gigl_resource_config.GiglResourceConfig.SharedResource.SharedResourceConfigUri(__v))
    def getSharedResourceConfig: snapchat.research.gbml.gigl_resource_config.SharedResourceConfig = sharedResource.sharedResourceConfig.getOrElse(snapchat.research.gbml.gigl_resource_config.SharedResourceConfig.defaultInstance)
    def withSharedResourceConfig(__v: snapchat.research.gbml.gigl_resource_config.SharedResourceConfig): GiglResourceConfig = copy(sharedResource = snapchat.research.gbml.gigl_resource_config.GiglResourceConfig.SharedResource.SharedResourceConfig(__v))
    def getPreprocessorConfig: snapchat.research.gbml.gigl_resource_config.DataPreprocessorConfig = preprocessorConfig.getOrElse(snapchat.research.gbml.gigl_resource_config.DataPreprocessorConfig.defaultInstance)
    def clearPreprocessorConfig: GiglResourceConfig = copy(preprocessorConfig = _root_.scala.None)
    def withPreprocessorConfig(__v: snapchat.research.gbml.gigl_resource_config.DataPreprocessorConfig): GiglResourceConfig = copy(preprocessorConfig = Option(__v))
    def getSubgraphSamplerConfig: snapchat.research.gbml.gigl_resource_config.SparkResourceConfig = subgraphSamplerConfig.getOrElse(snapchat.research.gbml.gigl_resource_config.SparkResourceConfig.defaultInstance)
    def clearSubgraphSamplerConfig: GiglResourceConfig = copy(subgraphSamplerConfig = _root_.scala.None)
    def withSubgraphSamplerConfig(__v: snapchat.research.gbml.gigl_resource_config.SparkResourceConfig): GiglResourceConfig = copy(subgraphSamplerConfig = Option(__v))
    def getSplitGeneratorConfig: snapchat.research.gbml.gigl_resource_config.SparkResourceConfig = splitGeneratorConfig.getOrElse(snapchat.research.gbml.gigl_resource_config.SparkResourceConfig.defaultInstance)
    def clearSplitGeneratorConfig: GiglResourceConfig = copy(splitGeneratorConfig = _root_.scala.None)
    def withSplitGeneratorConfig(__v: snapchat.research.gbml.gigl_resource_config.SparkResourceConfig): GiglResourceConfig = copy(splitGeneratorConfig = Option(__v))
    def getTrainerConfig: snapchat.research.gbml.gigl_resource_config.DistributedTrainerConfig = trainerConfig.getOrElse(snapchat.research.gbml.gigl_resource_config.DistributedTrainerConfig.defaultInstance)
    def clearTrainerConfig: GiglResourceConfig = copy(trainerConfig = _root_.scala.None)
    def withTrainerConfig(__v: snapchat.research.gbml.gigl_resource_config.DistributedTrainerConfig): GiglResourceConfig = copy(trainerConfig = Option(__v))
    def getInferencerConfig: snapchat.research.gbml.gigl_resource_config.DataflowResourceConfig = inferencerConfig.getOrElse(snapchat.research.gbml.gigl_resource_config.DataflowResourceConfig.defaultInstance)
    def clearInferencerConfig: GiglResourceConfig = copy(inferencerConfig = _root_.scala.None)
    def withInferencerConfig(__v: snapchat.research.gbml.gigl_resource_config.DataflowResourceConfig): GiglResourceConfig = copy(inferencerConfig = Option(__v))
    def getTrainerResourceConfig: snapchat.research.gbml.gigl_resource_config.TrainerResourceConfig = trainerResourceConfig.getOrElse(snapchat.research.gbml.gigl_resource_config.TrainerResourceConfig.defaultInstance)
    def clearTrainerResourceConfig: GiglResourceConfig = copy(trainerResourceConfig = _root_.scala.None)
    def withTrainerResourceConfig(__v: snapchat.research.gbml.gigl_resource_config.TrainerResourceConfig): GiglResourceConfig = copy(trainerResourceConfig = Option(__v))
    def getInferencerResourceConfig: snapchat.research.gbml.gigl_resource_config.InferencerResourceConfig = inferencerResourceConfig.getOrElse(snapchat.research.gbml.gigl_resource_config.InferencerResourceConfig.defaultInstance)
    def clearInferencerResourceConfig: GiglResourceConfig = copy(inferencerResourceConfig = _root_.scala.None)
    def withInferencerResourceConfig(__v: snapchat.research.gbml.gigl_resource_config.InferencerResourceConfig): GiglResourceConfig = copy(inferencerResourceConfig = Option(__v))
    def clearSharedResource: GiglResourceConfig = copy(sharedResource = snapchat.research.gbml.gigl_resource_config.GiglResourceConfig.SharedResource.Empty)
    def withSharedResource(__v: snapchat.research.gbml.gigl_resource_config.GiglResourceConfig.SharedResource): GiglResourceConfig = copy(sharedResource = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => sharedResource.sharedResourceConfigUri.orNull
        case 2 => sharedResource.sharedResourceConfig.orNull
        case 12 => preprocessorConfig.orNull
        case 13 => subgraphSamplerConfig.orNull
        case 14 => splitGeneratorConfig.orNull
        case 15 => trainerConfig.orNull
        case 16 => inferencerConfig.orNull
        case 17 => trainerResourceConfig.orNull
        case 18 => inferencerResourceConfig.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => sharedResource.sharedResourceConfigUri.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => sharedResource.sharedResourceConfig.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 12 => preprocessorConfig.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 13 => subgraphSamplerConfig.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 14 => splitGeneratorConfig.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 15 => trainerConfig.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 16 => inferencerConfig.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 17 => trainerResourceConfig.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 18 => inferencerResourceConfig.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: snapchat.research.gbml.gigl_resource_config.GiglResourceConfig.type = snapchat.research.gbml.gigl_resource_config.GiglResourceConfig
    // @@protoc_insertion_point(GeneratedMessage[snapchat.research.gbml.GiglResourceConfig])
}

object GiglResourceConfig extends scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gigl_resource_config.GiglResourceConfig] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gigl_resource_config.GiglResourceConfig] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): snapchat.research.gbml.gigl_resource_config.GiglResourceConfig = {
    var __preprocessorConfig: _root_.scala.Option[snapchat.research.gbml.gigl_resource_config.DataPreprocessorConfig] = _root_.scala.None
    var __subgraphSamplerConfig: _root_.scala.Option[snapchat.research.gbml.gigl_resource_config.SparkResourceConfig] = _root_.scala.None
    var __splitGeneratorConfig: _root_.scala.Option[snapchat.research.gbml.gigl_resource_config.SparkResourceConfig] = _root_.scala.None
    var __trainerConfig: _root_.scala.Option[snapchat.research.gbml.gigl_resource_config.DistributedTrainerConfig] = _root_.scala.None
    var __inferencerConfig: _root_.scala.Option[snapchat.research.gbml.gigl_resource_config.DataflowResourceConfig] = _root_.scala.None
    var __trainerResourceConfig: _root_.scala.Option[snapchat.research.gbml.gigl_resource_config.TrainerResourceConfig] = _root_.scala.None
    var __inferencerResourceConfig: _root_.scala.Option[snapchat.research.gbml.gigl_resource_config.InferencerResourceConfig] = _root_.scala.None
    var __sharedResource: snapchat.research.gbml.gigl_resource_config.GiglResourceConfig.SharedResource = snapchat.research.gbml.gigl_resource_config.GiglResourceConfig.SharedResource.Empty
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __sharedResource = snapchat.research.gbml.gigl_resource_config.GiglResourceConfig.SharedResource.SharedResourceConfigUri(_input__.readStringRequireUtf8())
        case 18 =>
          __sharedResource = snapchat.research.gbml.gigl_resource_config.GiglResourceConfig.SharedResource.SharedResourceConfig(__sharedResource.sharedResourceConfig.fold(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.gigl_resource_config.SharedResourceConfig](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 98 =>
          __preprocessorConfig = Option(__preprocessorConfig.fold(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.gigl_resource_config.DataPreprocessorConfig](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 106 =>
          __subgraphSamplerConfig = Option(__subgraphSamplerConfig.fold(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.gigl_resource_config.SparkResourceConfig](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 114 =>
          __splitGeneratorConfig = Option(__splitGeneratorConfig.fold(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.gigl_resource_config.SparkResourceConfig](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 122 =>
          __trainerConfig = Option(__trainerConfig.fold(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.gigl_resource_config.DistributedTrainerConfig](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 130 =>
          __inferencerConfig = Option(__inferencerConfig.fold(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.gigl_resource_config.DataflowResourceConfig](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 138 =>
          __trainerResourceConfig = Option(__trainerResourceConfig.fold(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.gigl_resource_config.TrainerResourceConfig](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 146 =>
          __inferencerResourceConfig = Option(__inferencerResourceConfig.fold(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.gigl_resource_config.InferencerResourceConfig](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    snapchat.research.gbml.gigl_resource_config.GiglResourceConfig(
        preprocessorConfig = __preprocessorConfig,
        subgraphSamplerConfig = __subgraphSamplerConfig,
        splitGeneratorConfig = __splitGeneratorConfig,
        trainerConfig = __trainerConfig,
        inferencerConfig = __inferencerConfig,
        trainerResourceConfig = __trainerResourceConfig,
        inferencerResourceConfig = __inferencerResourceConfig,
        sharedResource = __sharedResource,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[snapchat.research.gbml.gigl_resource_config.GiglResourceConfig] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      snapchat.research.gbml.gigl_resource_config.GiglResourceConfig(
        preprocessorConfig = __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).flatMap(_.as[_root_.scala.Option[snapchat.research.gbml.gigl_resource_config.DataPreprocessorConfig]]),
        subgraphSamplerConfig = __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).flatMap(_.as[_root_.scala.Option[snapchat.research.gbml.gigl_resource_config.SparkResourceConfig]]),
        splitGeneratorConfig = __fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).flatMap(_.as[_root_.scala.Option[snapchat.research.gbml.gigl_resource_config.SparkResourceConfig]]),
        trainerConfig = __fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).flatMap(_.as[_root_.scala.Option[snapchat.research.gbml.gigl_resource_config.DistributedTrainerConfig]]),
        inferencerConfig = __fieldsMap.get(scalaDescriptor.findFieldByNumber(16).get).flatMap(_.as[_root_.scala.Option[snapchat.research.gbml.gigl_resource_config.DataflowResourceConfig]]),
        trainerResourceConfig = __fieldsMap.get(scalaDescriptor.findFieldByNumber(17).get).flatMap(_.as[_root_.scala.Option[snapchat.research.gbml.gigl_resource_config.TrainerResourceConfig]]),
        inferencerResourceConfig = __fieldsMap.get(scalaDescriptor.findFieldByNumber(18).get).flatMap(_.as[_root_.scala.Option[snapchat.research.gbml.gigl_resource_config.InferencerResourceConfig]]),
        sharedResource = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]).map(snapchat.research.gbml.gigl_resource_config.GiglResourceConfig.SharedResource.SharedResourceConfigUri(_))
            .orElse[snapchat.research.gbml.gigl_resource_config.GiglResourceConfig.SharedResource](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[snapchat.research.gbml.gigl_resource_config.SharedResourceConfig]]).map(snapchat.research.gbml.gigl_resource_config.GiglResourceConfig.SharedResource.SharedResourceConfig(_)))
            .getOrElse(snapchat.research.gbml.gigl_resource_config.GiglResourceConfig.SharedResource.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = GiglResourceConfigProto.javaDescriptor.getMessageTypes().get(13)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = GiglResourceConfigProto.scalaDescriptor.messages(13)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = snapchat.research.gbml.gigl_resource_config.SharedResourceConfig
      case 12 => __out = snapchat.research.gbml.gigl_resource_config.DataPreprocessorConfig
      case 13 => __out = snapchat.research.gbml.gigl_resource_config.SparkResourceConfig
      case 14 => __out = snapchat.research.gbml.gigl_resource_config.SparkResourceConfig
      case 15 => __out = snapchat.research.gbml.gigl_resource_config.DistributedTrainerConfig
      case 16 => __out = snapchat.research.gbml.gigl_resource_config.DataflowResourceConfig
      case 17 => __out = snapchat.research.gbml.gigl_resource_config.TrainerResourceConfig
      case 18 => __out = snapchat.research.gbml.gigl_resource_config.InferencerResourceConfig
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = snapchat.research.gbml.gigl_resource_config.GiglResourceConfig(
    preprocessorConfig = _root_.scala.None,
    subgraphSamplerConfig = _root_.scala.None,
    splitGeneratorConfig = _root_.scala.None,
    trainerConfig = _root_.scala.None,
    inferencerConfig = _root_.scala.None,
    trainerResourceConfig = _root_.scala.None,
    inferencerResourceConfig = _root_.scala.None,
    sharedResource = snapchat.research.gbml.gigl_resource_config.GiglResourceConfig.SharedResource.Empty
  )
  sealed trait SharedResource extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isSharedResourceConfigUri: _root_.scala.Boolean = false
    def isSharedResourceConfig: _root_.scala.Boolean = false
    def sharedResourceConfigUri: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
    def sharedResourceConfig: _root_.scala.Option[snapchat.research.gbml.gigl_resource_config.SharedResourceConfig] = _root_.scala.None
  }
  object SharedResource {
    @SerialVersionUID(0L)
    case object Empty extends snapchat.research.gbml.gigl_resource_config.GiglResourceConfig.SharedResource {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class SharedResourceConfigUri(value: _root_.scala.Predef.String) extends snapchat.research.gbml.gigl_resource_config.GiglResourceConfig.SharedResource {
      type ValueType = _root_.scala.Predef.String
      override def isSharedResourceConfigUri: _root_.scala.Boolean = true
      override def sharedResourceConfigUri: _root_.scala.Option[_root_.scala.Predef.String] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class SharedResourceConfig(value: snapchat.research.gbml.gigl_resource_config.SharedResourceConfig) extends snapchat.research.gbml.gigl_resource_config.GiglResourceConfig.SharedResource {
      type ValueType = snapchat.research.gbml.gigl_resource_config.SharedResourceConfig
      override def isSharedResourceConfig: _root_.scala.Boolean = true
      override def sharedResourceConfig: _root_.scala.Option[snapchat.research.gbml.gigl_resource_config.SharedResourceConfig] = Some(value)
      override def number: _root_.scala.Int = 2
    }
  }
  implicit class GiglResourceConfigLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gigl_resource_config.GiglResourceConfig]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, snapchat.research.gbml.gigl_resource_config.GiglResourceConfig](_l) {
    def sharedResourceConfigUri: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getSharedResourceConfigUri)((c_, f_) => c_.copy(sharedResource = snapchat.research.gbml.gigl_resource_config.GiglResourceConfig.SharedResource.SharedResourceConfigUri(f_)))
    def sharedResourceConfig: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gigl_resource_config.SharedResourceConfig] = field(_.getSharedResourceConfig)((c_, f_) => c_.copy(sharedResource = snapchat.research.gbml.gigl_resource_config.GiglResourceConfig.SharedResource.SharedResourceConfig(f_)))
    def preprocessorConfig: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gigl_resource_config.DataPreprocessorConfig] = field(_.getPreprocessorConfig)((c_, f_) => c_.copy(preprocessorConfig = Option(f_)))
    def optionalPreprocessorConfig: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[snapchat.research.gbml.gigl_resource_config.DataPreprocessorConfig]] = field(_.preprocessorConfig)((c_, f_) => c_.copy(preprocessorConfig = f_))
    def subgraphSamplerConfig: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gigl_resource_config.SparkResourceConfig] = field(_.getSubgraphSamplerConfig)((c_, f_) => c_.copy(subgraphSamplerConfig = Option(f_)))
    def optionalSubgraphSamplerConfig: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[snapchat.research.gbml.gigl_resource_config.SparkResourceConfig]] = field(_.subgraphSamplerConfig)((c_, f_) => c_.copy(subgraphSamplerConfig = f_))
    def splitGeneratorConfig: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gigl_resource_config.SparkResourceConfig] = field(_.getSplitGeneratorConfig)((c_, f_) => c_.copy(splitGeneratorConfig = Option(f_)))
    def optionalSplitGeneratorConfig: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[snapchat.research.gbml.gigl_resource_config.SparkResourceConfig]] = field(_.splitGeneratorConfig)((c_, f_) => c_.copy(splitGeneratorConfig = f_))
    def trainerConfig: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gigl_resource_config.DistributedTrainerConfig] = field(_.getTrainerConfig)((c_, f_) => c_.copy(trainerConfig = Option(f_)))
    def optionalTrainerConfig: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[snapchat.research.gbml.gigl_resource_config.DistributedTrainerConfig]] = field(_.trainerConfig)((c_, f_) => c_.copy(trainerConfig = f_))
    def inferencerConfig: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gigl_resource_config.DataflowResourceConfig] = field(_.getInferencerConfig)((c_, f_) => c_.copy(inferencerConfig = Option(f_)))
    def optionalInferencerConfig: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[snapchat.research.gbml.gigl_resource_config.DataflowResourceConfig]] = field(_.inferencerConfig)((c_, f_) => c_.copy(inferencerConfig = f_))
    def trainerResourceConfig: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gigl_resource_config.TrainerResourceConfig] = field(_.getTrainerResourceConfig)((c_, f_) => c_.copy(trainerResourceConfig = Option(f_)))
    def optionalTrainerResourceConfig: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[snapchat.research.gbml.gigl_resource_config.TrainerResourceConfig]] = field(_.trainerResourceConfig)((c_, f_) => c_.copy(trainerResourceConfig = f_))
    def inferencerResourceConfig: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gigl_resource_config.InferencerResourceConfig] = field(_.getInferencerResourceConfig)((c_, f_) => c_.copy(inferencerResourceConfig = Option(f_)))
    def optionalInferencerResourceConfig: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[snapchat.research.gbml.gigl_resource_config.InferencerResourceConfig]] = field(_.inferencerResourceConfig)((c_, f_) => c_.copy(inferencerResourceConfig = f_))
    def sharedResource: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gigl_resource_config.GiglResourceConfig.SharedResource] = field(_.sharedResource)((c_, f_) => c_.copy(sharedResource = f_))
  }
  final val SHARED_RESOURCE_CONFIG_URI_FIELD_NUMBER = 1
  final val SHARED_RESOURCE_CONFIG_FIELD_NUMBER = 2
  final val PREPROCESSOR_CONFIG_FIELD_NUMBER = 12
  final val SUBGRAPH_SAMPLER_CONFIG_FIELD_NUMBER = 13
  final val SPLIT_GENERATOR_CONFIG_FIELD_NUMBER = 14
  final val TRAINER_CONFIG_FIELD_NUMBER = 15
  final val INFERENCER_CONFIG_FIELD_NUMBER = 16
  final val TRAINER_RESOURCE_CONFIG_FIELD_NUMBER = 17
  final val INFERENCER_RESOURCE_CONFIG_FIELD_NUMBER = 18
  def of(
    sharedResource: snapchat.research.gbml.gigl_resource_config.GiglResourceConfig.SharedResource,
    preprocessorConfig: _root_.scala.Option[snapchat.research.gbml.gigl_resource_config.DataPreprocessorConfig],
    subgraphSamplerConfig: _root_.scala.Option[snapchat.research.gbml.gigl_resource_config.SparkResourceConfig],
    splitGeneratorConfig: _root_.scala.Option[snapchat.research.gbml.gigl_resource_config.SparkResourceConfig],
    trainerConfig: _root_.scala.Option[snapchat.research.gbml.gigl_resource_config.DistributedTrainerConfig],
    inferencerConfig: _root_.scala.Option[snapchat.research.gbml.gigl_resource_config.DataflowResourceConfig],
    trainerResourceConfig: _root_.scala.Option[snapchat.research.gbml.gigl_resource_config.TrainerResourceConfig],
    inferencerResourceConfig: _root_.scala.Option[snapchat.research.gbml.gigl_resource_config.InferencerResourceConfig]
  ): _root_.snapchat.research.gbml.gigl_resource_config.GiglResourceConfig = _root_.snapchat.research.gbml.gigl_resource_config.GiglResourceConfig(
    sharedResource,
    preprocessorConfig,
    subgraphSamplerConfig,
    splitGeneratorConfig,
    trainerConfig,
    inferencerConfig,
    trainerResourceConfig,
    inferencerResourceConfig
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[snapchat.research.gbml.GiglResourceConfig])
}
