// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package snapchat.research.gbml.subgraph_sampling_strategy

@SerialVersionUID(0L)
final case class GlobalRandomUniformStrategy(
    numHops: _root_.scala.Int = 0,
    randomUniformSpec: _root_.scala.Option[snapchat.research.gbml.subgraph_sampling_strategy.RandomUniform] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[GlobalRandomUniformStrategy] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = numHops
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, __value)
        }
      };
      if (randomUniformSpec.isDefined) {
        val __value = randomUniformSpec.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = numHops
        if (__v != 0) {
          _output__.writeUInt32(1, __v)
        }
      };
      randomUniformSpec.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withNumHops(__v: _root_.scala.Int): GlobalRandomUniformStrategy = copy(numHops = __v)
    def getRandomUniformSpec: snapchat.research.gbml.subgraph_sampling_strategy.RandomUniform = randomUniformSpec.getOrElse(snapchat.research.gbml.subgraph_sampling_strategy.RandomUniform.defaultInstance)
    def clearRandomUniformSpec: GlobalRandomUniformStrategy = copy(randomUniformSpec = _root_.scala.None)
    def withRandomUniformSpec(__v: snapchat.research.gbml.subgraph_sampling_strategy.RandomUniform): GlobalRandomUniformStrategy = copy(randomUniformSpec = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = numHops
          if (__t != 0) __t else null
        }
        case 2 => randomUniformSpec.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(numHops)
        case 2 => randomUniformSpec.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: snapchat.research.gbml.subgraph_sampling_strategy.GlobalRandomUniformStrategy.type = snapchat.research.gbml.subgraph_sampling_strategy.GlobalRandomUniformStrategy
    // @@protoc_insertion_point(GeneratedMessage[snapchat.research.gbml.GlobalRandomUniformStrategy])
}

object GlobalRandomUniformStrategy extends scalapb.GeneratedMessageCompanion[snapchat.research.gbml.subgraph_sampling_strategy.GlobalRandomUniformStrategy] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[snapchat.research.gbml.subgraph_sampling_strategy.GlobalRandomUniformStrategy] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): snapchat.research.gbml.subgraph_sampling_strategy.GlobalRandomUniformStrategy = {
    var __numHops: _root_.scala.Int = 0
    var __randomUniformSpec: _root_.scala.Option[snapchat.research.gbml.subgraph_sampling_strategy.RandomUniform] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __numHops = _input__.readUInt32()
        case 18 =>
          __randomUniformSpec = Option(__randomUniformSpec.fold(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.subgraph_sampling_strategy.RandomUniform](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    snapchat.research.gbml.subgraph_sampling_strategy.GlobalRandomUniformStrategy(
        numHops = __numHops,
        randomUniformSpec = __randomUniformSpec,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[snapchat.research.gbml.subgraph_sampling_strategy.GlobalRandomUniformStrategy] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      snapchat.research.gbml.subgraph_sampling_strategy.GlobalRandomUniformStrategy(
        numHops = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        randomUniformSpec = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[snapchat.research.gbml.subgraph_sampling_strategy.RandomUniform]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SubgraphSamplingStrategyProto.javaDescriptor.getMessageTypes().get(7)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SubgraphSamplingStrategyProto.scalaDescriptor.messages(7)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = snapchat.research.gbml.subgraph_sampling_strategy.RandomUniform
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = snapchat.research.gbml.subgraph_sampling_strategy.GlobalRandomUniformStrategy(
    numHops = 0,
    randomUniformSpec = _root_.scala.None
  )
  implicit class GlobalRandomUniformStrategyLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.subgraph_sampling_strategy.GlobalRandomUniformStrategy]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, snapchat.research.gbml.subgraph_sampling_strategy.GlobalRandomUniformStrategy](_l) {
    def numHops: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.numHops)((c_, f_) => c_.copy(numHops = f_))
    def randomUniformSpec: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.subgraph_sampling_strategy.RandomUniform] = field(_.getRandomUniformSpec)((c_, f_) => c_.copy(randomUniformSpec = Option(f_)))
    def optionalRandomUniformSpec: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[snapchat.research.gbml.subgraph_sampling_strategy.RandomUniform]] = field(_.randomUniformSpec)((c_, f_) => c_.copy(randomUniformSpec = f_))
  }
  final val NUM_HOPS_FIELD_NUMBER = 1
  final val RANDOM_UNIFORM_SPEC_FIELD_NUMBER = 2
  def of(
    numHops: _root_.scala.Int,
    randomUniformSpec: _root_.scala.Option[snapchat.research.gbml.subgraph_sampling_strategy.RandomUniform]
  ): _root_.snapchat.research.gbml.subgraph_sampling_strategy.GlobalRandomUniformStrategy = _root_.snapchat.research.gbml.subgraph_sampling_strategy.GlobalRandomUniformStrategy(
    numHops,
    randomUniformSpec
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[snapchat.research.gbml.GlobalRandomUniformStrategy])
}
