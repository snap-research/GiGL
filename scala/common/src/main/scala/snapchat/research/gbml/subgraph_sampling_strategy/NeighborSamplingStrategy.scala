// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package snapchat.research.gbml.subgraph_sampling_strategy

@SerialVersionUID(0L)
final case class NeighborSamplingStrategy(
  strategy: snapchat.research.gbml.subgraph_sampling_strategy.NeighborSamplingStrategy.Strategy =
    snapchat.research.gbml.subgraph_sampling_strategy.NeighborSamplingStrategy.Strategy.Empty,
  unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty)
    extends scalapb.GeneratedMessage
    with scalapb.lenses.Updatable[NeighborSamplingStrategy] {
  @transient
  private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
  private[this] def __computeSerializedSize(): _root_.scala.Int = {
    var __size = 0
    if (strategy.messagePassingPaths.isDefined) {
      val __value = strategy.messagePassingPaths.get
      __size += 1 + _root_.com.google.protobuf.CodedOutputStream
        .computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
    };
    if (strategy.globalRandomUniform.isDefined) {
      val __value = strategy.globalRandomUniform.get
      __size += 1 + _root_.com.google.protobuf.CodedOutputStream
        .computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
    };
    __size += unknownFields.serializedSize
    __size
  }
  override def serializedSize: _root_.scala.Int = {
    var __size = __serializedSizeMemoized
    if (__size == 0) {
      __size = __computeSerializedSize() + 1
      __serializedSizeMemoized = __size
    }
    __size - 1

  }
  def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
    strategy.messagePassingPaths.foreach { __v =>
      val __m = __v
      _output__.writeTag(1, 2)
      _output__.writeUInt32NoTag(__m.serializedSize)
      __m.writeTo(_output__)
    };
    strategy.globalRandomUniform.foreach { __v =>
      val __m = __v
      _output__.writeTag(2, 2)
      _output__.writeUInt32NoTag(__m.serializedSize)
      __m.writeTo(_output__)
    };
    unknownFields.writeTo(_output__)
  }
  def getMessagePassingPaths
    : snapchat.research.gbml.subgraph_sampling_strategy.MessagePassingPathStrategy =
    strategy.messagePassingPaths.getOrElse(
      snapchat.research.gbml.subgraph_sampling_strategy.MessagePassingPathStrategy.defaultInstance,
    )
  def withMessagePassingPaths(
    __v: snapchat.research.gbml.subgraph_sampling_strategy.MessagePassingPathStrategy,
  ): NeighborSamplingStrategy = copy(strategy =
    snapchat.research.gbml.subgraph_sampling_strategy.NeighborSamplingStrategy.Strategy
      .MessagePassingPaths(__v),
  )
  def getGlobalRandomUniform
    : snapchat.research.gbml.subgraph_sampling_strategy.GlobalRandomUniformStrategy =
    strategy.globalRandomUniform.getOrElse(
      snapchat.research.gbml.subgraph_sampling_strategy.GlobalRandomUniformStrategy.defaultInstance,
    )
  def withGlobalRandomUniform(
    __v: snapchat.research.gbml.subgraph_sampling_strategy.GlobalRandomUniformStrategy,
  ): NeighborSamplingStrategy = copy(strategy =
    snapchat.research.gbml.subgraph_sampling_strategy.NeighborSamplingStrategy.Strategy
      .GlobalRandomUniform(__v),
  )
  def clearStrategy: NeighborSamplingStrategy = copy(strategy =
    snapchat.research.gbml.subgraph_sampling_strategy.NeighborSamplingStrategy.Strategy.Empty,
  )
  def withStrategy(
    __v: snapchat.research.gbml.subgraph_sampling_strategy.NeighborSamplingStrategy.Strategy,
  ): NeighborSamplingStrategy = copy(strategy = __v)
  def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet): NeighborSamplingStrategy =
    copy(unknownFields = __v)
  def discardUnknownFields: NeighborSamplingStrategy =
    copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
  def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
    (__fieldNumber: @ _root_.scala.unchecked) match {
      case 1 => strategy.messagePassingPaths.orNull
      case 2 => strategy.globalRandomUniform.orNull
    }
  }
  def getField(
    __field: _root_.scalapb.descriptors.FieldDescriptor,
  ): _root_.scalapb.descriptors.PValue = {
    _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
    (__field.number: @ _root_.scala.unchecked) match {
      case 1 =>
        strategy.messagePassingPaths.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      case 2 =>
        strategy.globalRandomUniform.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
    }
  }
  def toProtoString: _root_.scala.Predef.String =
    _root_.scalapb.TextFormat.printToUnicodeString(this)
  def companion: snapchat.research.gbml.subgraph_sampling_strategy.NeighborSamplingStrategy.type =
    snapchat.research.gbml.subgraph_sampling_strategy.NeighborSamplingStrategy
  // @@protoc_insertion_point(GeneratedMessage[snapchat.research.gbml.NeighborSamplingStrategy])
}

object NeighborSamplingStrategy
    extends scalapb.GeneratedMessageCompanion[
      snapchat.research.gbml.subgraph_sampling_strategy.NeighborSamplingStrategy,
    ] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[
    snapchat.research.gbml.subgraph_sampling_strategy.NeighborSamplingStrategy,
  ] = this
  def parseFrom(
    `_input__`: _root_.com.google.protobuf.CodedInputStream,
  ): snapchat.research.gbml.subgraph_sampling_strategy.NeighborSamplingStrategy = {
    var __strategy
      : snapchat.research.gbml.subgraph_sampling_strategy.NeighborSamplingStrategy.Strategy =
      snapchat.research.gbml.subgraph_sampling_strategy.NeighborSamplingStrategy.Strategy.Empty
    var `_unknownFields__` : _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__                                                     = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __strategy =
            snapchat.research.gbml.subgraph_sampling_strategy.NeighborSamplingStrategy.Strategy
              .MessagePassingPaths(
                __strategy.messagePassingPaths.fold(
                  _root_.scalapb.LiteParser.readMessage[
                    snapchat.research.gbml.subgraph_sampling_strategy.MessagePassingPathStrategy,
                  ](_input__),
                )(_root_.scalapb.LiteParser.readMessage(_input__, _)),
              )
        case 18 =>
          __strategy =
            snapchat.research.gbml.subgraph_sampling_strategy.NeighborSamplingStrategy.Strategy
              .GlobalRandomUniform(
                __strategy.globalRandomUniform.fold(
                  _root_.scalapb.LiteParser.readMessage[
                    snapchat.research.gbml.subgraph_sampling_strategy.GlobalRandomUniformStrategy,
                  ](_input__),
                )(_root_.scalapb.LiteParser.readMessage(_input__, _)),
              )
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    snapchat.research.gbml.subgraph_sampling_strategy.NeighborSamplingStrategy(
      strategy = __strategy,
      unknownFields =
        if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty
        else _unknownFields__.result(),
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[
    snapchat.research.gbml.subgraph_sampling_strategy.NeighborSamplingStrategy,
  ] = _root_.scalapb.descriptors.Reads {
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(
        __fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor),
        "FieldDescriptor does not match message type.",
      )
      snapchat.research.gbml.subgraph_sampling_strategy.NeighborSamplingStrategy(
        strategy = __fieldsMap
          .get(scalaDescriptor.findFieldByNumber(1).get)
          .flatMap(
            _.as[_root_.scala.Option[
              snapchat.research.gbml.subgraph_sampling_strategy.MessagePassingPathStrategy,
            ]],
          )
          .map(
            snapchat.research.gbml.subgraph_sampling_strategy.NeighborSamplingStrategy.Strategy
              .MessagePassingPaths(_),
          )
          .orElse[
            snapchat.research.gbml.subgraph_sampling_strategy.NeighborSamplingStrategy.Strategy,
          ](
            __fieldsMap
              .get(scalaDescriptor.findFieldByNumber(2).get)
              .flatMap(
                _.as[_root_.scala.Option[
                  snapchat.research.gbml.subgraph_sampling_strategy.GlobalRandomUniformStrategy,
                ]],
              )
              .map(
                snapchat.research.gbml.subgraph_sampling_strategy.NeighborSamplingStrategy.Strategy
                  .GlobalRandomUniform(_),
              ),
          )
          .getOrElse(
            snapchat.research.gbml.subgraph_sampling_strategy.NeighborSamplingStrategy.Strategy.Empty,
          ),
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor =
    SubgraphSamplingStrategyProto.javaDescriptor.getMessageTypes().get(8)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor =
    SubgraphSamplingStrategyProto.scalaDescriptor.messages(8)
  def messageCompanionForFieldNumber(
    __number: _root_.scala.Int,
  ): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @ _root_.scala.unchecked) match {
      case 1 => __out = snapchat.research.gbml.subgraph_sampling_strategy.MessagePassingPathStrategy
      case 2 =>
        __out = snapchat.research.gbml.subgraph_sampling_strategy.GlobalRandomUniformStrategy
    }
    __out
  }
  lazy val nestedMessagesCompanions
    : Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq.empty
  def enumCompanionForFieldNumber(
    __fieldNumber: _root_.scala.Int,
  ): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance: NeighborSamplingStrategy =
    snapchat.research.gbml.subgraph_sampling_strategy.NeighborSamplingStrategy(
      strategy =
        snapchat.research.gbml.subgraph_sampling_strategy.NeighborSamplingStrategy.Strategy.Empty,
    )
  sealed trait Strategy extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean               = false
    def isDefined: _root_.scala.Boolean             = true
    def isMessagePassingPaths: _root_.scala.Boolean = false
    def isGlobalRandomUniform: _root_.scala.Boolean = false
    def messagePassingPaths: _root_.scala.Option[
      snapchat.research.gbml.subgraph_sampling_strategy.MessagePassingPathStrategy,
    ] = _root_.scala.None
    def globalRandomUniform: _root_.scala.Option[
      snapchat.research.gbml.subgraph_sampling_strategy.GlobalRandomUniformStrategy,
    ] = _root_.scala.None
  }
  object Strategy {
    @SerialVersionUID(0L)
    case object Empty
        extends snapchat.research.gbml.subgraph_sampling_strategy.NeighborSamplingStrategy.Strategy {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean   = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int        = 0
      override def value: _root_.scala.Nothing =
        throw new java.util.NoSuchElementException("Empty.value")
    }

    @SerialVersionUID(0L)
    final case class MessagePassingPaths(
      value: snapchat.research.gbml.subgraph_sampling_strategy.MessagePassingPathStrategy)
        extends snapchat.research.gbml.subgraph_sampling_strategy.NeighborSamplingStrategy.Strategy {
      type ValueType = snapchat.research.gbml.subgraph_sampling_strategy.MessagePassingPathStrategy
      override def isMessagePassingPaths: _root_.scala.Boolean = true
      override def messagePassingPaths: _root_.scala.Option[
        snapchat.research.gbml.subgraph_sampling_strategy.MessagePassingPathStrategy,
      ] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class GlobalRandomUniform(
      value: snapchat.research.gbml.subgraph_sampling_strategy.GlobalRandomUniformStrategy)
        extends snapchat.research.gbml.subgraph_sampling_strategy.NeighborSamplingStrategy.Strategy {
      type ValueType = snapchat.research.gbml.subgraph_sampling_strategy.GlobalRandomUniformStrategy
      override def isGlobalRandomUniform: _root_.scala.Boolean = true
      override def globalRandomUniform: _root_.scala.Option[
        snapchat.research.gbml.subgraph_sampling_strategy.GlobalRandomUniformStrategy,
      ] = Some(value)
      override def number: _root_.scala.Int = 2
    }
  }
  implicit class NeighborSamplingStrategyLens[UpperPB](
    _l: _root_.scalapb.lenses.Lens[
      UpperPB,
      snapchat.research.gbml.subgraph_sampling_strategy.NeighborSamplingStrategy,
    ])
      extends _root_.scalapb.lenses.ObjectLens[
        UpperPB,
        snapchat.research.gbml.subgraph_sampling_strategy.NeighborSamplingStrategy,
      ](_l) {
    def messagePassingPaths: _root_.scalapb.lenses.Lens[
      UpperPB,
      snapchat.research.gbml.subgraph_sampling_strategy.MessagePassingPathStrategy,
    ] = field(_.getMessagePassingPaths)((c_, f_) =>
      c_.copy(strategy =
        snapchat.research.gbml.subgraph_sampling_strategy.NeighborSamplingStrategy.Strategy
          .MessagePassingPaths(f_),
      ),
    )
    def globalRandomUniform: _root_.scalapb.lenses.Lens[
      UpperPB,
      snapchat.research.gbml.subgraph_sampling_strategy.GlobalRandomUniformStrategy,
    ] = field(_.getGlobalRandomUniform)((c_, f_) =>
      c_.copy(strategy =
        snapchat.research.gbml.subgraph_sampling_strategy.NeighborSamplingStrategy.Strategy
          .GlobalRandomUniform(f_),
      ),
    )
    def strategy: _root_.scalapb.lenses.Lens[
      UpperPB,
      snapchat.research.gbml.subgraph_sampling_strategy.NeighborSamplingStrategy.Strategy,
    ] = field(_.strategy)((c_, f_) => c_.copy(strategy = f_))
  }
  final val MESSAGE_PASSING_PATHS_FIELD_NUMBER = 1
  final val GLOBAL_RANDOM_UNIFORM_FIELD_NUMBER = 2
  def of(
    strategy: snapchat.research.gbml.subgraph_sampling_strategy.NeighborSamplingStrategy.Strategy,
  ): _root_.snapchat.research.gbml.subgraph_sampling_strategy.NeighborSamplingStrategy =
    _root_.snapchat.research.gbml.subgraph_sampling_strategy.NeighborSamplingStrategy(
      strategy,
    )
  // @@protoc_insertion_point(GeneratedMessageCompanion[snapchat.research.gbml.NeighborSamplingStrategy])
}
