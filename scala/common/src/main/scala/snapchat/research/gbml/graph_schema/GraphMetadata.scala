// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package snapchat.research.gbml.graph_schema

/** Stores metadata that helps map the created graph samples back to original graph
  *
  * @param nodeTypes
  *   User provided list of node types
  * @param edgeTypes
  *   User provided list of edge types
  * @param condensedEdgeTypeMap
  *   Maps condensed_edge_type: uint32 to edge_type: EdgeType; 1:1 mapping
  *   We use unit32 instead of EdgeType to save space when storing
  *   graph information
  * @param condensedNodeTypeMap
  *   Maps condensed_node_type: uint32 to node_type: string; 1:1 mapping
  *   We use unit32 instead of string to save space when storing
  *   graph information
  */
@SerialVersionUID(0L)
final case class GraphMetadata(
    nodeTypes: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    edgeTypes: _root_.scala.Seq[snapchat.research.gbml.graph_schema.EdgeType] = _root_.scala.Seq.empty,
    condensedEdgeTypeMap: _root_.scala.collection.immutable.Map[_root_.scala.Int, snapchat.research.gbml.graph_schema.EdgeType] = _root_.scala.collection.immutable.Map.empty,
    condensedNodeTypeMap: _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Predef.String] = _root_.scala.collection.immutable.Map.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[GraphMetadata] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      nodeTypes.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
      }
      edgeTypes.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      condensedEdgeTypeMap.foreach { __item =>
        val __value = snapchat.research.gbml.graph_schema.GraphMetadata._typemapper_condensedEdgeTypeMap.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      condensedNodeTypeMap.foreach { __item =>
        val __value = snapchat.research.gbml.graph_schema.GraphMetadata._typemapper_condensedNodeTypeMap.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      nodeTypes.foreach { __v =>
        val __m = __v
        _output__.writeString(1, __m)
      };
      edgeTypes.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      condensedEdgeTypeMap.foreach { __v =>
        val __m = snapchat.research.gbml.graph_schema.GraphMetadata._typemapper_condensedEdgeTypeMap.toBase(__v)
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      condensedNodeTypeMap.foreach { __v =>
        val __m = snapchat.research.gbml.graph_schema.GraphMetadata._typemapper_condensedNodeTypeMap.toBase(__v)
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def clearNodeTypes = copy(nodeTypes = _root_.scala.Seq.empty)
    def addNodeTypes(__vs: _root_.scala.Predef.String *): GraphMetadata = addAllNodeTypes(__vs)
    def addAllNodeTypes(__vs: Iterable[_root_.scala.Predef.String]): GraphMetadata = copy(nodeTypes = nodeTypes ++ __vs)
    def withNodeTypes(__v: _root_.scala.Seq[_root_.scala.Predef.String]): GraphMetadata = copy(nodeTypes = __v)
    def clearEdgeTypes = copy(edgeTypes = _root_.scala.Seq.empty)
    def addEdgeTypes(__vs: snapchat.research.gbml.graph_schema.EdgeType *): GraphMetadata = addAllEdgeTypes(__vs)
    def addAllEdgeTypes(__vs: Iterable[snapchat.research.gbml.graph_schema.EdgeType]): GraphMetadata = copy(edgeTypes = edgeTypes ++ __vs)
    def withEdgeTypes(__v: _root_.scala.Seq[snapchat.research.gbml.graph_schema.EdgeType]): GraphMetadata = copy(edgeTypes = __v)
    def clearCondensedEdgeTypeMap = copy(condensedEdgeTypeMap = _root_.scala.collection.immutable.Map.empty)
    def addCondensedEdgeTypeMap(__vs: (_root_.scala.Int, snapchat.research.gbml.graph_schema.EdgeType) *): GraphMetadata = addAllCondensedEdgeTypeMap(__vs)
    def addAllCondensedEdgeTypeMap(__vs: Iterable[(_root_.scala.Int, snapchat.research.gbml.graph_schema.EdgeType)]): GraphMetadata = copy(condensedEdgeTypeMap = condensedEdgeTypeMap ++ __vs)
    def withCondensedEdgeTypeMap(__v: _root_.scala.collection.immutable.Map[_root_.scala.Int, snapchat.research.gbml.graph_schema.EdgeType]): GraphMetadata = copy(condensedEdgeTypeMap = __v)
    def clearCondensedNodeTypeMap = copy(condensedNodeTypeMap = _root_.scala.collection.immutable.Map.empty)
    def addCondensedNodeTypeMap(__vs: (_root_.scala.Int, _root_.scala.Predef.String) *): GraphMetadata = addAllCondensedNodeTypeMap(__vs)
    def addAllCondensedNodeTypeMap(__vs: Iterable[(_root_.scala.Int, _root_.scala.Predef.String)]): GraphMetadata = copy(condensedNodeTypeMap = condensedNodeTypeMap ++ __vs)
    def withCondensedNodeTypeMap(__v: _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Predef.String]): GraphMetadata = copy(condensedNodeTypeMap = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => nodeTypes
        case 2 => edgeTypes
        case 3 => condensedEdgeTypeMap.iterator.map(snapchat.research.gbml.graph_schema.GraphMetadata._typemapper_condensedEdgeTypeMap.toBase(_)).toSeq
        case 4 => condensedNodeTypeMap.iterator.map(snapchat.research.gbml.graph_schema.GraphMetadata._typemapper_condensedNodeTypeMap.toBase(_)).toSeq
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(nodeTypes.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 2 => _root_.scalapb.descriptors.PRepeated(edgeTypes.iterator.map(_.toPMessage).toVector)
        case 3 => _root_.scalapb.descriptors.PRepeated(condensedEdgeTypeMap.iterator.map(snapchat.research.gbml.graph_schema.GraphMetadata._typemapper_condensedEdgeTypeMap.toBase(_).toPMessage).toVector)
        case 4 => _root_.scalapb.descriptors.PRepeated(condensedNodeTypeMap.iterator.map(snapchat.research.gbml.graph_schema.GraphMetadata._typemapper_condensedNodeTypeMap.toBase(_).toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: snapchat.research.gbml.graph_schema.GraphMetadata.type = snapchat.research.gbml.graph_schema.GraphMetadata
    // @@protoc_insertion_point(GeneratedMessage[snapchat.research.gbml.GraphMetadata])
}

object GraphMetadata extends scalapb.GeneratedMessageCompanion[snapchat.research.gbml.graph_schema.GraphMetadata] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[snapchat.research.gbml.graph_schema.GraphMetadata] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): snapchat.research.gbml.graph_schema.GraphMetadata = {
    val __nodeTypes: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    val __edgeTypes: _root_.scala.collection.immutable.VectorBuilder[snapchat.research.gbml.graph_schema.EdgeType] = new _root_.scala.collection.immutable.VectorBuilder[snapchat.research.gbml.graph_schema.EdgeType]
    val __condensedEdgeTypeMap: _root_.scala.collection.mutable.Builder[(_root_.scala.Int, snapchat.research.gbml.graph_schema.EdgeType), _root_.scala.collection.immutable.Map[_root_.scala.Int, snapchat.research.gbml.graph_schema.EdgeType]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Int, snapchat.research.gbml.graph_schema.EdgeType]
    val __condensedNodeTypeMap: _root_.scala.collection.mutable.Builder[(_root_.scala.Int, _root_.scala.Predef.String), _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Predef.String]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Int, _root_.scala.Predef.String]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __nodeTypes += _input__.readStringRequireUtf8()
        case 18 =>
          __edgeTypes += _root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.graph_schema.EdgeType](_input__)
        case 26 =>
          __condensedEdgeTypeMap += snapchat.research.gbml.graph_schema.GraphMetadata._typemapper_condensedEdgeTypeMap.toCustom(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.graph_schema.GraphMetadata.CondensedEdgeTypeMapEntry](_input__))
        case 34 =>
          __condensedNodeTypeMap += snapchat.research.gbml.graph_schema.GraphMetadata._typemapper_condensedNodeTypeMap.toCustom(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.graph_schema.GraphMetadata.CondensedNodeTypeMapEntry](_input__))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    snapchat.research.gbml.graph_schema.GraphMetadata(
        nodeTypes = __nodeTypes.result(),
        edgeTypes = __edgeTypes.result(),
        condensedEdgeTypeMap = __condensedEdgeTypeMap.result(),
        condensedNodeTypeMap = __condensedNodeTypeMap.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[snapchat.research.gbml.graph_schema.GraphMetadata] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      snapchat.research.gbml.graph_schema.GraphMetadata(
        nodeTypes = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        edgeTypes = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[snapchat.research.gbml.graph_schema.EdgeType]]).getOrElse(_root_.scala.Seq.empty),
        condensedEdgeTypeMap = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[snapchat.research.gbml.graph_schema.GraphMetadata.CondensedEdgeTypeMapEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(snapchat.research.gbml.graph_schema.GraphMetadata._typemapper_condensedEdgeTypeMap.toCustom(_)).toMap,
        condensedNodeTypeMap = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[snapchat.research.gbml.graph_schema.GraphMetadata.CondensedNodeTypeMapEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(snapchat.research.gbml.graph_schema.GraphMetadata._typemapper_condensedNodeTypeMap.toCustom(_)).toMap
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = GraphSchemaProto.javaDescriptor.getMessageTypes().get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = GraphSchemaProto.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = snapchat.research.gbml.graph_schema.EdgeType
      case 3 => __out = snapchat.research.gbml.graph_schema.GraphMetadata.CondensedEdgeTypeMapEntry
      case 4 => __out = snapchat.research.gbml.graph_schema.GraphMetadata.CondensedNodeTypeMapEntry
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.snapchat.research.gbml.graph_schema.GraphMetadata.CondensedEdgeTypeMapEntry,
      _root_.snapchat.research.gbml.graph_schema.GraphMetadata.CondensedNodeTypeMapEntry
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = snapchat.research.gbml.graph_schema.GraphMetadata(
    nodeTypes = _root_.scala.Seq.empty,
    edgeTypes = _root_.scala.Seq.empty,
    condensedEdgeTypeMap = _root_.scala.collection.immutable.Map.empty,
    condensedNodeTypeMap = _root_.scala.collection.immutable.Map.empty
  )
  @SerialVersionUID(0L)
  final case class CondensedEdgeTypeMapEntry(
      key: _root_.scala.Int = 0,
      value: _root_.scala.Option[snapchat.research.gbml.graph_schema.EdgeType] = _root_.scala.None,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[CondensedEdgeTypeMapEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, __value)
          }
        };
        if (value.isDefined) {
          val __value = value.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (__v != 0) {
            _output__.writeUInt32(1, __v)
          }
        };
        value.foreach { __v =>
          val __m = __v
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Int): CondensedEdgeTypeMapEntry = copy(key = __v)
      def getValue: snapchat.research.gbml.graph_schema.EdgeType = value.getOrElse(snapchat.research.gbml.graph_schema.EdgeType.defaultInstance)
      def clearValue: CondensedEdgeTypeMapEntry = copy(value = _root_.scala.None)
      def withValue(__v: snapchat.research.gbml.graph_schema.EdgeType): CondensedEdgeTypeMapEntry = copy(value = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != 0) __t else null
          }
          case 2 => value.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PInt(key)
          case 2 => value.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: snapchat.research.gbml.graph_schema.GraphMetadata.CondensedEdgeTypeMapEntry.type = snapchat.research.gbml.graph_schema.GraphMetadata.CondensedEdgeTypeMapEntry
      // @@protoc_insertion_point(GeneratedMessage[snapchat.research.gbml.GraphMetadata.CondensedEdgeTypeMapEntry])
  }
  
  object CondensedEdgeTypeMapEntry extends scalapb.GeneratedMessageCompanion[snapchat.research.gbml.graph_schema.GraphMetadata.CondensedEdgeTypeMapEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[snapchat.research.gbml.graph_schema.GraphMetadata.CondensedEdgeTypeMapEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): snapchat.research.gbml.graph_schema.GraphMetadata.CondensedEdgeTypeMapEntry = {
      var __key: _root_.scala.Int = 0
      var __value: _root_.scala.Option[snapchat.research.gbml.graph_schema.EdgeType] = _root_.scala.None
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __key = _input__.readUInt32()
          case 18 =>
            __value = Option(__value.fold(_root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.graph_schema.EdgeType](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      snapchat.research.gbml.graph_schema.GraphMetadata.CondensedEdgeTypeMapEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[snapchat.research.gbml.graph_schema.GraphMetadata.CondensedEdgeTypeMapEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        snapchat.research.gbml.graph_schema.GraphMetadata.CondensedEdgeTypeMapEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[snapchat.research.gbml.graph_schema.EdgeType]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = snapchat.research.gbml.graph_schema.GraphMetadata.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = snapchat.research.gbml.graph_schema.GraphMetadata.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = snapchat.research.gbml.graph_schema.EdgeType
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = snapchat.research.gbml.graph_schema.GraphMetadata.CondensedEdgeTypeMapEntry(
      key = 0,
      value = _root_.scala.None
    )
    implicit class CondensedEdgeTypeMapEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.graph_schema.GraphMetadata.CondensedEdgeTypeMapEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, snapchat.research.gbml.graph_schema.GraphMetadata.CondensedEdgeTypeMapEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.graph_schema.EdgeType] = field(_.getValue)((c_, f_) => c_.copy(value = Option(f_)))
      def optionalValue: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[snapchat.research.gbml.graph_schema.EdgeType]] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[snapchat.research.gbml.graph_schema.GraphMetadata.CondensedEdgeTypeMapEntry, (_root_.scala.Int, snapchat.research.gbml.graph_schema.EdgeType)] =
      _root_.scalapb.TypeMapper[snapchat.research.gbml.graph_schema.GraphMetadata.CondensedEdgeTypeMapEntry, (_root_.scala.Int, snapchat.research.gbml.graph_schema.EdgeType)](__m => (__m.key, __m.getValue))(__p => snapchat.research.gbml.graph_schema.GraphMetadata.CondensedEdgeTypeMapEntry(__p._1, Some(__p._2)))
    def of(
      key: _root_.scala.Int,
      value: _root_.scala.Option[snapchat.research.gbml.graph_schema.EdgeType]
    ): _root_.snapchat.research.gbml.graph_schema.GraphMetadata.CondensedEdgeTypeMapEntry = _root_.snapchat.research.gbml.graph_schema.GraphMetadata.CondensedEdgeTypeMapEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[snapchat.research.gbml.GraphMetadata.CondensedEdgeTypeMapEntry])
  }
  
  @SerialVersionUID(0L)
  final case class CondensedNodeTypeMapEntry(
      key: _root_.scala.Int = 0,
      value: _root_.scala.Predef.String = "",
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[CondensedNodeTypeMapEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, __value)
          }
        };
        
        {
          val __value = value
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (__v != 0) {
            _output__.writeUInt32(1, __v)
          }
        };
        {
          val __v = value
          if (!__v.isEmpty) {
            _output__.writeString(2, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Int): CondensedNodeTypeMapEntry = copy(key = __v)
      def withValue(__v: _root_.scala.Predef.String): CondensedNodeTypeMapEntry = copy(value = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != 0) __t else null
          }
          case 2 => {
            val __t = value
            if (__t != "") __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PInt(key)
          case 2 => _root_.scalapb.descriptors.PString(value)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: snapchat.research.gbml.graph_schema.GraphMetadata.CondensedNodeTypeMapEntry.type = snapchat.research.gbml.graph_schema.GraphMetadata.CondensedNodeTypeMapEntry
      // @@protoc_insertion_point(GeneratedMessage[snapchat.research.gbml.GraphMetadata.CondensedNodeTypeMapEntry])
  }
  
  object CondensedNodeTypeMapEntry extends scalapb.GeneratedMessageCompanion[snapchat.research.gbml.graph_schema.GraphMetadata.CondensedNodeTypeMapEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[snapchat.research.gbml.graph_schema.GraphMetadata.CondensedNodeTypeMapEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): snapchat.research.gbml.graph_schema.GraphMetadata.CondensedNodeTypeMapEntry = {
      var __key: _root_.scala.Int = 0
      var __value: _root_.scala.Predef.String = ""
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __key = _input__.readUInt32()
          case 18 =>
            __value = _input__.readStringRequireUtf8()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      snapchat.research.gbml.graph_schema.GraphMetadata.CondensedNodeTypeMapEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[snapchat.research.gbml.graph_schema.GraphMetadata.CondensedNodeTypeMapEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        snapchat.research.gbml.graph_schema.GraphMetadata.CondensedNodeTypeMapEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = snapchat.research.gbml.graph_schema.GraphMetadata.javaDescriptor.getNestedTypes().get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = snapchat.research.gbml.graph_schema.GraphMetadata.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = snapchat.research.gbml.graph_schema.GraphMetadata.CondensedNodeTypeMapEntry(
      key = 0,
      value = ""
    )
    implicit class CondensedNodeTypeMapEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.graph_schema.GraphMetadata.CondensedNodeTypeMapEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, snapchat.research.gbml.graph_schema.GraphMetadata.CondensedNodeTypeMapEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[snapchat.research.gbml.graph_schema.GraphMetadata.CondensedNodeTypeMapEntry, (_root_.scala.Int, _root_.scala.Predef.String)] =
      _root_.scalapb.TypeMapper[snapchat.research.gbml.graph_schema.GraphMetadata.CondensedNodeTypeMapEntry, (_root_.scala.Int, _root_.scala.Predef.String)](__m => (__m.key, __m.value))(__p => snapchat.research.gbml.graph_schema.GraphMetadata.CondensedNodeTypeMapEntry(__p._1, __p._2))
    def of(
      key: _root_.scala.Int,
      value: _root_.scala.Predef.String
    ): _root_.snapchat.research.gbml.graph_schema.GraphMetadata.CondensedNodeTypeMapEntry = _root_.snapchat.research.gbml.graph_schema.GraphMetadata.CondensedNodeTypeMapEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[snapchat.research.gbml.GraphMetadata.CondensedNodeTypeMapEntry])
  }
  
  implicit class GraphMetadataLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.graph_schema.GraphMetadata]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, snapchat.research.gbml.graph_schema.GraphMetadata](_l) {
    def nodeTypes: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.nodeTypes)((c_, f_) => c_.copy(nodeTypes = f_))
    def edgeTypes: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[snapchat.research.gbml.graph_schema.EdgeType]] = field(_.edgeTypes)((c_, f_) => c_.copy(edgeTypes = f_))
    def condensedEdgeTypeMap: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Int, snapchat.research.gbml.graph_schema.EdgeType]] = field(_.condensedEdgeTypeMap)((c_, f_) => c_.copy(condensedEdgeTypeMap = f_))
    def condensedNodeTypeMap: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Predef.String]] = field(_.condensedNodeTypeMap)((c_, f_) => c_.copy(condensedNodeTypeMap = f_))
  }
  final val NODE_TYPES_FIELD_NUMBER = 1
  final val EDGE_TYPES_FIELD_NUMBER = 2
  final val CONDENSED_EDGE_TYPE_MAP_FIELD_NUMBER = 3
  final val CONDENSED_NODE_TYPE_MAP_FIELD_NUMBER = 4
  @transient
  private[graph_schema] val _typemapper_condensedEdgeTypeMap: _root_.scalapb.TypeMapper[snapchat.research.gbml.graph_schema.GraphMetadata.CondensedEdgeTypeMapEntry, (_root_.scala.Int, snapchat.research.gbml.graph_schema.EdgeType)] = implicitly[_root_.scalapb.TypeMapper[snapchat.research.gbml.graph_schema.GraphMetadata.CondensedEdgeTypeMapEntry, (_root_.scala.Int, snapchat.research.gbml.graph_schema.EdgeType)]]
  @transient
  private[graph_schema] val _typemapper_condensedNodeTypeMap: _root_.scalapb.TypeMapper[snapchat.research.gbml.graph_schema.GraphMetadata.CondensedNodeTypeMapEntry, (_root_.scala.Int, _root_.scala.Predef.String)] = implicitly[_root_.scalapb.TypeMapper[snapchat.research.gbml.graph_schema.GraphMetadata.CondensedNodeTypeMapEntry, (_root_.scala.Int, _root_.scala.Predef.String)]]
  def of(
    nodeTypes: _root_.scala.Seq[_root_.scala.Predef.String],
    edgeTypes: _root_.scala.Seq[snapchat.research.gbml.graph_schema.EdgeType],
    condensedEdgeTypeMap: _root_.scala.collection.immutable.Map[_root_.scala.Int, snapchat.research.gbml.graph_schema.EdgeType],
    condensedNodeTypeMap: _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Predef.String]
  ): _root_.snapchat.research.gbml.graph_schema.GraphMetadata = _root_.snapchat.research.gbml.graph_schema.GraphMetadata(
    nodeTypes,
    edgeTypes,
    condensedEdgeTypeMap,
    condensedNodeTypeMap
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[snapchat.research.gbml.GraphMetadata])
}
